{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/dashboard/dashboard-view.tsx"],"sourcesContent":["\n\n\"use client\";\n\nimport * as React from \"react\";\nimport { \n    Card, \n    CardContent, \n    CardHeader, \n    CardTitle, \n    CardDescription \n} from \"@/components/ui/card\";\nimport { \n    PanelLeft,\n    FileText,\n    Calendar as CalendarIcon,\n    MessageSquare,\n    Users,\n    Clock,\n    Smile,\n    UserCheck,\n    Bot,\n    ArrowUp,\n    ArrowDown,\n    BarChartIcon,\n    PieChartIcon,\n    File,\n    Download,\n    Mail,\n    AlertTriangle,\n    Star,\n    TrendingUp,\n    MoreHorizontal\n} from \"lucide-react\";\nimport type { UserProfile, Agent, UnansweredQuery, Chat } from \"@/types\";\nimport { Button } from \"../ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Bar,\n  BarChart,\n  Line,\n  LineChart,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n  Legend,\n  Cell\n} from \"recharts\"\nimport { ChartContainer, ChartTooltip, ChartTooltipContent } from \"@/components/ui/chart\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"../ui/table\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"../ui/avatar\";\nimport { Badge } from \"../ui/badge\";\nimport { Alert, AlertTitle, AlertDescription } from \"@/components/ui/alert\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"../ui/select\";\nimport { KenaAILogo } from \"../ui/kena-ai-logo\";\nimport { Label } from \"@/components/ui/label\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuGroup, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from \"../ui/dropdown-menu\";\nimport { Input } from \"../ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { getAgentsByCompany, getChatsByCompany, scheduleAnalyticsReport } from \"@/app/actions\";\nimport { Skeleton } from \"../ui/skeleton\";\nimport { DateRange } from \"react-day-picker\";\nimport { addDays, format, startOfDay, eachDayOfInterval, isWithinInterval, endOfDay } from \"date-fns\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"../ui/popover\";\nimport { Calendar } from \"../ui/calendar\";\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport Papa from 'papaparse';\n\n\nconst channelBreakdownConfig = {\n  value: {\n    label: \"Conversations\",\n  },\n  WhatsApp: {\n    label: \"WhatsApp\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  Webchat: {\n    label: \"Webchat\",\n    color: \"hsl(var(--chart-2))\",\n  },\n  Instagram: {\n    label: \"Instagram\",\n    color: \"hsl(var(--chart-3))\",\n  },\n  Facebook: {\n    label: \"Facebook\",\n    color: \"hsl(var(--chart-4))\",\n  },\n}\n\n\nconst AgentPerformanceTable = ({ agents, chats }: { agents: Agent[], chats: Chat[] }) => {\n    \n    const agentPerformance = agents.map(agent => {\n        const agentChats = chats.filter(chat => {\n            // A simple heuristic: if a message from 'me' (agent) exists with this agent's ID\n            return chat.messages.some(m => m.sender === 'me' && m.senderId?.toString() === agent.id.toString());\n        });\n        \n        let totalSeconds = 0;\n        let validAgentsForTime = 0;\n        if (agent.avgResponseTime && agent.avgResponseTime !== 'N/A') {\n            const minMatch = agent.avgResponseTime.match(/(\\d+)m/);\n            const secMatch = agent.avgResponseTime.match(/(\\d+)s/);\n            if (minMatch) totalSeconds += parseInt(minMatch[1]) * 60;\n            if (secMatch) totalSeconds += parseInt(secMatch[1]);\n            validAgentsForTime++;\n        }\n        \n        return {\n            ...agent,\n            conversationsHandled: agentChats.length,\n            avgResponseTime: agent.avgResponseTime,\n            csat: agent.csat\n        }\n    });\n    \n    const sortedAgents = [...agentPerformance]\n        .sort((a, b) => (b.conversationsHandled || 0) - (a.conversationsHandled || 0))\n        .slice(0, 5)\n        .map((agent, index) => ({...agent, rank: index + 1}));\n\n    if (sortedAgents.length === 0 || sortedAgents.every(a => (a.conversationsHandled || 0) === 0)) {\n        return <p className=\"text-center text-muted-foreground p-8\">No agent data available for the selected period.</p>;\n    }\n\n    return (\n    <Table>\n        <TableHeader>\n            <TableRow>\n                <TableHead className=\"w-[50px]\">Rank</TableHead>\n                <TableHead>Agent</TableHead>\n                <TableHead className=\"text-center\">Conversations</TableHead>\n                <TableHead className=\"text-center\">Avg. Response</TableHead>\n                <TableHead className=\"text-right\">CSAT</TableHead>\n            </TableRow>\n        </TableHeader>\n        <TableBody>\n            {sortedAgents.map((perf) => (\n                <TableRow key={perf.id}>\n                    <TableCell className=\"font-bold text-lg\">{perf.rank}</TableCell>\n                    <TableCell>\n                        <div className=\"flex items-center gap-3\">\n                            <Avatar className=\"h-10 w-10\">\n                                <AvatarImage src={perf.avatar} alt={perf.name} data-ai-hint=\"person portrait\" />\n                                <AvatarFallback>{perf.name.charAt(0)}</AvatarFallback>\n                            </Avatar>\n                            <div className=\"font-medium\">{perf.name}</div>\n                        </div>\n                    </TableCell>\n                    <TableCell className=\"text-center\">{perf.conversationsHandled || 0}</TableCell>\n                    <TableCell className=\"text-center\">{perf.avgResponseTime || 'N/A'}</TableCell>\n                    <TableCell className=\"text-right\">{perf.csat ? `${perf.csat}%` : 'N/A'}</TableCell>\n                </TableRow>\n            ))}\n        </TableBody>\n    </Table>\n)};\n\n\ntype DashboardViewProps = {\n  onMenuClick: () => void;\n  user: UserProfile | null;\n};\n\nexport function DashboardView({ onMenuClick, user }: DashboardViewProps) {\n  const { toast } = useToast();\n  const [agents, setAgents] = React.useState<Agent[]>([]);\n  const [allChats, setAllChats] = React.useState<Chat[]>([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [date, setDate] = React.useState<DateRange | undefined>({\n    from: addDays(new Date(), -6),\n    to: new Date(),\n  });\n  const [reportEmail, setReportEmail] = React.useState(\"\");\n  const [reportFrequency, setReportFrequency] = React.useState(\"weekly\");\n\n  React.useEffect(() => {\n    async function fetchData() {\n        if(user?.companyId) {\n            setIsLoading(true);\n            const [fetchedAgents, fetchedChats] = await Promise.all([\n                getAgentsByCompany(user.companyId),\n                getChatsByCompany(user.companyId)\n            ]);\n            setAgents(fetchedAgents);\n            setAllChats(fetchedChats);\n            setIsLoading(false);\n        }\n    }\n    fetchData();\n  }, [user]);\n\n  const filteredChats = React.useMemo(() => {\n    if (!date?.from || !date?.to) {\n        return allChats;\n    }\n    const from = startOfDay(date.from);\n    const to = endOfDay(date.to);\n    \n    return allChats.filter(chat => {\n        // Use the last message timestamp if available, otherwise fallback to the chat's main timestamp\n        const lastActivityTimestamp = chat.messages.length > 0 \n            ? new Date(chat.messages[chat.messages.length - 1].timestamp)\n            : new Date(chat.timestamp); // Note: chat.timestamp might be just a time string. This might need improvement.\n            \n        // A more robust check if chat.timestamp is only a time string\n        const chatDate = new Date(chat.messages.length > 0 ? chat.messages[chat.messages.length - 1].timestamp : new Date());\n\n        return isWithinInterval(chatDate, { start: from, end: to });\n    });\n  }, [allChats, date]);\n\n\n  const agentPerformanceData = React.useMemo(() => {\n    return agents.map(agent => ({\n      name: agent.name,\n      conversations: filteredChats.filter(c => c.messages.some(m => m.senderId?.toString() === agent.id)).length,\n      avgResponseTime: agent.avgResponseTime || 'N/A',\n      csat: agent.csat || 'N/A',\n    }));\n  }, [agents, filteredChats]);\n\n  const handleExport = (type: 'PDF' | 'CSV') => {\n    const doc = new jsPDF();\n    const tableData = agentPerformanceData.map(d => [d.name, d.conversations, d.avgResponseTime, d.csat]);\n    \n    if (type === 'PDF') {\n      const pageHeight = doc.internal.pageSize.height || doc.internal.pageSize.getHeight();\n      const pageWidth = doc.internal.pageSize.width || doc.internal.pageSize.getWidth();\n\n      // Header\n      doc.setFillColor(86, 36, 112); // Primary color\n      doc.rect(0, 0, pageWidth, 20, 'F');\n      doc.setFontSize(22);\n      doc.setFont('helvetica', 'bold');\n      doc.setTextColor(255, 255, 255);\n      doc.text(\"KenaAI Analytics Report\", 14, 14);\n\n      // Report Info\n      doc.setFontSize(11);\n      doc.setFont('helvetica', 'normal');\n      doc.setTextColor(100);\n      const dateRangeText = date?.from && date.to ? `${format(date.from, \"LLL dd, y\")} - ${format(date.to, \"LLL dd, y\")}` : \"All Time\";\n      doc.text(`Date Range: ${dateRangeText}`, 14, 30);\n      \n      // KPIs\n      doc.setFontSize(10);\n      let kpiY = 40;\n      kpiData.forEach((kpi, index) => {\n          doc.setFont('helvetica', 'bold');\n          doc.text(kpi.title || '', 14, kpiY);\n          doc.setFont('helvetica', 'normal');\n          doc.text(String(kpi.value) || '', 60, kpiY);\n          kpiY += 7;\n      });\n\n      // Table\n      autoTable(doc, {\n        startY: kpiY + 10,\n        head: [['Agent', 'Conversations', 'Avg. Response', 'CSAT']],\n        body: tableData,\n        theme: 'striped',\n        headStyles: {\n            fillColor: [86, 36, 112], // Primary color\n            textColor: 255,\n            fontStyle: 'bold',\n        },\n        alternateRowStyles: {\n            fillColor: [245, 245, 245]\n        },\n        didDrawPage: (data) => {\n            // Footer\n            const pageCount = doc.internal.pages.length;\n            doc.setFontSize(10);\n            doc.setTextColor(150);\n            doc.text(`Page ${data.pageNumber} of ${pageCount}`, data.settings.margin.left, pageHeight - 10);\n            doc.text(`Report generated on: ${format(new Date(), 'yyyy-MM-dd HH:mm')}`, pageWidth - data.settings.margin.right, pageHeight - 10, { align: 'right' });\n        }\n      });\n      doc.save(`kena-ai-report-${format(new Date(), 'yyyy-MM-dd')}.pdf`);\n    } else if (type === 'CSV') {\n        const csv = Papa.unparse({\n            fields: ['Agent', 'Conversations Handled', 'Average Response Time', 'CSAT Score'],\n            data: tableData\n        });\n        const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n        const link = document.createElement(\"a\");\n        if (link.download !== undefined) {\n            const url = URL.createObjectURL(blob);\n            link.setAttribute(\"href\", url);\n            link.setAttribute(\"download\", `kena-ai-report-${format(new Date(), 'yyyy-MM-dd')}.csv`);\n            link.style.visibility = 'hidden';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    }\n  };\n\n  const handleScheduleReport = async () => {\n    if (!reportEmail || !reportEmail.includes('@')) {\n        toast({\n            variant: 'destructive',\n            title: \"Invalid Email\",\n            description: \"Please enter a valid email address.\",\n        });\n        return;\n    }\n    const result = await scheduleAnalyticsReport(reportEmail, reportFrequency);\n    if (result.success) {\n        toast({\n            title: \"Report Scheduled\",\n            description: `Your ${reportFrequency} analytics report will be sent to ${reportEmail}.`,\n        });\n    } else {\n         toast({\n            variant: 'destructive',\n            title: \"Scheduling Failed\",\n            description: result.message,\n        });\n    }\n  }\n\n  const kpiData = React.useMemo(() => {\n    if (isLoading) return Array(5).fill({});\n\n    const totalConversations = filteredChats.length;\n    const botConversations = filteredChats.filter(c => c.isChatbotActive).length;\n    const agentConversations = totalConversations - botConversations;\n    const botPercentage = totalConversations > 0 ? (botConversations / totalConversations) * 100 : 0;\n    const agentPercentage = totalConversations > 0 ? (agentConversations / totalConversations) * 100 : 0;\n    \n    let avgResponseTimeText = \"N/A\";\n    let avgCsatText = \"N/A\";\n\n    if (totalConversations > 0) {\n        let totalSeconds = 0;\n        let validAgentsForTime = 0;\n        agents.forEach(agent => {\n            if (agent.avgResponseTime && agent.avgResponseTime !== 'N/A' && agent.conversationsToday && agent.conversationsToday > 0) {\n                const minMatch = agent.avgResponseTime.match(/(\\d+)m/);\n                const secMatch = agent.avgResponseTime.match(/(\\d+)s/);\n                let seconds = 0;\n                if (minMatch) seconds += parseInt(minMatch[1]) * 60;\n                if (secMatch) seconds += parseInt(secMatch[1]);\n                totalSeconds += seconds;\n                validAgentsForTime++;\n            }\n        });\n        const avgSeconds = validAgentsForTime > 0 ? totalSeconds / validAgentsForTime : 0;\n        const avgMinutes = Math.floor(avgSeconds / 60);\n        const remainingSeconds = Math.round(avgSeconds % 60);\n        avgResponseTimeText = avgSeconds > 0 ? `${avgMinutes}m ${remainingSeconds}s` : \"N/A\";\n\n        let totalCsat = 0;\n        let validAgentsForCsat = 0;\n        agents.forEach(agent => {\n            if (agent.csat && agent.conversationsToday && agent.conversationsToday > 0) {\n                totalCsat += agent.csat;\n                validAgentsForCsat++;\n            }\n        });\n        const avgCsat = validAgentsForCsat > 0 ? totalCsat / validAgentsForCsat : 0;\n        avgCsatText = avgCsat > 0 ? `${avgCsat.toFixed(1)}%` : \"N/A\";\n    }\n\n    return [\n        {\n            title: \"Total Conversations\",\n            value: totalConversations.toString(),\n            icon: MessageSquare,\n        },\n        {\n            title: \"Bot vs Agent\",\n            value: `${botPercentage.toFixed(0)}% / ${agentPercentage.toFixed(0)}%`,\n            icon: Bot,\n        },\n        {\n            title: \"Average Response Time\",\n            value: avgResponseTimeText,\n            icon: Clock,\n        },\n        {\n            title: \"Customer Satisfaction (CSAT)\",\n            value: avgCsatText,\n            icon: Smile,\n        },\n        {\n            title: \"Agent Availability\",\n            value: `${agents.filter(a => a.status === 'Online').length} Active`,\n            icon: UserCheck,\n        },\n    ]\n  }, [filteredChats, agents, isLoading]);\n\n  const channelBreakdownData = React.useMemo(() => {\n    if (filteredChats.length === 0) return [];\n    const counts = filteredChats.reduce((acc, chat) => {\n        acc[chat.channel] = (acc[chat.channel] || 0) + 1;\n        return acc;\n    }, {} as Record<string, number>);\n\n    return Object.entries(counts).map(([name, value], index) => ({\n        name,\n        value,\n        fill: `hsl(var(--chart-${index + 1}))`\n    }));\n  }, [filteredChats]);\n  \n  const conversationVolumeData = React.useMemo(() => {\n    if (!date?.from || !date?.to || filteredChats.length === 0) return [];\n\n    const days = eachDayOfInterval({ start: date.from, end: date.to });\n    const dailyData = days.map(day => ({\n        date: format(day, \"EEE\"),\n        fullDate: format(day, \"yyyy-MM-dd\"),\n        conversations: 0,\n    }));\n    \n    const dailyDataMap = new Map(dailyData.map(d => [d.fullDate, d]));\n\n    for (const chat of filteredChats) {\n        // FIX: Use a reliable timestamp from the first message, or fallback to now()\n        const chatDate = new Date(chat.messages?.[0]?.timestamp || new Date());\n        const chatDateStr = format(chatDate, \"yyyy-MM-dd\");\n        if (dailyDataMap.has(chatDateStr)) {\n            dailyDataMap.get(chatDateStr)!.conversations++;\n        }\n    }\n    \n    return Array.from(dailyDataMap.values());\n}, [filteredChats, date]);\n\n  const customerEngagementData = React.useMemo(() => {\n    if (!date?.from || !date?.to || allChats.length === 0) {\n        return { new: 0, returning: 0 };\n    }\n    const from = startOfDay(date.from);\n\n    const contactIdsInPeriod = new Set(filteredChats.map(c => c.user.id));\n    const newCustomers = new Set<string>();\n    const returningCustomers = new Set<string>();\n\n    for (const chat of allChats) {\n        if (!chat.user._id) continue;\n        \n        const contactCreationDate = new Date(parseInt(chat.user._id.toString().substring(0, 8), 16) * 1000);\n        \n        if (contactIdsInPeriod.has(chat.user.id)) {\n            if (contactCreationDate >= from) {\n                newCustomers.add(chat.user.id);\n            } else {\n                returningCustomers.add(chat.user.id);\n            }\n        }\n    }\n\n    return { new: newCustomers.size, returning: returningCustomers.size };\n  }, [filteredChats, allChats, date]);\n\n\n  if (user?.role !== 'admin') {\n      return (\n          <div className=\"flex h-screen w-full flex-col bg-background text-foreground\">\n             <header className=\"flex items-start sm:items-center justify-between p-4 border-b\">\n                <div className=\"flex items-center gap-2\">\n                    <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\" onClick={onMenuClick}>\n                        <PanelLeft className=\"h-5 w-5\" />\n                        <span className=\"sr-only\">Open Menu</span>\n                    </Button>\n                    <h1 className=\"text-2xl font-bold\">Access Denied</h1>\n                </div>\n            </header>\n            <main className=\"flex-1 flex items-center justify-center p-4\">\n                <Card className=\"w-full max-w-md\">\n                    <CardHeader>\n                        <CardTitle>Permission Required</CardTitle>\n                        <CardDescription>\n                            You do not have permission to view the dashboard. This area is restricted to administrators only.\n                        </CardDescription>\n                    </CardHeader>\n                </Card>\n            </main>\n          </div>\n      )\n  }\n\n  const DateRangePicker = ({className}: {className?: string}) => (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          id=\"date\"\n          variant={\"outline\"}\n          className={cn(\n            \"justify-start text-left font-normal\",\n            !date && \"text-muted-foreground\",\n            className\n          )}\n        >\n          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n          {date?.from ? (\n            date.to ? (\n              <>\n                {format(date.from, \"LLL dd, y\")} -{\" \"}\n                {format(date.to, \"LLL dd, y\")}\n              </>\n            ) : (\n              format(date.from, \"LLL dd, y\")\n            )\n          ) : (\n            <span>Pick a date</span>\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\" align=\"end\">\n        <Calendar\n          initialFocus\n          mode=\"range\"\n          defaultMonth={date?.from}\n          selected={date}\n          onSelect={setDate}\n          numberOfMonths={2}\n        />\n      </PopoverContent>\n    </Popover>\n  );\n\n  return (\n    <div className=\"flex h-screen w-full flex-col bg-background text-foreground\">\n      <header className=\"flex items-center justify-between gap-4 p-4 border-b\">\n        <div className=\"flex items-center gap-4 h-full\">\n            <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\" onClick={onMenuClick}>\n                <PanelLeft className=\"h-5 w-5\" />\n                <span className=\"sr-only\">Open Menu</span>\n            </Button>\n            <KenaAILogo className=\"h-13 hidden sm:block\" />\n            <h1 className=\"text-xl sm:text-2xl font-bold\">Dashboard</h1>\n        </div>\n        <div className=\"flex items-center gap-2\">\n            <DateRangePicker className=\"hidden sm:flex\" />\n             <Popover>\n              <PopoverTrigger asChild>\n                <Button variant=\"outline\" size=\"icon\" className=\"sm:hidden\"><CalendarIcon className=\"h-4 w-4\" /></Button>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-auto p-0\" align=\"end\">\n                <Calendar\n                  initialFocus\n                  mode=\"range\"\n                  defaultMonth={date?.from}\n                  selected={date}\n                  onSelect={setDate}\n                  numberOfMonths={1}\n                />\n              </PopoverContent>\n            </Popover>\n\n\n            <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                    <Button className=\"hidden sm:flex gap-2\"><Download className=\"h-4 w-4\" /> Export Report</Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-64\" align=\"end\">\n                    <DropdownMenuLabel>Export Options</DropdownMenuLabel>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem onClick={() => handleExport('PDF')}><File className=\"mr-2 h-4 w-4\" /> Export as PDF</DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => handleExport('CSV')}><Download className=\"mr-2 h-4 w-4\" /> Export as CSV</DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuGroup>\n                        <div className=\"px-2 py-1.5\">\n                            <Label htmlFor=\"report-email\" className=\"text-xs font-semibold\">Schedule Email Report</Label>\n                            <div className=\"flex items-center gap-2 mt-2\">\n                                <Input id=\"report-email\" type=\"email\" placeholder=\"your@email.com\" className=\"h-8 flex-1\" value={reportEmail} onChange={(e) => setReportEmail(e.target.value)} />\n                            </div>\n                            <div className=\"flex items-center gap-2 mt-2\">\n                                <Select defaultValue={reportFrequency} onValueChange={setReportFrequency}>\n                                    <SelectTrigger className=\"h-8 flex-1\">\n                                        <SelectValue />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                        <SelectItem value=\"daily\">Daily</SelectItem>\n                                        <SelectItem value=\"weekly\">Weekly</SelectItem>\n                                        <SelectItem value=\"monthly\">Monthly</SelectItem>\n                                    </SelectContent>\n                                </Select>\n                                <Button size=\"sm\" onClick={handleScheduleReport}>Schedule</Button>\n                            </div>\n                        </div>\n                    </DropdownMenuGroup>\n                </DropdownMenuContent>\n            </DropdownMenu>\n\n            <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                    <Button size=\"icon\" className=\"sm:hidden\"><Download className=\"h-4 w-4\" /></Button>\n                </DropdownMenuTrigger>\n                 <DropdownMenuContent className=\"w-64\" align=\"end\">\n                    <DropdownMenuLabel>Export Options</DropdownMenuLabel>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem onClick={() => handleExport('PDF')}><File className=\"mr-2 h-4 w-4\" /> Export as PDF</DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => handleExport('CSV')}><Download className=\"mr-2 h-4 w-4\" /> Export as CSV</DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuGroup>\n                        <div className=\"px-2 py-1.5\">\n                            <Label htmlFor=\"report-email-mobile\" className=\"text-xs font-semibold\">Schedule Email Report</Label>\n                            <div className=\"flex items-center gap-2 mt-2\">\n                                <Input id=\"report-email-mobile\" type=\"email\" placeholder=\"your@email.com\" className=\"h-8 flex-1\" value={reportEmail} onChange={(e) => setReportEmail(e.target.value)} />\n                            </div>\n                             <div className=\"flex items-center gap-2 mt-2\">\n                                <Select defaultValue={reportFrequency} onValueChange={setReportFrequency}>\n                                    <SelectTrigger className=\"h-8 flex-1\">\n                                        <SelectValue />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                        <SelectItem value=\"daily\">Daily</SelectItem>\n                                        <SelectItem value=\"weekly\">Weekly</SelectItem>\n                                        <SelectItem value=\"monthly\">Monthly</SelectItem>\n                                    </SelectContent>\n                                </Select>\n                                <Button size=\"sm\" onClick={handleScheduleReport}>Schedule</Button>\n                            </div>\n                        </div>\n                    </DropdownMenuGroup>\n                </DropdownMenuContent>\n            </DropdownMenu>\n        </div>\n      </header>\n      <main className=\"flex-1 overflow-auto p-4 md:p-6 lg:p-8\">\n\n        {/* Section 1: Key Metrics */}\n        <div className=\"space-y-4\">\n            <h2 className=\"text-2xl font-bold\">Key Metrics</h2>\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5\">\n                {isLoading ? (\n                    Array.from({ length: 5 }).map((_, i) => (\n                        <Card key={i}>\n                            <CardHeader className=\"pb-2\"><Skeleton className=\"h-4 w-2/3\" /></CardHeader>\n                            <CardContent><Skeleton className=\"h-6 w-1/3 mb-2\" /><Skeleton className=\"h-3 w-3/4\" /></CardContent>\n                        </Card>\n                    ))\n                ) : kpiData.map((kpi) => (\n                    <Card key={kpi.title}>\n                        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                        <CardTitle className=\"text-sm font-medium\">{kpi.title}</CardTitle>\n                        {kpi.icon && <kpi.icon className=\"h-4 w-4 text-muted-foreground\" />}\n                        </CardHeader>\n                        <CardContent>\n                        <div className=\"text-2xl font-bold\">{kpi.value}</div>\n                        </CardContent>\n                    </Card>\n                ))}\n            </div>\n        </div>\n\n        {/* Section 2: Main Dashboard Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 mt-8\">\n            \n            <div className=\"lg:col-span-2 space-y-8\">\n                {/* Conversation Insights */}\n                <div>\n                    <h2 className=\"text-2xl font-bold mb-4\">Conversation Insights</h2>\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>Conversation Volume</CardTitle>\n                            <CardDescription>Volume of conversations for the selected period.</CardDescription>\n                        </CardHeader>\n                        <CardContent>\n                            <ChartContainer config={{}} className=\"h-[300px] w-full\">\n                                {isLoading || !conversationVolumeData || conversationVolumeData.length === 0 ? (\n                                    <div className=\"flex h-full items-center justify-center text-muted-foreground\">No conversation data available.</div>\n                                ) : (\n                                    <LineChart data={conversationVolumeData} margin={{ top: 5, right: 20, left: -10, bottom: 5 }}>\n                                        <XAxis dataKey=\"date\" tickLine={false} axisLine={false} />\n                                        <YAxis tickLine={false} axisLine={false} />\n                                        <Tooltip content={<ChartTooltipContent />} />\n                                        <Line type=\"monotone\" dataKey=\"conversations\" stroke=\"hsl(var(--primary))\" strokeWidth={2} dot={true} />\n                                    </LineChart>\n                                )}\n                            </ChartContainer>\n                        </CardContent>\n                    </Card>\n                </div>\n                \n                {/* Agent Performance */}\n                <div>\n                    <h2 className=\"text-2xl font-bold mb-4\">Agent Performance</h2>\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>Agent Leaderboard</CardTitle>\n                            <CardDescription>Ranking agents by efficiency and conversations handled.</CardDescription>\n                        </CardHeader>\n                        <CardContent>\n                             {isLoading ? (\n                                <div className=\"space-y-2\">\n                                {Array.from({ length: 4 }).map((_, i) => <Skeleton key={i} className=\"h-12 w-full\" />)}\n                                </div>\n                            ) : (\n                                <AgentPerformanceTable agents={agents} chats={filteredChats} />\n                            )}\n                        </CardContent>\n                    </Card>\n                </div>\n\n                 {/* Chatbot Analysis */}\n                <div>\n                    <h2 className=\"text-2xl font-bold mb-4\">Chatbot Analysis</h2>\n                     <Card>\n                        <CardHeader className=\"flex flex-row items-center justify-between\">\n                            <div>\n                                <CardTitle>Unanswered Queries</CardTitle>\n                                <CardDescription>Log of queries the chatbot could not resolve.</CardDescription>\n                            </div>\n                        </CardHeader>\n                        <CardContent>\n                            <p className=\"text-center text-muted-foreground p-8\">Unanswered query tracking feature coming soon.</p>\n                        </CardContent>\n                    </Card>\n                </div>\n\n            </div>\n\n            <div className=\"lg:col-span-1 space-y-8\">\n\n                 {/* Smart Alerts */}\n                <div>\n                    <h2 className=\"text-2xl font-bold mb-4\">Smart Alerts</h2>\n                    <Card>\n                        <CardContent className=\"pt-6\">\n                            <p className=\"text-center text-muted-foreground p-8\">Real-time smart alerts feature coming soon.</p>\n                        </CardContent>\n                    </Card>\n                </div>\n\n                {/* Conversation Breakdown */}\n                <div>\n                    <h2 className=\"text-2xl font-bold mb-4\">Conversation Sources</h2>\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>Breakdown by Channel</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                             {isLoading || channelBreakdownData.length === 0 ? (\n                                <div className=\"flex h-[250px] items-center justify-center text-muted-foreground\">No channel data available.</div>\n                            ) : (\n                               <ChartContainer config={channelBreakdownConfig} className=\"h-[250px] w-full\">\n                                    <BarChart data={channelBreakdownData} layout=\"vertical\" margin={{ left: 10, right: 10 }}>\n                                        <XAxis type=\"number\" hide />\n                                        <YAxis \n                                            dataKey=\"name\" \n                                            type=\"category\" \n                                            tickLine={false} \n                                            axisLine={false} \n                                            tickMargin={10}\n                                            tickFormatter={(value) => channelBreakdownConfig[value as keyof typeof channelBreakdownConfig]?.label}\n                                        />\n                                        <Tooltip cursor={false} content={<ChartTooltipContent />} />\n                                        <Bar dataKey=\"value\" radius={4}>\n                                             {channelBreakdownData.map((entry) => (\n                                                <Cell key={`cell-${entry.name}`} fill={entry.fill} />\n                                            ))}\n                                        </Bar>\n                                    </BarChart>\n                                </ChartContainer>\n                            )}\n                        </CardContent>\n                    </Card>\n                </div>\n\n                {/* Customer Engagement */}\n                <div>\n                    <h2 className=\"text-2xl font-bold mb-4\">Customer Engagement</h2>\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>New vs Returning</CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"flex justify-around items-center\">\n                             {filteredChats.length === 0 ? (\n                                <div className=\"text-center text-muted-foreground p-4\">No data</div>\n                             ) : (\n                                <>\n                                    <div className=\"text-center\">\n                                        <p className=\"text-3xl font-bold\">{customerEngagementData.new}</p>\n                                        <p className=\"text-sm text-muted-foreground\">New</p>\n                                    </div>\n                                    <div className=\"text-center\">\n                                        <p className=\"text-3xl font-bold\">{customerEngagementData.returning}</p>\n                                        <p className=\"text-sm text-muted-foreground\">Returning</p>\n                                    </div>\n                                </>\n                             )}\n                        </CardContent>\n                    </Card>\n                </div>\n\n            </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\n    "],"names":[],"mappings":";;;;AAIA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAlEA;;;;;;;;;;;;;;;;;;;;;;;;AAqEA,MAAM,yBAAyB;IAC7B,OAAO;QACL,OAAO;IACT;IACA,UAAU;QACR,OAAO;QACP,OAAO;IACT;IACA,SAAS;QACP,OAAO;QACP,OAAO;IACT;IACA,WAAW;QACT,OAAO;QACP,OAAO;IACT;IACA,UAAU;QACR,OAAO;QACP,OAAO;IACT;AACF;AAGA,MAAM,wBAAwB,CAAC,EAAE,MAAM,EAAE,KAAK,EAAsC;IAEhF,MAAM,mBAAmB,OAAO,GAAG,CAAC,CAAA;QAChC,MAAM,aAAa,MAAM,MAAM,CAAC,CAAA;YAC5B,iFAAiF;YACjF,OAAO,KAAK,QAAQ,CAAC,IAAI,CAAC,CAAA,IAAK,EAAE,MAAM,KAAK,QAAQ,EAAE,QAAQ,EAAE,eAAe,MAAM,EAAE,CAAC,QAAQ;QACpG;QAEA,IAAI,eAAe;QACnB,IAAI,qBAAqB;QACzB,IAAI,MAAM,eAAe,IAAI,MAAM,eAAe,KAAK,OAAO;YAC1D,MAAM,WAAW,MAAM,eAAe,CAAC,KAAK,CAAC;YAC7C,MAAM,WAAW,MAAM,eAAe,CAAC,KAAK,CAAC;YAC7C,IAAI,UAAU,gBAAgB,SAAS,QAAQ,CAAC,EAAE,IAAI;YACtD,IAAI,UAAU,gBAAgB,SAAS,QAAQ,CAAC,EAAE;YAClD;QACJ;QAEA,OAAO;YACH,GAAG,KAAK;YACR,sBAAsB,WAAW,MAAM;YACvC,iBAAiB,MAAM,eAAe;YACtC,MAAM,MAAM,IAAI;QACpB;IACJ;IAEA,MAAM,eAAe;WAAI;KAAiB,CACrC,IAAI,CAAC,CAAC,GAAG,IAAM,CAAC,EAAE,oBAAoB,IAAI,CAAC,IAAI,CAAC,EAAE,oBAAoB,IAAI,CAAC,GAC3E,KAAK,CAAC,GAAG,GACT,GAAG,CAAC,CAAC,OAAO,QAAU,CAAC;YAAC,GAAG,KAAK;YAAE,MAAM,QAAQ;QAAC,CAAC;IAEvD,IAAI,aAAa,MAAM,KAAK,KAAK,aAAa,KAAK,CAAC,CAAA,IAAK,CAAC,EAAE,oBAAoB,IAAI,CAAC,MAAM,IAAI;QAC3F,qBAAO,6LAAC;YAAE,WAAU;sBAAwC;;;;;;IAChE;IAEA,qBACA,6LAAC,oIAAA,CAAA,QAAK;;0BACF,6LAAC,oIAAA,CAAA,cAAW;0BACR,cAAA,6LAAC,oIAAA,CAAA,WAAQ;;sCACL,6LAAC,oIAAA,CAAA,YAAS;4BAAC,WAAU;sCAAW;;;;;;sCAChC,6LAAC,oIAAA,CAAA,YAAS;sCAAC;;;;;;sCACX,6LAAC,oIAAA,CAAA,YAAS;4BAAC,WAAU;sCAAc;;;;;;sCACnC,6LAAC,oIAAA,CAAA,YAAS;4BAAC,WAAU;sCAAc;;;;;;sCACnC,6LAAC,oIAAA,CAAA,YAAS;4BAAC,WAAU;sCAAa;;;;;;;;;;;;;;;;;0BAG1C,6LAAC,oIAAA,CAAA,YAAS;0BACL,aAAa,GAAG,CAAC,CAAC,qBACf,6LAAC,oIAAA,CAAA,WAAQ;;0CACL,6LAAC,oIAAA,CAAA,YAAS;gCAAC,WAAU;0CAAqB,KAAK,IAAI;;;;;;0CACnD,6LAAC,oIAAA,CAAA,YAAS;0CACN,cAAA,6LAAC;oCAAI,WAAU;;sDACX,6LAAC,qIAAA,CAAA,SAAM;4CAAC,WAAU;;8DACd,6LAAC,qIAAA,CAAA,cAAW;oDAAC,KAAK,KAAK,MAAM;oDAAE,KAAK,KAAK,IAAI;oDAAE,gBAAa;;;;;;8DAC5D,6LAAC,qIAAA,CAAA,iBAAc;8DAAE,KAAK,IAAI,CAAC,MAAM,CAAC;;;;;;;;;;;;sDAEtC,6LAAC;4CAAI,WAAU;sDAAe,KAAK,IAAI;;;;;;;;;;;;;;;;;0CAG/C,6LAAC,oIAAA,CAAA,YAAS;gCAAC,WAAU;0CAAe,KAAK,oBAAoB,IAAI;;;;;;0CACjE,6LAAC,oIAAA,CAAA,YAAS;gCAAC,WAAU;0CAAe,KAAK,eAAe,IAAI;;;;;;0CAC5D,6LAAC,oIAAA,CAAA,YAAS;gCAAC,WAAU;0CAAc,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,CAAC,CAAC,CAAC,GAAG;;;;;;;uBAbtD,KAAK,EAAE;;;;;;;;;;;;;;;;AAkBrC;KAlEK;AA0EC,SAAS,cAAc,EAAE,WAAW,EAAE,IAAI,EAAsB;;IACrE,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,+HAAA,CAAA,WAAQ,AAAD;IACzB,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAc,AAAD,EAAW,EAAE;IACtD,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAc,AAAD,EAAU,EAAE;IACzD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAc,AAAD,EAAE;IACjD,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAc,AAAD,EAAyB;QAC5D,MAAM,CAAA,GAAA,0IAAA,CAAA,UAAO,AAAD,EAAE,IAAI,QAAQ,CAAC;QAC3B,IAAI,IAAI;IACV;IACA,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAc,AAAD,EAAE;IACrD,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAc,AAAD,EAAE;IAE7D,CAAA,GAAA,6JAAA,CAAA,YAAe,AAAD;mCAAE;YACd,eAAe;gBACX,IAAG,MAAM,WAAW;oBAChB,aAAa;oBACb,MAAM,CAAC,eAAe,aAAa,GAAG,MAAM,QAAQ,GAAG,CAAC;wBACpD,CAAA,GAAA,qJAAA,CAAA,qBAAkB,AAAD,EAAE,KAAK,SAAS;wBACjC,CAAA,GAAA,qJAAA,CAAA,oBAAiB,AAAD,EAAE,KAAK,SAAS;qBACnC;oBACD,UAAU;oBACV,YAAY;oBACZ,aAAa;gBACjB;YACJ;YACA;QACF;kCAAG;QAAC;KAAK;IAET,MAAM,gBAAgB,CAAA,GAAA,6JAAA,CAAA,UAAa,AAAD;gDAAE;YAClC,IAAI,CAAC,MAAM,QAAQ,CAAC,MAAM,IAAI;gBAC1B,OAAO;YACX;YACA,MAAM,OAAO,CAAA,GAAA,6IAAA,CAAA,aAAU,AAAD,EAAE,KAAK,IAAI;YACjC,MAAM,KAAK,CAAA,GAAA,2IAAA,CAAA,WAAQ,AAAD,EAAE,KAAK,EAAE;YAE3B,OAAO,SAAS,MAAM;wDAAC,CAAA;oBACnB,+FAA+F;oBAC/F,MAAM,wBAAwB,KAAK,QAAQ,CAAC,MAAM,GAAG,IAC/C,IAAI,KAAK,KAAK,QAAQ,CAAC,KAAK,QAAQ,CAAC,MAAM,GAAG,EAAE,CAAC,SAAS,IAC1D,IAAI,KAAK,KAAK,SAAS,GAAG,iFAAiF;oBAEjH,8DAA8D;oBAC9D,MAAM,WAAW,IAAI,KAAK,KAAK,QAAQ,CAAC,MAAM,GAAG,IAAI,KAAK,QAAQ,CAAC,KAAK,QAAQ,CAAC,MAAM,GAAG,EAAE,CAAC,SAAS,GAAG,IAAI;oBAE7G,OAAO,CAAA,GAAA,mJAAA,CAAA,mBAAgB,AAAD,EAAE,UAAU;wBAAE,OAAO;wBAAM,KAAK;oBAAG;gBAC7D;;QACF;+CAAG;QAAC;QAAU;KAAK;IAGnB,MAAM,uBAAuB,CAAA,GAAA,6JAAA,CAAA,UAAa,AAAD;uDAAE;YACzC,OAAO,OAAO,GAAG;+DAAC,CAAA,QAAS,CAAC;wBAC1B,MAAM,MAAM,IAAI;wBAChB,eAAe,cAAc,MAAM;2EAAC,CAAA,IAAK,EAAE,QAAQ,CAAC,IAAI;mFAAC,CAAA,IAAK,EAAE,QAAQ,EAAE,eAAe,MAAM,EAAE;;0EAAG,MAAM;wBAC1G,iBAAiB,MAAM,eAAe,IAAI;wBAC1C,MAAM,MAAM,IAAI,IAAI;oBACtB,CAAC;;QACH;sDAAG;QAAC;QAAQ;KAAc;IAE1B,MAAM,eAAe,CAAC;QACpB,MAAM,MAAM,IAAI,sJAAA,CAAA,UAAK;QACrB,MAAM,YAAY,qBAAqB,GAAG,CAAC,CAAA,IAAK;gBAAC,EAAE,IAAI;gBAAE,EAAE,aAAa;gBAAE,EAAE,eAAe;gBAAE,EAAE,IAAI;aAAC;QAEpG,IAAI,SAAS,OAAO;YAClB,MAAM,aAAa,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,IAAI,IAAI,QAAQ,CAAC,QAAQ,CAAC,SAAS;YAClF,MAAM,YAAY,IAAI,QAAQ,CAAC,QAAQ,CAAC,KAAK,IAAI,IAAI,QAAQ,CAAC,QAAQ,CAAC,QAAQ;YAE/E,SAAS;YACT,IAAI,YAAY,CAAC,IAAI,IAAI,MAAM,gBAAgB;YAC/C,IAAI,IAAI,CAAC,GAAG,GAAG,WAAW,IAAI;YAC9B,IAAI,WAAW,CAAC;YAChB,IAAI,OAAO,CAAC,aAAa;YACzB,IAAI,YAAY,CAAC,KAAK,KAAK;YAC3B,IAAI,IAAI,CAAC,2BAA2B,IAAI;YAExC,cAAc;YACd,IAAI,WAAW,CAAC;YAChB,IAAI,OAAO,CAAC,aAAa;YACzB,IAAI,YAAY,CAAC;YACjB,MAAM,gBAAgB,MAAM,QAAQ,KAAK,EAAE,GAAG,GAAG,CAAA,GAAA,yJAAA,CAAA,SAAM,AAAD,EAAE,KAAK,IAAI,EAAE,aAAa,GAAG,EAAE,CAAA,GAAA,yJAAA,CAAA,SAAM,AAAD,EAAE,KAAK,EAAE,EAAE,cAAc,GAAG;YACtH,IAAI,IAAI,CAAC,CAAC,YAAY,EAAE,eAAe,EAAE,IAAI;YAE7C,OAAO;YACP,IAAI,WAAW,CAAC;YAChB,IAAI,OAAO;YACX,QAAQ,OAAO,CAAC,CAAC,KAAK;gBAClB,IAAI,OAAO,CAAC,aAAa;gBACzB,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,IAAI,IAAI;gBAC9B,IAAI,OAAO,CAAC,aAAa;gBACzB,IAAI,IAAI,CAAC,OAAO,IAAI,KAAK,KAAK,IAAI,IAAI;gBACtC,QAAQ;YACZ;YAEA,QAAQ;YACR,CAAA,GAAA,6KAAA,CAAA,UAAS,AAAD,EAAE,KAAK;gBACb,QAAQ,OAAO;gBACf,MAAM;oBAAC;wBAAC;wBAAS;wBAAiB;wBAAiB;qBAAO;iBAAC;gBAC3D,MAAM;gBACN,OAAO;gBACP,YAAY;oBACR,WAAW;wBAAC;wBAAI;wBAAI;qBAAI;oBACxB,WAAW;oBACX,WAAW;gBACf;gBACA,oBAAoB;oBAChB,WAAW;wBAAC;wBAAK;wBAAK;qBAAI;gBAC9B;gBACA,aAAa,CAAC;oBACV,SAAS;oBACT,MAAM,YAAY,IAAI,QAAQ,CAAC,KAAK,CAAC,MAAM;oBAC3C,IAAI,WAAW,CAAC;oBAChB,IAAI,YAAY,CAAC;oBACjB,IAAI,IAAI,CAAC,CAAC,KAAK,EAAE,KAAK,UAAU,CAAC,IAAI,EAAE,WAAW,EAAE,KAAK,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,aAAa;oBAC5F,IAAI,IAAI,CAAC,CAAC,qBAAqB,EAAE,CAAA,GAAA,yJAAA,CAAA,SAAM,AAAD,EAAE,IAAI,QAAQ,qBAAqB,EAAE,YAAY,KAAK,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,IAAI;wBAAE,OAAO;oBAAQ;gBACzJ;YACF;YACA,IAAI,IAAI,CAAC,CAAC,eAAe,EAAE,CAAA,GAAA,yJAAA,CAAA,SAAM,AAAD,EAAE,IAAI,QAAQ,cAAc,IAAI,CAAC;QACnE,OAAO,IAAI,SAAS,OAAO;YACvB,MAAM,MAAM,gJAAA,CAAA,UAAI,CAAC,OAAO,CAAC;gBACrB,QAAQ;oBAAC;oBAAS;oBAAyB;oBAAyB;iBAAa;gBACjF,MAAM;YACV;YACA,MAAM,OAAO,IAAI,KAAK;gBAAC;aAAI,EAAE;gBAAE,MAAM;YAA0B;YAC/D,MAAM,OAAO,SAAS,aAAa,CAAC;YACpC,IAAI,KAAK,QAAQ,KAAK,WAAW;gBAC7B,MAAM,MAAM,IAAI,eAAe,CAAC;gBAChC,KAAK,YAAY,CAAC,QAAQ;gBAC1B,KAAK,YAAY,CAAC,YAAY,CAAC,eAAe,EAAE,CAAA,GAAA,yJAAA,CAAA,SAAM,AAAD,EAAE,IAAI,QAAQ,cAAc,IAAI,CAAC;gBACtF,KAAK,KAAK,CAAC,UAAU,GAAG;gBACxB,SAAS,IAAI,CAAC,WAAW,CAAC;gBAC1B,KAAK,KAAK;gBACV,SAAS,IAAI,CAAC,WAAW,CAAC;YAC9B;QACJ;IACF;IAEA,MAAM,uBAAuB;QAC3B,IAAI,CAAC,eAAe,CAAC,YAAY,QAAQ,CAAC,MAAM;YAC5C,MAAM;gBACF,SAAS;gBACT,OAAO;gBACP,aAAa;YACjB;YACA;QACJ;QACA,MAAM,SAAS,MAAM,CAAA,GAAA,qJAAA,CAAA,0BAAuB,AAAD,EAAE,aAAa;QAC1D,IAAI,OAAO,OAAO,EAAE;YAChB,MAAM;gBACF,OAAO;gBACP,aAAa,CAAC,KAAK,EAAE,gBAAgB,kCAAkC,EAAE,YAAY,CAAC,CAAC;YAC3F;QACJ,OAAO;YACF,MAAM;gBACH,SAAS;gBACT,OAAO;gBACP,aAAa,OAAO,OAAO;YAC/B;QACJ;IACF;IAEA,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,UAAa,AAAD;0CAAE;YAC5B,IAAI,WAAW,OAAO,MAAM,GAAG,IAAI,CAAC,CAAC;YAErC,MAAM,qBAAqB,cAAc,MAAM;YAC/C,MAAM,mBAAmB,cAAc,MAAM;kDAAC,CAAA,IAAK,EAAE,eAAe;iDAAE,MAAM;YAC5E,MAAM,qBAAqB,qBAAqB;YAChD,MAAM,gBAAgB,qBAAqB,IAAI,AAAC,mBAAmB,qBAAsB,MAAM;YAC/F,MAAM,kBAAkB,qBAAqB,IAAI,AAAC,qBAAqB,qBAAsB,MAAM;YAEnG,IAAI,sBAAsB;YAC1B,IAAI,cAAc;YAElB,IAAI,qBAAqB,GAAG;gBACxB,IAAI,eAAe;gBACnB,IAAI,qBAAqB;gBACzB,OAAO,OAAO;sDAAC,CAAA;wBACX,IAAI,MAAM,eAAe,IAAI,MAAM,eAAe,KAAK,SAAS,MAAM,kBAAkB,IAAI,MAAM,kBAAkB,GAAG,GAAG;4BACtH,MAAM,WAAW,MAAM,eAAe,CAAC,KAAK,CAAC;4BAC7C,MAAM,WAAW,MAAM,eAAe,CAAC,KAAK,CAAC;4BAC7C,IAAI,UAAU;4BACd,IAAI,UAAU,WAAW,SAAS,QAAQ,CAAC,EAAE,IAAI;4BACjD,IAAI,UAAU,WAAW,SAAS,QAAQ,CAAC,EAAE;4BAC7C,gBAAgB;4BAChB;wBACJ;oBACJ;;gBACA,MAAM,aAAa,qBAAqB,IAAI,eAAe,qBAAqB;gBAChF,MAAM,aAAa,KAAK,KAAK,CAAC,aAAa;gBAC3C,MAAM,mBAAmB,KAAK,KAAK,CAAC,aAAa;gBACjD,sBAAsB,aAAa,IAAI,GAAG,WAAW,EAAE,EAAE,iBAAiB,CAAC,CAAC,GAAG;gBAE/E,IAAI,YAAY;gBAChB,IAAI,qBAAqB;gBACzB,OAAO,OAAO;sDAAC,CAAA;wBACX,IAAI,MAAM,IAAI,IAAI,MAAM,kBAAkB,IAAI,MAAM,kBAAkB,GAAG,GAAG;4BACxE,aAAa,MAAM,IAAI;4BACvB;wBACJ;oBACJ;;gBACA,MAAM,UAAU,qBAAqB,IAAI,YAAY,qBAAqB;gBAC1E,cAAc,UAAU,IAAI,GAAG,QAAQ,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG;YAC3D;YAEA,OAAO;gBACH;oBACI,OAAO;oBACP,OAAO,mBAAmB,QAAQ;oBAClC,MAAM,2NAAA,CAAA,gBAAa;gBACvB;gBACA;oBACI,OAAO;oBACP,OAAO,GAAG,cAAc,OAAO,CAAC,GAAG,IAAI,EAAE,gBAAgB,OAAO,CAAC,GAAG,CAAC,CAAC;oBACtE,MAAM,mMAAA,CAAA,MAAG;gBACb;gBACA;oBACI,OAAO;oBACP,OAAO;oBACP,MAAM,uMAAA,CAAA,QAAK;gBACf;gBACA;oBACI,OAAO;oBACP,OAAO;oBACP,MAAM,uMAAA,CAAA,QAAK;gBACf;gBACA;oBACI,OAAO;oBACP,OAAO,GAAG,OAAO,MAAM;0DAAC,CAAA,IAAK,EAAE,MAAM,KAAK;yDAAU,MAAM,CAAC,OAAO,CAAC;oBACnE,MAAM,mNAAA,CAAA,YAAS;gBACnB;aACH;QACH;yCAAG;QAAC;QAAe;QAAQ;KAAU;IAErC,MAAM,uBAAuB,CAAA,GAAA,6JAAA,CAAA,UAAa,AAAD;uDAAE;YACzC,IAAI,cAAc,MAAM,KAAK,GAAG,OAAO,EAAE;YACzC,MAAM,SAAS,cAAc,MAAM;sEAAC,CAAC,KAAK;oBACtC,GAAG,CAAC,KAAK,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,OAAO,CAAC,IAAI,CAAC,IAAI;oBAC/C,OAAO;gBACX;qEAAG,CAAC;YAEJ,OAAO,OAAO,OAAO,CAAC,QAAQ,GAAG;+DAAC,CAAC,CAAC,MAAM,MAAM,EAAE,QAAU,CAAC;wBACzD;wBACA;wBACA,MAAM,CAAC,gBAAgB,EAAE,QAAQ,EAAE,EAAE,CAAC;oBAC1C,CAAC;;QACH;sDAAG;QAAC;KAAc;IAElB,MAAM,yBAAyB,CAAA,GAAA,6JAAA,CAAA,UAAa,AAAD;yDAAE;YAC3C,IAAI,CAAC,MAAM,QAAQ,CAAC,MAAM,MAAM,cAAc,MAAM,KAAK,GAAG,OAAO,EAAE;YAErE,MAAM,OAAO,CAAA,GAAA,oJAAA,CAAA,oBAAiB,AAAD,EAAE;gBAAE,OAAO,KAAK,IAAI;gBAAE,KAAK,KAAK,EAAE;YAAC;YAChE,MAAM,YAAY,KAAK,GAAG;2EAAC,CAAA,MAAO,CAAC;wBAC/B,MAAM,CAAA,GAAA,yJAAA,CAAA,SAAM,AAAD,EAAE,KAAK;wBAClB,UAAU,CAAA,GAAA,yJAAA,CAAA,SAAM,AAAD,EAAE,KAAK;wBACtB,eAAe;oBACnB,CAAC;;YAED,MAAM,eAAe,IAAI,IAAI,UAAU,GAAG;iEAAC,CAAA,IAAK;wBAAC,EAAE,QAAQ;wBAAE;qBAAE;;YAE/D,KAAK,MAAM,QAAQ,cAAe;gBAC9B,6EAA6E;gBAC7E,MAAM,WAAW,IAAI,KAAK,KAAK,QAAQ,EAAE,CAAC,EAAE,EAAE,aAAa,IAAI;gBAC/D,MAAM,cAAc,CAAA,GAAA,yJAAA,CAAA,SAAM,AAAD,EAAE,UAAU;gBACrC,IAAI,aAAa,GAAG,CAAC,cAAc;oBAC/B,aAAa,GAAG,CAAC,aAAc,aAAa;gBAChD;YACJ;YAEA,OAAO,MAAM,IAAI,CAAC,aAAa,MAAM;QACzC;wDAAG;QAAC;QAAe;KAAK;IAEtB,MAAM,yBAAyB,CAAA,GAAA,6JAAA,CAAA,UAAa,AAAD;yDAAE;YAC3C,IAAI,CAAC,MAAM,QAAQ,CAAC,MAAM,MAAM,SAAS,MAAM,KAAK,GAAG;gBACnD,OAAO;oBAAE,KAAK;oBAAG,WAAW;gBAAE;YAClC;YACA,MAAM,OAAO,CAAA,GAAA,6IAAA,CAAA,aAAU,AAAD,EAAE,KAAK,IAAI;YAEjC,MAAM,qBAAqB,IAAI,IAAI,cAAc,GAAG;iEAAC,CAAA,IAAK,EAAE,IAAI,CAAC,EAAE;;YACnE,MAAM,eAAe,IAAI;YACzB,MAAM,qBAAqB,IAAI;YAE/B,KAAK,MAAM,QAAQ,SAAU;gBACzB,IAAI,CAAC,KAAK,IAAI,CAAC,GAAG,EAAE;gBAEpB,MAAM,sBAAsB,IAAI,KAAK,SAAS,KAAK,IAAI,CAAC,GAAG,CAAC,QAAQ,GAAG,SAAS,CAAC,GAAG,IAAI,MAAM;gBAE9F,IAAI,mBAAmB,GAAG,CAAC,KAAK,IAAI,CAAC,EAAE,GAAG;oBACtC,IAAI,uBAAuB,MAAM;wBAC7B,aAAa,GAAG,CAAC,KAAK,IAAI,CAAC,EAAE;oBACjC,OAAO;wBACH,mBAAmB,GAAG,CAAC,KAAK,IAAI,CAAC,EAAE;oBACvC;gBACJ;YACJ;YAEA,OAAO;gBAAE,KAAK,aAAa,IAAI;gBAAE,WAAW,mBAAmB,IAAI;YAAC;QACtE;wDAAG;QAAC;QAAe;QAAU;KAAK;IAGlC,IAAI,MAAM,SAAS,SAAS;QACxB,qBACI,6LAAC;YAAI,WAAU;;8BACZ,6LAAC;oBAAO,WAAU;8BACf,cAAA,6LAAC;wBAAI,WAAU;;0CACX,6LAAC,qIAAA,CAAA,SAAM;gCAAC,SAAQ;gCAAQ,MAAK;gCAAO,WAAU;gCAAY,SAAS;;kDAC/D,6LAAC,mNAAA,CAAA,YAAS;wCAAC,WAAU;;;;;;kDACrB,6LAAC;wCAAK,WAAU;kDAAU;;;;;;;;;;;;0CAE9B,6LAAC;gCAAG,WAAU;0CAAqB;;;;;;;;;;;;;;;;;8BAG3C,6LAAC;oBAAK,WAAU;8BACZ,cAAA,6LAAC,mIAAA,CAAA,OAAI;wBAAC,WAAU;kCACZ,cAAA,6LAAC,mIAAA,CAAA,aAAU;;8CACP,6LAAC,mIAAA,CAAA,YAAS;8CAAC;;;;;;8CACX,6LAAC,mIAAA,CAAA,kBAAe;8CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAQvC;IAEA,MAAM,kBAAkB,CAAC,EAAC,SAAS,EAAuB,iBACxD,6LAAC,sIAAA,CAAA,UAAO;;8BACN,6LAAC,sIAAA,CAAA,iBAAc;oBAAC,OAAO;8BACrB,cAAA,6LAAC,qIAAA,CAAA,SAAM;wBACL,IAAG;wBACH,SAAS;wBACT,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,uCACA,CAAC,QAAQ,yBACT;;0CAGF,6LAAC,6MAAA,CAAA,WAAY;gCAAC,WAAU;;;;;;4BACvB,MAAM,OACL,KAAK,EAAE,iBACL;;oCACG,CAAA,GAAA,yJAAA,CAAA,SAAM,AAAD,EAAE,KAAK,IAAI,EAAE;oCAAa;oCAAG;oCAClC,CAAA,GAAA,yJAAA,CAAA,SAAM,AAAD,EAAE,KAAK,EAAE,EAAE;;+CAGnB,CAAA,GAAA,yJAAA,CAAA,SAAM,AAAD,EAAE,KAAK,IAAI,EAAE,6BAGpB,6LAAC;0CAAK;;;;;;;;;;;;;;;;;8BAIZ,6LAAC,sIAAA,CAAA,iBAAc;oBAAC,WAAU;oBAAa,OAAM;8BAC3C,cAAA,6LAAC,uIAAA,CAAA,WAAQ;wBACP,YAAY;wBACZ,MAAK;wBACL,cAAc,MAAM;wBACpB,UAAU;wBACV,UAAU;wBACV,gBAAgB;;;;;;;;;;;;;;;;;IAMxB,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAO,WAAU;;kCAChB,6LAAC;wBAAI,WAAU;;0CACX,6LAAC,qIAAA,CAAA,SAAM;gCAAC,SAAQ;gCAAQ,MAAK;gCAAO,WAAU;gCAAY,SAAS;;kDAC/D,6LAAC,mNAAA,CAAA,YAAS;wCAAC,WAAU;;;;;;kDACrB,6LAAC;wCAAK,WAAU;kDAAU;;;;;;;;;;;;0CAE9B,6LAAC,iJAAA,CAAA,aAAU;gCAAC,WAAU;;;;;;0CACtB,6LAAC;gCAAG,WAAU;0CAAgC;;;;;;;;;;;;kCAElD,6LAAC;wBAAI,WAAU;;0CACX,6LAAC;gCAAgB,WAAU;;;;;;0CAC1B,6LAAC,sIAAA,CAAA,UAAO;;kDACP,6LAAC,sIAAA,CAAA,iBAAc;wCAAC,OAAO;kDACrB,cAAA,6LAAC,qIAAA,CAAA,SAAM;4CAAC,SAAQ;4CAAU,MAAK;4CAAO,WAAU;sDAAY,cAAA,6LAAC,6MAAA,CAAA,WAAY;gDAAC,WAAU;;;;;;;;;;;;;;;;kDAEtF,6LAAC,sIAAA,CAAA,iBAAc;wCAAC,WAAU;wCAAa,OAAM;kDAC3C,cAAA,6LAAC,uIAAA,CAAA,WAAQ;4CACP,YAAY;4CACZ,MAAK;4CACL,cAAc,MAAM;4CACpB,UAAU;4CACV,UAAU;4CACV,gBAAgB;;;;;;;;;;;;;;;;;0CAMtB,6LAAC,+IAAA,CAAA,eAAY;;kDACT,6LAAC,+IAAA,CAAA,sBAAmB;wCAAC,OAAO;kDACxB,cAAA,6LAAC,qIAAA,CAAA,SAAM;4CAAC,WAAU;;8DAAuB,6LAAC,6MAAA,CAAA,WAAQ;oDAAC,WAAU;;;;;;gDAAY;;;;;;;;;;;;kDAE7E,6LAAC,+IAAA,CAAA,sBAAmB;wCAAC,WAAU;wCAAO,OAAM;;0DACxC,6LAAC,+IAAA,CAAA,oBAAiB;0DAAC;;;;;;0DACnB,6LAAC,+IAAA,CAAA,wBAAqB;;;;;0DACtB,6LAAC,+IAAA,CAAA,mBAAgB;gDAAC,SAAS,IAAM,aAAa;;kEAAQ,6LAAC,qMAAA,CAAA,OAAI;wDAAC,WAAU;;;;;;oDAAiB;;;;;;;0DACvF,6LAAC,+IAAA,CAAA,mBAAgB;gDAAC,SAAS,IAAM,aAAa;;kEAAQ,6LAAC,6MAAA,CAAA,WAAQ;wDAAC,WAAU;;;;;;oDAAiB;;;;;;;0DAC3F,6LAAC,+IAAA,CAAA,wBAAqB;;;;;0DACtB,6LAAC,+IAAA,CAAA,oBAAiB;0DACd,cAAA,6LAAC;oDAAI,WAAU;;sEACX,6LAAC,oIAAA,CAAA,QAAK;4DAAC,SAAQ;4DAAe,WAAU;sEAAwB;;;;;;sEAChE,6LAAC;4DAAI,WAAU;sEACX,cAAA,6LAAC,oIAAA,CAAA,QAAK;gEAAC,IAAG;gEAAe,MAAK;gEAAQ,aAAY;gEAAiB,WAAU;gEAAa,OAAO;gEAAa,UAAU,CAAC,IAAM,eAAe,EAAE,MAAM,CAAC,KAAK;;;;;;;;;;;sEAEhK,6LAAC;4DAAI,WAAU;;8EACX,6LAAC,qIAAA,CAAA,SAAM;oEAAC,cAAc;oEAAiB,eAAe;;sFAClD,6LAAC,qIAAA,CAAA,gBAAa;4EAAC,WAAU;sFACrB,cAAA,6LAAC,qIAAA,CAAA,cAAW;;;;;;;;;;sFAEhB,6LAAC,qIAAA,CAAA,gBAAa;;8FACV,6LAAC,qIAAA,CAAA,aAAU;oFAAC,OAAM;8FAAQ;;;;;;8FAC1B,6LAAC,qIAAA,CAAA,aAAU;oFAAC,OAAM;8FAAS;;;;;;8FAC3B,6LAAC,qIAAA,CAAA,aAAU;oFAAC,OAAM;8FAAU;;;;;;;;;;;;;;;;;;8EAGpC,6LAAC,qIAAA,CAAA,SAAM;oEAAC,MAAK;oEAAK,SAAS;8EAAsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0CAOrE,6LAAC,+IAAA,CAAA,eAAY;;kDACT,6LAAC,+IAAA,CAAA,sBAAmB;wCAAC,OAAO;kDACxB,cAAA,6LAAC,qIAAA,CAAA,SAAM;4CAAC,MAAK;4CAAO,WAAU;sDAAY,cAAA,6LAAC,6MAAA,CAAA,WAAQ;gDAAC,WAAU;;;;;;;;;;;;;;;;kDAEjE,6LAAC,+IAAA,CAAA,sBAAmB;wCAAC,WAAU;wCAAO,OAAM;;0DACzC,6LAAC,+IAAA,CAAA,oBAAiB;0DAAC;;;;;;0DACnB,6LAAC,+IAAA,CAAA,wBAAqB;;;;;0DACtB,6LAAC,+IAAA,CAAA,mBAAgB;gDAAC,SAAS,IAAM,aAAa;;kEAAQ,6LAAC,qMAAA,CAAA,OAAI;wDAAC,WAAU;;;;;;oDAAiB;;;;;;;0DACvF,6LAAC,+IAAA,CAAA,mBAAgB;gDAAC,SAAS,IAAM,aAAa;;kEAAQ,6LAAC,6MAAA,CAAA,WAAQ;wDAAC,WAAU;;;;;;oDAAiB;;;;;;;0DAC3F,6LAAC,+IAAA,CAAA,wBAAqB;;;;;0DACtB,6LAAC,+IAAA,CAAA,oBAAiB;0DACd,cAAA,6LAAC;oDAAI,WAAU;;sEACX,6LAAC,oIAAA,CAAA,QAAK;4DAAC,SAAQ;4DAAsB,WAAU;sEAAwB;;;;;;sEACvE,6LAAC;4DAAI,WAAU;sEACX,cAAA,6LAAC,oIAAA,CAAA,QAAK;gEAAC,IAAG;gEAAsB,MAAK;gEAAQ,aAAY;gEAAiB,WAAU;gEAAa,OAAO;gEAAa,UAAU,CAAC,IAAM,eAAe,EAAE,MAAM,CAAC,KAAK;;;;;;;;;;;sEAEtK,6LAAC;4DAAI,WAAU;;8EACZ,6LAAC,qIAAA,CAAA,SAAM;oEAAC,cAAc;oEAAiB,eAAe;;sFAClD,6LAAC,qIAAA,CAAA,gBAAa;4EAAC,WAAU;sFACrB,cAAA,6LAAC,qIAAA,CAAA,cAAW;;;;;;;;;;sFAEhB,6LAAC,qIAAA,CAAA,gBAAa;;8FACV,6LAAC,qIAAA,CAAA,aAAU;oFAAC,OAAM;8FAAQ;;;;;;8FAC1B,6LAAC,qIAAA,CAAA,aAAU;oFAAC,OAAM;8FAAS;;;;;;8FAC3B,6LAAC,qIAAA,CAAA,aAAU;oFAAC,OAAM;8FAAU;;;;;;;;;;;;;;;;;;8EAGpC,6LAAC,qIAAA,CAAA,SAAM;oEAAC,MAAK;oEAAK,SAAS;8EAAsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAQ3E,6LAAC;gBAAK,WAAU;;kCAGd,6LAAC;wBAAI,WAAU;;0CACX,6LAAC;gCAAG,WAAU;0CAAqB;;;;;;0CACnC,6LAAC;gCAAI,WAAU;0CACV,YACG,MAAM,IAAI,CAAC;oCAAE,QAAQ;gCAAE,GAAG,GAAG,CAAC,CAAC,GAAG,kBAC9B,6LAAC,mIAAA,CAAA,OAAI;;0DACD,6LAAC,mIAAA,CAAA,aAAU;gDAAC,WAAU;0DAAO,cAAA,6LAAC,uIAAA,CAAA,WAAQ;oDAAC,WAAU;;;;;;;;;;;0DACjD,6LAAC,mIAAA,CAAA,cAAW;;kEAAC,6LAAC,uIAAA,CAAA,WAAQ;wDAAC,WAAU;;;;;;kEAAmB,6LAAC,uIAAA,CAAA,WAAQ;wDAAC,WAAU;;;;;;;;;;;;;uCAFjE;;;;gDAKf,QAAQ,GAAG,CAAC,CAAC,oBACb,6LAAC,mIAAA,CAAA,OAAI;;0DACD,6LAAC,mIAAA,CAAA,aAAU;gDAAC,WAAU;;kEACtB,6LAAC,mIAAA,CAAA,YAAS;wDAAC,WAAU;kEAAuB,IAAI,KAAK;;;;;;oDACpD,IAAI,IAAI,kBAAI,6LAAC,IAAI,IAAI;wDAAC,WAAU;;;;;;;;;;;;0DAEjC,6LAAC,mIAAA,CAAA,cAAW;0DACZ,cAAA,6LAAC;oDAAI,WAAU;8DAAsB,IAAI,KAAK;;;;;;;;;;;;uCANvC,IAAI,KAAK;;;;;;;;;;;;;;;;kCAchC,6LAAC;wBAAI,WAAU;;0CAEX,6LAAC;gCAAI,WAAU;;kDAEX,6LAAC;;0DACG,6LAAC;gDAAG,WAAU;0DAA0B;;;;;;0DACxC,6LAAC,mIAAA,CAAA,OAAI;;kEACD,6LAAC,mIAAA,CAAA,aAAU;;0EACP,6LAAC,mIAAA,CAAA,YAAS;0EAAC;;;;;;0EACX,6LAAC,mIAAA,CAAA,kBAAe;0EAAC;;;;;;;;;;;;kEAErB,6LAAC,mIAAA,CAAA,cAAW;kEACR,cAAA,6LAAC,oIAAA,CAAA,iBAAc;4DAAC,QAAQ,CAAC;4DAAG,WAAU;sEACjC,aAAa,CAAC,0BAA0B,uBAAuB,MAAM,KAAK,kBACvE,6LAAC;gEAAI,WAAU;0EAAgE;;;;;qFAE/E,6LAAC,wJAAA,CAAA,YAAS;gEAAC,MAAM;gEAAwB,QAAQ;oEAAE,KAAK;oEAAG,OAAO;oEAAI,MAAM,CAAC;oEAAI,QAAQ;gEAAE;;kFACvF,6LAAC,wJAAA,CAAA,QAAK;wEAAC,SAAQ;wEAAO,UAAU;wEAAO,UAAU;;;;;;kFACjD,6LAAC,wJAAA,CAAA,QAAK;wEAAC,UAAU;wEAAO,UAAU;;;;;;kFAClC,6LAAC,0JAAA,CAAA,UAAO;wEAAC,uBAAS,6LAAC,oIAAA,CAAA,sBAAmB;;;;;;;;;;kFACtC,6LAAC,uJAAA,CAAA,OAAI;wEAAC,MAAK;wEAAW,SAAQ;wEAAgB,QAAO;wEAAsB,aAAa;wEAAG,KAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDASxH,6LAAC;;0DACG,6LAAC;gDAAG,WAAU;0DAA0B;;;;;;0DACxC,6LAAC,mIAAA,CAAA,OAAI;;kEACD,6LAAC,mIAAA,CAAA,aAAU;;0EACP,6LAAC,mIAAA,CAAA,YAAS;0EAAC;;;;;;0EACX,6LAAC,mIAAA,CAAA,kBAAe;0EAAC;;;;;;;;;;;;kEAErB,6LAAC,mIAAA,CAAA,cAAW;kEACN,0BACE,6LAAC;4DAAI,WAAU;sEACd,MAAM,IAAI,CAAC;gEAAE,QAAQ;4DAAE,GAAG,GAAG,CAAC,CAAC,GAAG,kBAAM,6LAAC,uIAAA,CAAA,WAAQ;oEAAS,WAAU;mEAAb;;;;;;;;;iFAGxD,6LAAC;4DAAsB,QAAQ;4DAAQ,OAAO;;;;;;;;;;;;;;;;;;;;;;;kDAO9D,6LAAC;;0DACG,6LAAC;gDAAG,WAAU;0DAA0B;;;;;;0DACvC,6LAAC,mIAAA,CAAA,OAAI;;kEACF,6LAAC,mIAAA,CAAA,aAAU;wDAAC,WAAU;kEAClB,cAAA,6LAAC;;8EACG,6LAAC,mIAAA,CAAA,YAAS;8EAAC;;;;;;8EACX,6LAAC,mIAAA,CAAA,kBAAe;8EAAC;;;;;;;;;;;;;;;;;kEAGzB,6LAAC,mIAAA,CAAA,cAAW;kEACR,cAAA,6LAAC;4DAAE,WAAU;sEAAwC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0CAOrE,6LAAC;gCAAI,WAAU;;kDAGX,6LAAC;;0DACG,6LAAC;gDAAG,WAAU;0DAA0B;;;;;;0DACxC,6LAAC,mIAAA,CAAA,OAAI;0DACD,cAAA,6LAAC,mIAAA,CAAA,cAAW;oDAAC,WAAU;8DACnB,cAAA,6LAAC;wDAAE,WAAU;kEAAwC;;;;;;;;;;;;;;;;;;;;;;kDAMjE,6LAAC;;0DACG,6LAAC;gDAAG,WAAU;0DAA0B;;;;;;0DACxC,6LAAC,mIAAA,CAAA,OAAI;;kEACD,6LAAC,mIAAA,CAAA,aAAU;kEACP,cAAA,6LAAC,mIAAA,CAAA,YAAS;sEAAC;;;;;;;;;;;kEAEf,6LAAC,mIAAA,CAAA,cAAW;kEACN,aAAa,qBAAqB,MAAM,KAAK,kBAC3C,6LAAC;4DAAI,WAAU;sEAAmE;;;;;iFAEnF,6LAAC,oIAAA,CAAA,iBAAc;4DAAC,QAAQ;4DAAwB,WAAU;sEACrD,cAAA,6LAAC,uJAAA,CAAA,WAAQ;gEAAC,MAAM;gEAAsB,QAAO;gEAAW,QAAQ;oEAAE,MAAM;oEAAI,OAAO;gEAAG;;kFAClF,6LAAC,wJAAA,CAAA,QAAK;wEAAC,MAAK;wEAAS,IAAI;;;;;;kFACzB,6LAAC,wJAAA,CAAA,QAAK;wEACF,SAAQ;wEACR,MAAK;wEACL,UAAU;wEACV,UAAU;wEACV,YAAY;wEACZ,eAAe,CAAC,QAAU,sBAAsB,CAAC,MAA6C,EAAE;;;;;;kFAEpG,6LAAC,0JAAA,CAAA,UAAO;wEAAC,QAAQ;wEAAO,uBAAS,6LAAC,oIAAA,CAAA,sBAAmB;;;;;;;;;;kFACrD,6LAAC,sJAAA,CAAA,MAAG;wEAAC,SAAQ;wEAAQ,QAAQ;kFACvB,qBAAqB,GAAG,CAAC,CAAC,sBACxB,6LAAC,uJAAA,CAAA,OAAI;gFAA4B,MAAM,MAAM,IAAI;+EAAtC,CAAC,KAAK,EAAE,MAAM,IAAI,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDAW/D,6LAAC;;0DACG,6LAAC;gDAAG,WAAU;0DAA0B;;;;;;0DACxC,6LAAC,mIAAA,CAAA,OAAI;;kEACD,6LAAC,mIAAA,CAAA,aAAU;kEACP,cAAA,6LAAC,mIAAA,CAAA,YAAS;sEAAC;;;;;;;;;;;kEAEf,6LAAC,mIAAA,CAAA,cAAW;wDAAC,WAAU;kEACjB,cAAc,MAAM,KAAK,kBACvB,6LAAC;4DAAI,WAAU;sEAAwC;;;;;iFAEvD;;8EACI,6LAAC;oEAAI,WAAU;;sFACX,6LAAC;4EAAE,WAAU;sFAAsB,uBAAuB,GAAG;;;;;;sFAC7D,6LAAC;4EAAE,WAAU;sFAAgC;;;;;;;;;;;;8EAEjD,6LAAC;oEAAI,WAAU;;sFACX,6LAAC;4EAAE,WAAU;sFAAsB,uBAAuB,SAAS;;;;;;sFACnE,6LAAC;4EAAE,WAAU;sFAAgC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAarF;GA1nBgB;;QACI,+HAAA,CAAA,WAAQ;;;MADZ","debugId":null}}]
}