(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/src/app/data:8ff414 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"7efa29b2bf7fa82364aadbf5011c649e7f21f09fbf":"createAgent"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "createAgent": (()=>createAgent)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var createAgent = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("7efa29b2bf7fa82364aadbf5011c649e7f21f09fbf", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "createAgent"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:050669 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40d5d08abcb55310482395efa2b68b3d883c709e39":"getChatsByCompany"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getChatsByCompany": (()=>getChatsByCompany)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var getChatsByCompany = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("40d5d08abcb55310482395efa2b68b3d883c709e39", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getChatsByCompany"); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4vYWN0aW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbid1c2Ugc2VydmVyJztcblxuaW1wb3J0IHsgZ2V0RGIgfSBmcm9tIFwiQC9saWIvZGJcIjtcbmltcG9ydCB7IGhhc2hQYXNzd29yZCwgdmVyaWZ5UGFzc3dvcmQgfSBmcm9tIFwiQC9saWIvYXV0aFwiO1xuaW1wb3J0IHR5cGUgeyBBZ2VudCwgQWdlbnRSb2xlLCBBbm5vdW5jZW1lbnQsIENvbXBhbnksIENvbW1lbnQsIEFjdGl2aXR5TG9nLCBVc2VyLCBOb3RlLCBDaGF0LCBNZXNzYWdlLCBDaGFubmVsLCBDYW1wYWlnbiB9IGZyb20gXCJAL3R5cGVzXCI7XG5pbXBvcnQgeyBDb2xsZWN0aW9uLCBEYiwgT2JqZWN0SWQgfSBmcm9tIFwibW9uZ29kYlwiO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRBZ2VudHNDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxBZ2VudD4+IHtcbiAgICBjb25zdCBkYjogRGIgPSBhd2FpdCBnZXREYigpO1xuICAgIHJldHVybiBkYi5jb2xsZWN0aW9uPEFnZW50PignYWdlbnRzJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENvbXBhbmllc0NvbGxlY3Rpb24oKTogUHJvbWlzZTxDb2xsZWN0aW9uPENvbXBhbnk+PiB7XG4gICAgY29uc3QgZGI6IERiID0gYXdhaXQgZ2V0RGIoKTtcbiAgICByZXR1cm4gZGIuY29sbGVjdGlvbjxDb21wYW55PignY29tcGFuaWVzJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEFubm91bmNlbWVudHNDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxBbm5vdW5jZW1lbnQ+PiB7XG4gICAgY29uc3QgZGI6IERiID0gYXdhaXQgZ2V0RGIoKTtcbiAgICByZXR1cm4gZGIuY29sbGVjdGlvbjxBbm5vdW5jZW1lbnQ+KCdhbm5vdW5jZW1lbnRzJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEFjdGl2aXR5TG9nc0NvbGxlY3Rpb24oKTogUHJvbWlzZTxDb2xsZWN0aW9uPEFjdGl2aXR5TG9nPj4ge1xuICAgIGNvbnN0IGRiOiBEYiA9IGF3YWl0IGdldERiKCk7XG4gICAgcmV0dXJuIGRiLmNvbGxlY3Rpb248QWN0aXZpdHlMb2c+KCdhY3Rpdml0eV9sb2dzJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENvbnRhY3RzQ29sbGVjdGlvbigpOiBQcm9taXNlPENvbGxlY3Rpb248VXNlcj4+IHtcbiAgICBjb25zdCBkYjogRGIgPSBhd2FpdCBnZXREYigpO1xuICAgIHJldHVybiBkYi5jb2xsZWN0aW9uPFVzZXI+KCdjb250YWN0cycpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRDaGF0c0NvbGxlY3Rpb24oKTogUHJvbWlzZTxDb2xsZWN0aW9uPENoYXQ+PiB7XG4gICAgY29uc3QgZGI6IERiID0gYXdhaXQgZ2V0RGIoKTtcbiAgICByZXR1cm4gZGIuY29sbGVjdGlvbjxDaGF0PignY2hhdHMnKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0TWVzc2FnZXNDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxNZXNzYWdlPj4ge1xuICAgIGNvbnN0IGRiOiBEYiA9IGF3YWl0IGdldERiKCk7XG4gICAgcmV0dXJuIGRiLmNvbGxlY3Rpb248TWVzc2FnZT4oJ21lc3NhZ2VzJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENhbXBhaWduc0NvbGxlY3Rpb24oKTogUHJvbWlzZTxDb2xsZWN0aW9uPENhbXBhaWduPj4ge1xuICAgIGNvbnN0IGRiOiBEYiA9IGF3YWl0IGdldERiKCk7XG4gICAgcmV0dXJuIGRiLmNvbGxlY3Rpb248Q2FtcGFpZ24+KCdjYW1wYWlnbnMnKTtcbn1cblxuXG5hc3luYyBmdW5jdGlvbiBsb2dBY3Rpdml0eShjb21wYW55SWQ6IHN0cmluZyB8IE9iamVjdElkLCBhZ2VudE5hbWU6IHN0cmluZywgYWN0aW9uOiBzdHJpbmcsIGRldGFpbHM6IHN0cmluZykge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGxvZ3NDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWN0aXZpdHlMb2dzQ29sbGVjdGlvbigpO1xuICAgICAgICBhd2FpdCBsb2dzQ29sbGVjdGlvbi5pbnNlcnRPbmUoe1xuICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSxcbiAgICAgICAgICAgIGFnZW50TmFtZSxcbiAgICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICAgIGRldGFpbHMsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gbG9nIGFjdGl2aXR5OlwiLCBlcnJvcik7XG4gICAgfVxufVxuXG4vLyBBIHNpbXBsZSBoYXNoaW5nIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIHBzZXVkby1yYW5kb20gYnV0IGNvbnNpc3RlbnQgbnVtYmVyIGZyb20gYSBzdHJpbmcuXG5jb25zdCBzaW1wbGVIYXNoID0gKHN0cjogc3RyaW5nKSA9PiB7XG4gIGxldCBoYXNoID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjaGFyID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgaGFzaCA9IChoYXNoIDw8IDUpIC0gaGFzaCArIGNoYXI7XG4gICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgfVxuICByZXR1cm4gTWF0aC5hYnMoaGFzaCk7XG59O1xuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBZ2VudHNCeUNvbXBhbnkoY29tcGFueUlkOiBzdHJpbmcpOiBQcm9taXNlPEFnZW50W10+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIWNvbXBhbnlJZCB8fCAhT2JqZWN0SWQuaXNWYWxpZChjb21wYW55SWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZXNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0TWVzc2FnZXNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGFnZW50cyA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZCh7IGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkgfSwgeyBwcm9qZWN0aW9uOiB7IHBhc3N3b3JkOiAwIH0gfSkudG9BcnJheSgpO1xuXG4gICAgICAgIGNvbnN0IGFnZW50RGF0YVdpdGhTdGF0cyA9IGF3YWl0IFByb21pc2UuYWxsKGFnZW50cy5tYXAoYXN5bmMgKGFnZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICB0b2RheS5zZXRIb3VycygwLCAwLCAwLCAwKTtcblxuICAgICAgICAgICAgY29uc3QgY29udmVyc2F0aW9uc1RvZGF5ID0gYXdhaXQgbWVzc2FnZXNDb2xsZWN0aW9uLmNvdW50RG9jdW1lbnRzKHtcbiAgICAgICAgICAgICAgICBzZW5kZXJJZDogYWdlbnQuX2lkLFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogeyAkZ3RlOiB0b2RheS50b0lTT1N0cmluZygpIH0gXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3Qgc3RhdHVzZXM6IEFycmF5PCdPbmxpbmUnIHwgJ09mZmxpbmUnIHwgJ0J1c3knPiA9IFsnT25saW5lJywgJ09mZmxpbmUnLCAnQnVzeSddO1xuICAgICAgICAgICAgY29uc3QgaGFzaCA9IHNpbXBsZUhhc2goYWdlbnQubmFtZSk7XG4gICAgICAgICAgICBjb25zdCByYW5kb21TdGF0dXMgPSBzdGF0dXNlc1toYXNoICUgc3RhdHVzZXMubGVuZ3RoXTtcblxuICAgICAgICAgICAgbGV0IGF2Z1Jlc3BvbnNlVGltZSA9IFwiTi9BXCI7XG4gICAgICAgICAgICBsZXQgY3NhdDogbnVtYmVyIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICBpZiAoY29udmVyc2F0aW9uc1RvZGF5ID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF2Z1Jlc3BvbnNlTWludXRlcyA9IChoYXNoICUgNCkgKyAxOyAvLyAxIHRvIDQgbWludXRlc1xuICAgICAgICAgICAgICAgIGNvbnN0IGF2Z1Jlc3BvbnNlU2Vjb25kcyA9IGhhc2ggJSA2MDsgLy8gMCB0byA1OSBzZWNvbmRzXG4gICAgICAgICAgICAgICAgYXZnUmVzcG9uc2VUaW1lID0gYCR7YXZnUmVzcG9uc2VNaW51dGVzfW0gJHthdmdSZXNwb25zZVNlY29uZHN9c2A7XG4gICAgICAgICAgICAgICAgY3NhdCA9IDg1ICsgKGhhc2ggJSAxNSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uYWdlbnQsXG4gICAgICAgICAgICAgICAgX2lkOiBhZ2VudC5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBpZDogYWdlbnQuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBhZ2VudC5jb21wYW55SWQ/LnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY29udmVyc2F0aW9uc1RvZGF5LFxuICAgICAgICAgICAgICAgIHN0YXR1czogcmFuZG9tU3RhdHVzLFxuICAgICAgICAgICAgICAgIGF2Z1Jlc3BvbnNlVGltZSxcbiAgICAgICAgICAgICAgICBjc2F0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSkpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGFnZW50RGF0YVdpdGhTdGF0cztcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgYWdlbnRzIGJ5IGNvbXBhbnk6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUFubm91bmNlbWVudChkYXRhOiB7IHRpdGxlOiBzdHJpbmc7IGNvbnRlbnQ6IHN0cmluZzsgY2F0ZWdvcnk6IHN0cmluZzsgYXV0aG9ySWQ6IHN0cmluZzsgY29tcGFueUlkOiBzdHJpbmcgfSk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBtZXNzYWdlPzogc3RyaW5nOyBhbm5vdW5jZW1lbnQ/OiBBbm5vdW5jZW1lbnQgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QW5ub3VuY2VtZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcblxuICAgICAgICBjb25zdCBhdXRob3IgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBfaWQ6IG5ldyBPYmplY3RJZChkYXRhLmF1dGhvcklkKSB9KTtcbiAgICAgICAgaWYgKCFhdXRob3IpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkF1dGhvciBub3QgZm91bmQuXCIgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5ld0Fubm91bmNlbWVudDogT21pdDxBbm5vdW5jZW1lbnQsICdpZCcgfCAnX2lkJz4gPSB7XG4gICAgICAgICAgICB0aXRsZTogZGF0YS50aXRsZSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGRhdGEuY29udGVudCxcbiAgICAgICAgICAgIGNhdGVnb3J5OiBkYXRhLmNhdGVnb3J5IGFzIGFueSxcbiAgICAgICAgICAgIGF1dGhvcjoge1xuICAgICAgICAgICAgICAgIGlkOiBhdXRob3IuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgbmFtZTogYXV0aG9yLm5hbWUsXG4gICAgICAgICAgICAgICAgYXZhdGFyOiBhdXRob3IuYXZhdGFyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoZGF0YS5jb21wYW55SWQpLFxuICAgICAgICAgICAgZGF0ZTogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgcmVhZEJ5OiBbXSxcbiAgICAgICAgICAgIGNvbW1lbnRzOiBbXSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhbm5vdW5jZW1lbnRzQ29sbGVjdGlvbi5pbnNlcnRPbmUobmV3QW5ub3VuY2VtZW50IGFzIGFueSk7XG4gICAgICAgIGF3YWl0IGxvZ0FjdGl2aXR5KGRhdGEuY29tcGFueUlkLCBhdXRob3IubmFtZSwgJ0NyZWF0ZSBBbm5vdW5jZW1lbnQnLCBgUHVibGlzaGVkOiBcIiR7ZGF0YS50aXRsZX1cImApO1xuXG5cbiAgICAgICAgaWYgKHJlc3VsdC5pbnNlcnRlZElkKSB7XG4gICAgICAgICAgICBjb25zdCBjcmVhdGVkQW5ub3VuY2VtZW50OiBBbm5vdW5jZW1lbnQgPSB7XG4gICAgICAgICAgICAgICAgLi4uKG5ld0Fubm91bmNlbWVudCBhcyBPbWl0PEFubm91bmNlbWVudCwgJ19pZCcgfCAnaWQnPiksXG4gICAgICAgICAgICAgICAgX2lkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGRhdGEuY29tcGFueUlkKS50b1N0cmluZygpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGFubm91bmNlbWVudDogY3JlYXRlZEFubm91bmNlbWVudCB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIGNyZWF0ZSBhbm5vdW5jZW1lbnQuXCIgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQ3JlYXRlIGFubm91bmNlbWVudCBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkLlwiIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QW5ub3VuY2VtZW50c0J5Q29tcGFueShjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8QW5ub3VuY2VtZW50W10+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIWNvbXBhbnlJZCB8fCAhT2JqZWN0SWQuaXNWYWxpZChjb21wYW55SWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYW5ub3VuY2VtZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBbm5vdW5jZW1lbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBhbm5vdW5jZW1lbnRzID0gYXdhaXQgYW5ub3VuY2VtZW50c0NvbGxlY3Rpb24uZmluZCh7IGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkgfSkuc29ydCh7IGRhdGU6IC0xIH0pLnRvQXJyYXkoKTtcblxuICAgICAgICByZXR1cm4gYW5ub3VuY2VtZW50cy5tYXAoYW5ub3VuY2VtZW50ID0+ICh7XG4gICAgICAgICAgICAuLi5hbm5vdW5jZW1lbnQsXG4gICAgICAgICAgICBfaWQ6IGFubm91bmNlbWVudC5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGlkOiBhbm5vdW5jZW1lbnQuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBjb21wYW55SWQ6IGFubm91bmNlbWVudC5jb21wYW55SWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIHJlYWRCeTogYW5ub3VuY2VtZW50LnJlYWRCeSB8fCBbXSxcbiAgICAgICAgICAgIGNvbW1lbnRzOiAoYW5ub3VuY2VtZW50LmNvbW1lbnRzIHx8IFtdKS5tYXAoKGNvbW1lbnQ6IENvbW1lbnQpID0+ICh7XG4gICAgICAgICAgICAgICAgLi4uY29tbWVudCxcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKGNvbW1lbnQudGltZXN0YW1wKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgfSkpLFxuICAgICAgICB9KSk7XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgYW5ub3VuY2VtZW50cyBieSBjb21wYW55OlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYXJrQW5ub3VuY2VtZW50QXNSZWFkKGFubm91bmNlbWVudElkOiBzdHJpbmcsIGFnZW50SWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuIH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBhbm5vdW5jZW1lbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFubm91bmNlbWVudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGF3YWl0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICAgICAgICAgIHsgX2lkOiBuZXcgT2JqZWN0SWQoYW5ub3VuY2VtZW50SWQpIH0sXG4gICAgICAgICAgICB7ICRhZGRUb1NldDogeyByZWFkQnk6IGFnZW50SWQgfSB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiTWFyayBhcyByZWFkIGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWRkQ29tbWVudFRvQW5ub3VuY2VtZW50KGFubm91bmNlbWVudElkOiBzdHJpbmcsIGF1dGhvcklkOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuLCBjb21tZW50PzogQ29tbWVudCB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgYXV0aG9yID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5maW5kT25lKHsgX2lkOiBuZXcgT2JqZWN0SWQoYXV0aG9ySWQpIH0pO1xuICAgICAgICBpZiAoIWF1dGhvcikgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcblxuICAgICAgICBjb25zdCBuZXdDb21tZW50OiBDb21tZW50ID0ge1xuICAgICAgICAgICAgaWQ6IG5ldyBPYmplY3RJZCgpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBhdXRob3I6IHtcbiAgICAgICAgICAgICAgICBpZDogYXV0aG9yLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIG5hbWU6IGF1dGhvci5uYW1lLFxuICAgICAgICAgICAgICAgIGF2YXRhcjogYXV0aG9yLmF2YXRhclxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBhbm5vdW5jZW1lbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFubm91bmNlbWVudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGF3YWl0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICAgICAgICAgIHsgX2lkOiBuZXcgT2JqZWN0SWQoYW5ub3VuY2VtZW50SWQpIH0sXG4gICAgICAgICAgICB7ICRwdXNoOiB7IGNvbW1lbnRzOiBuZXdDb21tZW50IH0gfVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgY29tbWVudDogbmV3Q29tbWVudCB9O1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkFkZCBjb21tZW50IGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XG4gICAgfVxufVxuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVBZ2VudFByb2ZpbGUoYWdlbnRJZDogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIGVtYWlsOiBzdHJpbmcsIHBob25lOiBzdHJpbmcsIGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U/OiBzdHJpbmc7IGFnZW50PzogQWdlbnQ7IH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBhZ2VudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWdlbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgdXBkYXRlUmVzdWx0ID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi51cGRhdGVPbmUoXG4gICAgICAgICAgICB7IF9pZDogbmV3IE9iamVjdElkKGFnZW50SWQpIH0sXG4gICAgICAgICAgICB7ICRzZXQ6IHsgbmFtZSwgZW1haWwsIHBob25lIH0gfVxuICAgICAgICApO1xuXG4gICAgICAgIGlmICh1cGRhdGVSZXN1bHQubW9kaWZpZWRDb3VudCA9PT0gMCAmJiB1cGRhdGVSZXN1bHQubWF0Y2hlZENvdW50ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBZ2VudCBub3QgZm91bmQuXCIgfTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgYWdlbnRXaXRoU3RhdHMgPSBhd2FpdCBnZXRBZ2VudHNCeUNvbXBhbnkoY29tcGFueUlkKTtcbiAgICAgICAgY29uc3QgdXBkYXRlZEFnZW50ID0gYWdlbnRXaXRoU3RhdHMuZmluZChhID0+IGEuaWQgPT09IGFnZW50SWQpO1xuXG5cbiAgICAgICAgaWYgKHVwZGF0ZWRBZ2VudCkge1xuICAgICAgICAgICAgYXdhaXQgbG9nQWN0aXZpdHkoY29tcGFueUlkLCB1cGRhdGVkQWdlbnQubmFtZSwgJ1VwZGF0ZSBQcm9maWxlJywgYFVwZGF0ZWQgYWdlbnQgcHJvZmlsZSBmb3IgJHtuYW1lfWApO1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgYWdlbnQ6IHVwZGF0ZWRBZ2VudCB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIHJldHJpZXZlIHVwZGF0ZWQgYWdlbnQuXCIgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVXBkYXRlIGFnZW50IHByb2ZpbGUgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZC5cIiB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUFnZW50UGFzc3dvcmQoYWdlbnRJZDogc3RyaW5nLCBjdXJyZW50UGFzc3dvcmQ6IHN0cmluZywgbmV3UGFzc3dvcmQ6IHN0cmluZywgY29tcGFueUlkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZTogc3RyaW5nIH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBhZ2VudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWdlbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBhZ2VudCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IF9pZDogbmV3IE9iamVjdElkKGFnZW50SWQpIH0pO1xuXG4gICAgICAgIGlmICghYWdlbnQgfHwgIWFnZW50LnBhc3N3b3JkKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBZ2VudCBub3QgZm91bmQuXCIgfTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgaXNQYXNzd29yZFZhbGlkID0gYXdhaXQgdmVyaWZ5UGFzc3dvcmQoY3VycmVudFBhc3N3b3JkLCBhZ2VudC5wYXNzd29yZCk7XG4gICAgICAgIGlmICghaXNQYXNzd29yZFZhbGlkKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJJbmNvcnJlY3QgY3VycmVudCBwYXNzd29yZC5cIiB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbmV3SGFzaGVkUGFzc3dvcmQgPSBhd2FpdCBoYXNoUGFzc3dvcmQobmV3UGFzc3dvcmQpO1xuICAgICAgICBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICAgICAgICAgIHsgX2lkOiBuZXcgT2JqZWN0SWQoYWdlbnRJZCkgfSxcbiAgICAgICAgICAgIHsgJHNldDogeyBwYXNzd29yZDogbmV3SGFzaGVkUGFzc3dvcmQgfSB9XG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICBhd2FpdCBsb2dBY3Rpdml0eShjb21wYW55SWQsIGFnZW50Lm5hbWUsICdVcGRhdGUgUGFzc3dvcmQnLCBgQ2hhbmdlZCBwYXNzd29yZGApO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBtZXNzYWdlOiBcIlBhc3N3b3JkIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5LlwiIH07XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVXBkYXRlIHBhc3N3b3JkIGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQuXCIgfTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUxvZ2luKGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkX3VudXNlZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U/OiBzdHJpbmc7IGFnZW50PzogQWdlbnQgfT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBhZ2VudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWdlbnRzQ29sbGVjdGlvbigpO1xuICAgICAgY29uc3QgYWdlbnREb2MgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBlbWFpbDogZW1haWwudG9Mb3dlckNhc2UoKSB9KTtcblxuICAgICAgaWYgKGFnZW50RG9jICYmIGFnZW50RG9jLnBhc3N3b3JkKSB7XG4gICAgICAgIGNvbnN0IGlzUGFzc3dvcmRWYWxpZCA9IGF3YWl0IHZlcmlmeVBhc3N3b3JkKHBhc3N3b3JkX3VudXNlZCwgYWdlbnREb2MucGFzc3dvcmQpO1xuICAgICAgICBpZiAoaXNQYXNzd29yZFZhbGlkKSB7XG4gICAgICAgICAgY29uc3QgeyBwYXNzd29yZCwgLi4uYWdlbnREYXRhIH0gPSBhZ2VudERvYztcbiAgICAgICAgICBjb25zdCBhZ2VudDogQWdlbnQgPSB7XG4gICAgICAgICAgICAuLi5hZ2VudERhdGEsXG4gICAgICAgICAgICBfaWQ6IGFnZW50RG9jLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgaWQ6IGFnZW50RG9jLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgY29tcGFueUlkOiBhZ2VudERvYy5jb21wYW55SWQ/LnRvU3RyaW5nKCksXG4gICAgICAgICAgfTtcbiAgICAgICAgICBhd2FpdCBsb2dBY3Rpdml0eShhZ2VudC5jb21wYW55SWQsIGFnZW50Lm5hbWUsICdMb2dpbicsIGBMb2dnZWQgaW4gc3VjY2Vzc2Z1bGx5YCk7XG4gICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgYWdlbnQ6IGFnZW50IH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkludmFsaWQgZW1haWwgb3IgcGFzc3dvcmQuXCIgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkxvZ2luIGVycm9yOlwiLCBlcnJvcik7XG4gICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJEYXRhYmFzZSBjb25uZWN0aW9uIGVycm9yLlwiIH07XG4gICAgfVxufTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUFnZW50KG5hbWU6IHN0cmluZywgZW1haWw6IHN0cmluZywgcGFzc3dvcmRfdW51c2VkOiBzdHJpbmcsIHJvbGU6IEFnZW50Um9sZSwgY29tcGFueUlkOiBzdHJpbmcsIGNyZWF0ZWRCeTogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U/OiBzdHJpbmc7IGFnZW50PzogQWdlbnQ7IH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBhZ2VudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWdlbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBleGlzdGluZ0FnZW50ID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5maW5kT25lKHsgZW1haWw6IGVtYWlsLnRvTG93ZXJDYXNlKCkgfSk7XG5cbiAgICAgICAgaWYgKGV4aXN0aW5nQWdlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFuIGFnZW50IHdpdGggdGhpcyBlbWFpbCBhbHJlYWR5IGV4aXN0cy5cIiB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaGFzaGVkUGFzc3dvcmQgPSBhd2FpdCBoYXNoUGFzc3dvcmQocGFzc3dvcmRfdW51c2VkKTtcbiAgICAgICAgY29uc3QgYXZhdGFyID0gJyc7XG5cbiAgICAgICAgY29uc3QgYWdlbnRUb0luc2VydDogT21pdDxBZ2VudCwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBlbWFpbDogZW1haWwudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgIHBhc3N3b3JkOiBoYXNoZWRQYXNzd29yZCxcbiAgICAgICAgICAgIHJvbGUsXG4gICAgICAgICAgICBhdmF0YXIsXG4gICAgICAgICAgICBwaG9uZTogJycsIFxuICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uaW5zZXJ0T25lKGFnZW50VG9JbnNlcnQgYXMgYW55KTtcblxuICAgICAgICBpZiAocmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGFnZW50c1dpdGhTdGF0cyA9IGF3YWl0IGdldEFnZW50c0J5Q29tcGFueShjb21wYW55SWQpO1xuICAgICAgICAgICAgY29uc3QgbmV3QWdlbnQgPSBhZ2VudHNXaXRoU3RhdHMuZmluZChhID0+IGEuaWQgPT09IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCkpO1xuXG4gICAgICAgICAgICBpZiAobmV3QWdlbnQpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBsb2dBY3Rpdml0eShjb21wYW55SWQsIGNyZWF0ZWRCeSwgJ0NyZWF0ZSBBZ2VudCcsIGBDcmVhdGVkIGFnZW50OiAke25hbWV9YCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgYWdlbnQ6IG5ld0FnZW50IH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIGNyZWF0ZSBhZ2VudC5cIiB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDcmVhdGUgYWdlbnQgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZCB3aGlsZSBjcmVhdGluZyB0aGUgYWdlbnQuXCIgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWxldGVBZ2VudChhZ2VudElkOiBzdHJpbmcsIGNvbXBhbnlJZD86IHN0cmluZywgZGVsZXRlZEJ5Pzogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW4sIG1lc3NhZ2U/OiBzdHJpbmcgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFnZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBZ2VudHNDb2xsZWN0aW9uKCk7XG5cbiAgICAgICAgaWYgKCFhZ2VudElkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGFnZW50SWQpKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJJbnZhbGlkIGFnZW50IElELlwiIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBhZ2VudFRvRGVsZXRlID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5maW5kT25lKHsgX2lkOiBuZXcgT2JqZWN0SWQoYWdlbnRJZCkgfSk7XG4gICAgICAgIGlmICghYWdlbnRUb0RlbGV0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQWdlbnQgbm90IGZvdW5kLlwiIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQcmV2ZW50IGRlbGV0aW5nIHRoZSBsYXN0IGFkbWluXG4gICAgICAgIGlmIChhZ2VudFRvRGVsZXRlLnJvbGUgPT09ICdhZG1pbicpIHtcbiAgICAgICAgICAgIGNvbnN0IGFkbWluQ291bnQgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmNvdW50RG9jdW1lbnRzKHsgY29tcGFueUlkOiBhZ2VudFRvRGVsZXRlLmNvbXBhbnlJZCwgcm9sZTogJ2FkbWluJyB9KTtcbiAgICAgICAgICAgIGlmIChhZG1pbkNvdW50IDw9IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJDYW5ub3QgcmVtb3ZlIHRoZSBsYXN0IGFkbWluaXN0cmF0b3IuXCIgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5kZWxldGVPbmUoeyBfaWQ6IG5ldyBPYmplY3RJZChhZ2VudElkKSB9KTtcblxuICAgICAgICBpZiAocmVzdWx0LmRlbGV0ZWRDb3VudCA9PT0gMSkge1xuICAgICAgICAgICAgaWYgKGNvbXBhbnlJZCAmJiBkZWxldGVkQnkpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBsb2dBY3Rpdml0eShjb21wYW55SWQsIGRlbGV0ZWRCeSwgJ0RlbGV0ZSBBZ2VudCcsIGBSZW1vdmVkIGFnZW50OiAke2FnZW50VG9EZWxldGUubmFtZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkZhaWxlZCB0byByZW1vdmUgYWdlbnQuXCIgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRGVsZXRlIGFnZW50IGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQuXCIgfTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZVNpZ25VcChuYW1lOiBzdHJpbmcsIGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkX3VudXNlZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U/OiBzdHJpbmc7IGFnZW50PzogQWdlbnQ7IH0+IHtcbiAgICBjb25zdCBkYiA9IGF3YWl0IGdldERiKCk7XG4gICAgY29uc3Qgc2Vzc2lvbiA9IGRiLmNsaWVudC5zdGFydFNlc3Npb24oKTtcbiAgICB0cnkge1xuICAgICAgICBsZXQgbmV3QWdlbnRSZXN1bHQ6IEFnZW50IHwgdW5kZWZpbmVkO1xuICAgICAgICBhd2FpdCBzZXNzaW9uLndpdGhUcmFuc2FjdGlvbihhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb21wYW5pZXNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q29tcGFuaWVzQ29sbGVjdGlvbigpO1xuICAgICAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nQWdlbnQgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBlbWFpbDogZW1haWwudG9Mb3dlckNhc2UoKSB9LCB7IHNlc3Npb24gfSk7XG5cbiAgICAgICAgICAgIGlmIChleGlzdGluZ0FnZW50KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQW4gYWdlbnQgd2l0aCB0aGlzIGVtYWlsIGFscmVhZHkgZXhpc3RzLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgY29tcGFueVJlc3VsdCA9IGF3YWl0IGNvbXBhbmllc0NvbGxlY3Rpb24uaW5zZXJ0T25lKHtcbiAgICAgICAgICAgICAgICBuYW1lOiBgJHtuYW1lfSdzIENvbXBhbnlgLFxuICAgICAgICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgICAgICAgICAgICBib3RwcmVzc0JvdElkOiAncGxhY2Vob2xkZXJfYm90X2lkJywgLy8gQWRkIHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAgICAgYm90cHJlc3NBcGlLZXk6ICdwbGFjZWhvbGRlcl9hcGlfa2V5JyAvLyBBZGQgcGxhY2Vob2xkZXJcbiAgICAgICAgICAgIH0sIHsgc2Vzc2lvbiB9KTtcblxuICAgICAgICAgICAgaWYgKCFjb21wYW55UmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gY3JlYXRlIGNvbXBhbnkuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY29tcGFueUlkID0gY29tcGFueVJlc3VsdC5pbnNlcnRlZElkO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBoYXNoZWRQYXNzd29yZCA9IGF3YWl0IGhhc2hQYXNzd29yZChwYXNzd29yZF91bnVzZWQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBhZ2VudFRvSW5zZXJ0OiBPbWl0PEFnZW50LCAnaWQnIHwgJ19pZCc+ID0ge1xuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgZW1haWw6IGVtYWlsLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ6IGhhc2hlZFBhc3N3b3JkLFxuICAgICAgICAgICAgICAgIHJvbGU6ICdhZG1pbicsXG4gICAgICAgICAgICAgICAgYXZhdGFyOiAnJyxcbiAgICAgICAgICAgICAgICBwaG9uZTogJycsXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBjb21wYW55SWQsXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCBhZ2VudFJlc3VsdCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uaW5zZXJ0T25lKGFnZW50VG9JbnNlcnQgYXMgYW55LCB7IHNlc3Npb24gfSk7XG5cbiAgICAgICAgICAgICBpZiAoIWFnZW50UmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gY3JlYXRlIGFkbWluIGFnZW50LlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgYXdhaXQgbG9nQWN0aXZpdHkoY29tcGFueUlkLCBuYW1lLCAnU2lnbiBVcCcsIGBDcmVhdGVkIG5ldyBjb21wYW55IGFuZCBhZG1pbiBhY2NvdW50LmApO1xuXG4gICAgICAgICAgICBjb25zdCBuZXdBZ2VudERvYyA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IF9pZDogYWdlbnRSZXN1bHQuaW5zZXJ0ZWRJZCB9LCB7IHNlc3Npb24gfSk7XG4gICAgICAgICAgICBpZiAobmV3QWdlbnREb2MpIHtcbiAgICAgICAgICAgICAgICAgY29uc3QgeyBwYXNzd29yZCwgLi4uYWdlbnREYXRhIH0gPSBuZXdBZ2VudERvYztcbiAgICAgICAgICAgICAgICAgbmV3QWdlbnRSZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgICAgIC4uLmFnZW50RGF0YSxcbiAgICAgICAgICAgICAgICAgICAgX2lkOiBuZXdBZ2VudERvYy5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IG5ld0FnZW50RG9jLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBjb21wYW55SWQ6IG5ld0FnZW50RG9jLmNvbXBhbnlJZD8udG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFuZXdBZ2VudFJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIHJldHJpZXZlIHRoZSBjcmVhdGVkIGFnZW50LlwiIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGFnZW50OiBuZXdBZ2VudFJlc3VsdCB9O1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlNpZ24gdXAgdHJhbnNhY3Rpb24gZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgLy8gQWJvcnQgdHJhbnNhY3Rpb24gb24gZXJyb3IgaWYgaXQgd2FzIHN0YXJ0ZWRcbiAgICAgICAgaWYgKHNlc3Npb24uaW5UcmFuc2FjdGlvbigpKSB7XG4gICAgICAgICAgICBhd2FpdCBzZXNzaW9uLmFib3J0VHJhbnNhY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB8fCBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHNpZ24gdXAuXCIgfTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgICBhd2FpdCBzZXNzaW9uLmVuZFNlc3Npb24oKTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFjdGl2aXR5TG9ncyhjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8QWN0aXZpdHlMb2dbXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghY29tcGFueUlkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNvbXBhbnlJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsb2dzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFjdGl2aXR5TG9nc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgbG9ncyA9IGF3YWl0IGxvZ3NDb2xsZWN0aW9uLmZpbmQoeyBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpIH0pLnNvcnQoeyB0aW1lc3RhbXA6IC0xIH0pLmxpbWl0KDUwKS50b0FycmF5KCk7XG5cbiAgICAgICAgcmV0dXJuIGxvZ3MubWFwKGxvZyA9PiAoe1xuICAgICAgICAgICAgLi4ubG9nLFxuICAgICAgICAgICAgX2lkOiBsb2cuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBpZDogbG9nLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgY29tcGFueUlkOiBsb2cuY29tcGFueUlkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICB0aW1lc3RhbXA6IGxvZy50aW1lc3RhbXAudG9JU09TdHJpbmcoKSxcbiAgICAgICAgfSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBhY3Rpdml0eSBsb2dzOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDb250YWN0c0J5Q29tcGFueShjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8VXNlcltdPiB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKCFjb21wYW55SWQgfHwgIU9iamVjdElkLmlzVmFsaWQoY29tcGFueUlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzQ29sbGVjdGlvbiA9IGF3YWl0IGdldENvbnRhY3RzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBjb250YWN0cyA9IGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi5maW5kKHsgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSB9KS50b0FycmF5KCk7XG5cbiAgICAgICAgcmV0dXJuIGNvbnRhY3RzLm1hcChjb250YWN0ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgX2lkLCBjb21wYW55SWQsIC4uLnJlc3QgfSA9IGNvbnRhY3QgYXMgYW55O1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5yZXN0LFxuICAgICAgICAgICAgICAgIF9pZDogX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgaWQ6IF9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogY29tcGFueUlkPy50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIG5vdGVzOiAoY29udGFjdC5ub3RlcyB8fCBbXSkubWFwKChub3RlOiBOb3RlKSA9PiAoe1xuICAgICAgICAgICAgICAgICAgICAuLi5ub3RlLFxuICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKG5vdGUudGltZXN0YW1wKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBjb250YWN0czpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlQ29udGFjdChuYW1lOiBzdHJpbmcsIGVtYWlsOiBzdHJpbmcsIHBob25lOiBzdHJpbmcsIGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U/OiBzdHJpbmc7IGNvbnRhY3Q/OiBVc2VyIH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjb250YWN0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRDb250YWN0c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nQ29udGFjdCA9IGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi5maW5kT25lKHsgZW1haWw6IGVtYWlsLnRvTG93ZXJDYXNlKCksIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkgfSk7XG4gICAgICAgIGlmIChleGlzdGluZ0NvbnRhY3QpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkEgY29udGFjdCB3aXRoIHRoaXMgZW1haWwgYWxyZWFkeSBleGlzdHMuXCIgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvbnRhY3RUb0luc2VydDogT21pdDxVc2VyLCAnaWQnIHwgJ19pZCc+ID0ge1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGVtYWlsOiBlbWFpbC50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgcGhvbmUsXG4gICAgICAgICAgICBhdmF0YXI6ICcnLFxuICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSxcbiAgICAgICAgICAgIG5vdGVzOiBbXSxcbiAgICAgICAgICAgIG9ubGluZTogZmFsc2UsXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udGFjdHNDb2xsZWN0aW9uLmluc2VydE9uZShjb250YWN0VG9JbnNlcnQgYXMgYW55KTtcbiAgICAgICAgXG4gICAgICAgIGlmIChyZXN1bHQuaW5zZXJ0ZWRJZCkge1xuICAgICAgICAgICAgY29uc3QgbmV3Q29udGFjdDogVXNlciA9IHtcbiAgICAgICAgICAgICAgICAuLi4oY29udGFjdFRvSW5zZXJ0IGFzIE9taXQ8VXNlciwgJ19pZCd8J2lkJz4pLFxuICAgICAgICAgICAgICAgIF9pZDogcmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBpZDogcmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgY29udGFjdDogbmV3Q29udGFjdCB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIGNyZWF0ZSBjb250YWN0LlwiIH07XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQ3JlYXRlIGNvbnRhY3QgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZC5cIiB9O1xuICAgIH1cbn1cblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYXNzaWduQWdlbnRUb0NvbnRhY3QoY29udGFjdElkOiBzdHJpbmcsIGFnZW50SWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuIH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjb250YWN0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRDb250YWN0c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgYXdhaXQgY29udGFjdHNDb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICAgICAgICAgIHsgX2lkOiBuZXcgT2JqZWN0SWQoY29udGFjdElkKSB9LFxuICAgICAgICAgICAgeyAkc2V0OiB7IGFzc2lnbmVkQWdlbnRJZDogYWdlbnRJZCB9IH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhc3NpZ25pbmcgYWdlbnQ6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhZGROb3RlVG9Db250YWN0KGNvbnRhY3RJZDogc3RyaW5nLCBhZ2VudElkOiBzdHJpbmcsIGFnZW50TmFtZTogc3RyaW5nLCB0ZXh0OiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbm90ZT86IE5vdGUgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzQ29sbGVjdGlvbiA9IGF3YWl0IGdldENvbnRhY3RzQ29sbGVjdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgbmV3Tm90ZTogTm90ZSA9IHtcbiAgICAgICAgICAgIGlkOiBuZXcgT2JqZWN0SWQoKS50b1N0cmluZygpLFxuICAgICAgICAgICAgYWdlbnRJZCxcbiAgICAgICAgICAgIGFnZW50TmFtZSxcbiAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi51cGRhdGVPbmUoXG4gICAgICAgICAgICB7IF9pZDogbmV3IE9iamVjdElkKGNvbnRhY3RJZCkgfSxcbiAgICAgICAgICAgIHsgJHB1c2g6IHsgbm90ZXM6IHsgJGVhY2g6IFtuZXdOb3RlXSwgJHBvc2l0aW9uOiAwIH0gfSB9XG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICBpZiAocmVzdWx0Lm1vZGlmaWVkQ291bnQgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBub3RlOiBuZXdOb3RlIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWRkaW5nIG5vdGU6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXROb3Rlc0ZvckNvbnRhY3QoY29udGFjdElkOiBzdHJpbmcpOiBQcm9taXNlPE5vdGVbXT4ge1xuICAgICB0cnkge1xuICAgICAgICBpZiAoIWNvbnRhY3RJZCB8fCAhT2JqZWN0SWQuaXNWYWxpZChjb250YWN0SWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29udGFjdHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q29udGFjdHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGNvbnRhY3QgPSBhd2FpdCBjb250YWN0c0NvbGxlY3Rpb24uZmluZE9uZSh7IF9pZDogbmV3IE9iamVjdElkKGNvbnRhY3RJZCkgfSk7XG4gICAgICAgIHJldHVybiAoY29udGFjdD8ubm90ZXMgfHwgW10pLm1hcCgobm90ZTogTm90ZSkgPT4gKHtcbiAgICAgICAgICAgIC4uLm5vdGUsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKG5vdGUudGltZXN0YW1wKS50b0lTT1N0cmluZygpLFxuICAgICAgICB9KSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIG5vdGVzOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDaGF0c0J5Q29tcGFueShjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8Q2hhdFtdPiB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKCFjb21wYW55SWQgfHwgIU9iamVjdElkLmlzVmFsaWQoY29tcGFueUlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNoYXRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldENoYXRzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBjaGF0cyA9IGF3YWl0IGNoYXRzQ29sbGVjdGlvbi5hZ2dyZWdhdGUoW1xuICAgICAgICAgICAgeyAkbWF0Y2g6IHsgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSB9IH0sXG4gICAgICAgICAgICB7ICRzb3J0OiB7IHRpbWVzdGFtcDogLTEgfSB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICRsb29rdXA6IHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogJ2NvbnRhY3RzJyxcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxGaWVsZDogJ3VzZXJJZCcsXG4gICAgICAgICAgICAgICAgICAgIGZvcmVpZ25GaWVsZDogJ19pZCcsXG4gICAgICAgICAgICAgICAgICAgIGFzOiAndXNlcidcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyAkdW53aW5kOiAnJHVzZXInIH1cbiAgICAgICAgXSkudG9BcnJheSgpO1xuXG4gICAgICAgIHJldHVybiBjaGF0cy5tYXAoY2hhdCA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IF9pZCwgY29tcGFueUlkLCB1c2VySWQsIC4uLnJlc3QgfSA9IGNoYXQgYXMgYW55O1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5yZXN0LFxuICAgICAgICAgICAgICAgIF9pZDogX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgaWQ6IF9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogY29tcGFueUlkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgdXNlcklkOiB1c2VySWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlczogW10sIC8vIE1lc3NhZ2VzIHdpbGwgYmUgbGF6eS1sb2FkZWRcbiAgICAgICAgICAgICAgICB1c2VyOiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLmNoYXQudXNlcixcbiAgICAgICAgICAgICAgICAgICAgX2lkOiBjaGF0LnVzZXIuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIGlkOiBjaGF0LnVzZXIuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogY2hhdC51c2VyLmNvbXBhbnlJZCA/IGNoYXQudXNlci5jb21wYW55SWQudG9TdHJpbmcoKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgY2hhdHMgYnkgY29tcGFueTpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TWVzc2FnZXNGb3JDaGF0KGNoYXRJZDogc3RyaW5nKTogUHJvbWlzZTxNZXNzYWdlW10+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIWNoYXRJZCB8fCAhT2JqZWN0SWQuaXNWYWxpZChjaGF0SWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVzc2FnZXNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0TWVzc2FnZXNDb2xsZWN0aW9uKCk7XG4gICAgICAgIC8vIEFsc28gZmV0Y2ggc2VuZGVyIGRldGFpbHMgaWYgaXQncyBhIHVzZXIsIG5vdCBhbiBhZ2VudCAoJ21lJylcbiAgICAgICAgY29uc3QgbWVzc2FnZXMgPSBhd2FpdCBtZXNzYWdlc0NvbGxlY3Rpb24uYWdncmVnYXRlKFtcbiAgICAgICAgICAgIHsgJG1hdGNoOiB7IGNoYXRJZDogbmV3IE9iamVjdElkKGNoYXRJZCkgfSB9LFxuICAgICAgICAgICAgeyAkc29ydDogeyB0aW1lc3RhbXA6IDEgfSB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICRsb29rdXA6IHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogJ2NvbnRhY3RzJyxcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxGaWVsZDogJ3NlbmRlcklkJyxcbiAgICAgICAgICAgICAgICAgICAgZm9yZWlnbkZpZWxkOiAnX2lkJyxcbiAgICAgICAgICAgICAgICAgICAgYXM6ICdzZW5kZXJJbmZvJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXSkudG9BcnJheSgpO1xuXG4gICAgICAgIHJldHVybiBtZXNzYWdlcy5tYXAobXNnID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgX2lkLCBjaGF0SWQsIHNlbmRlcklkLCBzZW5kZXJJbmZvLCAuLi5yZXN0IH0gPSBtc2cgYXMgYW55O1xuICAgICAgICAgICAgY29uc3Qgc2VuZGVyID0gbXNnLnNlbmRlciA9PT0gJ21lJyA/ICdtZScgOiAoc2VuZGVySW5mb1swXSB8fCBudWxsKTtcblxuICAgICAgICAgICAgaWYgKHNlbmRlciAmJiBzZW5kZXIgIT09ICdtZScpIHtcbiAgICAgICAgICAgICAgICBzZW5kZXIuaWQgPSBzZW5kZXIuX2lkLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgICAgICAgICBpZDogX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgc2VuZGVyLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIG1lc3NhZ2VzOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZW5kTWVzc2FnZShjaGF0SWQ6IHN0cmluZywgdGV4dDogc3RyaW5nLCBhZ2VudElkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbmV3TWVzc2FnZT86IE1lc3NhZ2UgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzQ29sbGVjdGlvbiA9IGF3YWl0IGdldE1lc3NhZ2VzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBjaGF0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRDaGF0c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGNvbnN0IG5ld01lc3NhZ2VUb0luc2VydDogT21pdDxNZXNzYWdlLCAnaWQnIHwgJ19pZCc+ID0ge1xuICAgICAgICAgICAgY2hhdElkOiBuZXcgT2JqZWN0SWQoY2hhdElkKSxcbiAgICAgICAgICAgIHNlbmRlcjogJ21lJywgLy8gJ21lJyBkZW5vdGVzIHRoZSBhZ2VudFxuICAgICAgICAgICAgc2VuZGVySWQ6IG5ldyBPYmplY3RJZChhZ2VudElkKSxcbiAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IHRpbWVzdGFtcC50b0lTT1N0cmluZygpLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG1lc3NhZ2VzQ29sbGVjdGlvbi5pbnNlcnRPbmUobmV3TWVzc2FnZVRvSW5zZXJ0IGFzIGFueSk7XG5cbiAgICAgICAgaWYgKHJlc3VsdC5pbnNlcnRlZElkKSB7XG4gICAgICAgICAgICBhd2FpdCBjaGF0c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgICAgIHsgX2lkOiBuZXcgT2JqZWN0SWQoY2hhdElkKSB9LFxuICAgICAgICAgICAgICAgIHsgJHNldDogeyBsYXN0TWVzc2FnZTogdGV4dCwgdGltZXN0YW1wOiB0aW1lc3RhbXAudG9Mb2NhbGVUaW1lU3RyaW5nKFtdLCB7IGhvdXI6ICcyLWRpZ2l0JywgbWludXRlOiAnMi1kaWdpdCcgfSkgfSB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBmaW5hbE5ld01lc3NhZ2U6IE1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgICAgLi4uKG5ld01lc3NhZ2VUb0luc2VydCBhcyBPbWl0PE1lc3NhZ2UsICdfaWQnfCdpZCc+KSxcbiAgICAgICAgICAgICAgICBfaWQ6IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgaWQ6IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY2hhdElkOiBuZXdNZXNzYWdlVG9JbnNlcnQuY2hhdElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgc2VuZGVySWQ6IG5ld01lc3NhZ2VUb0luc2VydC5zZW5kZXJJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIHsgXG4gICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSwgXG4gICAgICAgICAgICAgICAgbmV3TWVzc2FnZTogZmluYWxOZXdNZXNzYWdlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHNlbmRpbmcgbWVzc2FnZTpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNldENoYXRib3RTdGF0dXMoY2hhdElkOiBzdHJpbmcsIGlzQWN0aXZlOiBib29sZWFuKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW4gfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNoYXRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldENoYXRzQ29sbGVjdGlvbigpO1xuICAgICAgICBhd2FpdCBjaGF0c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChjaGF0SWQpIH0sXG4gICAgICAgICAgICB7ICRzZXQ6IHsgaXNDaGF0Ym90QWN0aXZlOiBpc0FjdGl2ZSB9IH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBzZXR0aW5nIGNoYXRib3Qgc3RhdHVzOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RhcnROZXdDaGF0cyh1c2VyczogVXNlcltdLCBtZXNzYWdlOiBzdHJpbmcsIGNvbXBhbnlJZDogc3RyaW5nLCBhZ2VudElkOiBzdHJpbmcpOiBQcm9taXNlPENoYXRbXT4ge1xuICAgIGNvbnN0IGNoYXRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldENoYXRzQ29sbGVjdGlvbigpO1xuICAgIGNvbnN0IG5ld09yVXBkYXRlZENoYXRzOiBDaGF0W10gPSBbXTtcblxuICAgIGZvciAoY29uc3QgdXNlciBvZiB1c2Vycykge1xuICAgICAgICBjb25zdCBleGlzdGluZ0NoYXREb2MgPSBhd2FpdCBjaGF0c0NvbGxlY3Rpb24uZmluZE9uZSh7XG4gICAgICAgICAgICB1c2VySWQ6IG5ldyBPYmplY3RJZCh1c2VyLmlkKSxcbiAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZClcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGV4aXN0aW5nQ2hhdERvYykge1xuICAgICAgICAgICAgYXdhaXQgc2VuZE1lc3NhZ2UoZXhpc3RpbmdDaGF0RG9jLl9pZC50b1N0cmluZygpLCBtZXNzYWdlLCBhZ2VudElkKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgdXBkYXRlZENoYXQ6IENoYXQgPSB7XG4gICAgICAgICAgICAgICAgLi4uKGV4aXN0aW5nQ2hhdERvYyBhcyBhbnkpLFxuICAgICAgICAgICAgICAgIF9pZDogZXhpc3RpbmdDaGF0RG9jLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiBleGlzdGluZ0NoYXREb2MuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgdXNlcklkOiBleGlzdGluZ0NoYXREb2MudXNlcklkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBleGlzdGluZ0NoYXREb2MuY29tcGFueUlkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgbGFzdE1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvTG9jYWxlVGltZVN0cmluZyhbXSwgeyBob3VyOiAnMi1kaWdpdCcsIG1pbnV0ZTogJzItZGlnaXQnIH0pLFxuICAgICAgICAgICAgICAgIHVzZXI6IHVzZXIsXG4gICAgICAgICAgICAgICAgbWVzc2FnZXM6IFtdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG5ld09yVXBkYXRlZENoYXRzLnB1c2godXBkYXRlZENoYXQpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgY29uc3QgbmV3Q2hhdERhdGE6IE9taXQ8Q2hhdCwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgICAgICB1c2VySWQ6IG5ldyBPYmplY3RJZCh1c2VyLmlkKSxcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpLFxuICAgICAgICAgICAgICAgIGxhc3RNZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogdGltZXN0YW1wLnRvTG9jYWxlVGltZVN0cmluZyhbXSwgeyBob3VyOiAnMi1kaWdpdCcsIG1pbnV0ZTogJzItZGlnaXQnIH0pLFxuICAgICAgICAgICAgICAgIHVucmVhZENvdW50OiAwLFxuICAgICAgICAgICAgICAgIHByaW9yaXR5OiAnbm9ybWFsJyxcbiAgICAgICAgICAgICAgICBjaGFubmVsOiAnV2ViY2hhdCcsXG4gICAgICAgICAgICAgICAgaXNDaGF0Ym90QWN0aXZlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlczogW11cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBjaGF0UmVzdWx0ID0gYXdhaXQgY2hhdHNDb2xsZWN0aW9uLmluc2VydE9uZShuZXdDaGF0RGF0YSBhcyBhbnkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoY2hhdFJlc3VsdC5pbnNlcnRlZElkKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgc2VuZE1lc3NhZ2UoY2hhdFJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksIG1lc3NhZ2UsIGFnZW50SWQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNyZWF0ZWRDaGF0OiBDaGF0ID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi4obmV3Q2hhdERhdGEgYXMgYW55KSxcbiAgICAgICAgICAgICAgICAgICAgX2lkOiBjaGF0UmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGNoYXRSZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICB1c2VySWQ6IG5ld0NoYXREYXRhLnVzZXJJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBjb21wYW55SWQ6IG5ld0NoYXREYXRhLmNvbXBhbnlJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICB1c2VyOiB1c2VyLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlczogW10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBuZXdPclVwZGF0ZWRDaGF0cy5wdXNoKGNyZWF0ZWRDaGF0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3T3JVcGRhdGVkQ2hhdHM7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVDYW1wYWlnbihkYXRhOiBQYXJ0aWFsPENhbXBhaWduPiAmIHsgc2NoZWR1bGVUeXBlPzogJ25vdycgfCAnbGF0ZXInIH0sIGNvbXBhbnlJZDogc3RyaW5nLCBhZ2VudElkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgY2FtcGFpZ24/OiBDYW1wYWlnbjsgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNhbXBhaWduc0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRDYW1wYWlnbnNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzQ29sbGVjdGlvbiA9IGF3YWl0IGdldENvbnRhY3RzQ29sbGVjdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgbGV0IHN0YXR1czogQ2FtcGFpZ25bJ3N0YXR1cyddID0gJ0RyYWZ0JztcbiAgICAgICAgbGV0IHNlbnRBdDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgZGVsaXZlcnkgPSAwO1xuICAgICAgICBsZXQgZW5nYWdlbWVudCA9IDA7XG4gICAgICAgIGxldCBjb252ZXJzaW9uID0gMDtcblxuICAgICAgICBpZiAoZGF0YS5zY2hlZHVsZVR5cGUgPT09ICdub3cnKSB7XG4gICAgICAgICAgICBzdGF0dXMgPSAnQ29tcGxldGVkJztcbiAgICAgICAgICAgIHNlbnRBdCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgIC8vIEdlbmVyYXRlIG1vY2sgcGVyZm9ybWFuY2UgZGF0YSBmb3IgaW1tZWRpYXRlIGNhbXBhaWduc1xuICAgICAgICAgICAgZGVsaXZlcnkgPSA5NSArIE1hdGgucmFuZG9tKCkgKiA1OyBcbiAgICAgICAgICAgIGVuZ2FnZW1lbnQgPSAxMCArIE1hdGgucmFuZG9tKCkgKiAxNTtcbiAgICAgICAgICAgIGNvbnZlcnNpb24gPSAyICsgTWF0aC5yYW5kb20oKSAqIDg7IFxuXG4gICAgICAgICAgICAvLyBBY3R1YWxseSBzZW5kIHRoZSBtZXNzYWdlc1xuICAgICAgICAgICAgaWYgKGRhdGEuYXVkaWVuY2UgJiYgZGF0YS5tZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXVkaWVuY2VDb250YWN0cyA9IGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi5maW5kKHsgX2lkOiB7ICRpbjogZGF0YS5hdWRpZW5jZS5tYXAoaWQgPT4gbmV3IE9iamVjdElkKGlkKSkgfSB9KS50b0FycmF5KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdXNlcnMgPSBhdWRpZW5jZUNvbnRhY3RzLm1hcChjID0+ICh7XG4gICAgICAgICAgICAgICAgICAgIC4uLmMsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBjLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBfaWQ6IGMuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgfSkpIGFzIFVzZXJbXTtcblxuICAgICAgICAgICAgICAgIGF3YWl0IHN0YXJ0TmV3Q2hhdHModXNlcnMsIGRhdGEubWVzc2FnZSwgY29tcGFueUlkLCBhZ2VudElkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChkYXRhLnNjaGVkdWxlVHlwZSA9PT0gJ2xhdGVyJykge1xuICAgICAgICAgICAgc3RhdHVzID0gJ1NjaGVkdWxlZCc7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBuZXdDYW1wYWlnbjogT21pdDxDYW1wYWlnbiwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgIHRpdGxlOiBkYXRhLnRpdGxlISxcbiAgICAgICAgICAgIHR5cGU6IGRhdGEudHlwZSB8fCAnQnJvYWRjYXN0JyxcbiAgICAgICAgICAgIHN0YXR1czogc3RhdHVzLFxuICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSxcbiAgICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgYXVkaWVuY2U6IGRhdGEuYXVkaWVuY2UgfHwgW10sXG4gICAgICAgICAgICBtZXNzYWdlOiBkYXRhLm1lc3NhZ2UgfHwgXCJcIixcbiAgICAgICAgICAgIHNlbnRBdDogc2VudEF0LFxuICAgICAgICAgICAgZGVsaXZlcnksXG4gICAgICAgICAgICBlbmdhZ2VtZW50LFxuICAgICAgICAgICAgY29udmVyc2lvbixcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjYW1wYWlnbnNDb2xsZWN0aW9uLmluc2VydE9uZShuZXdDYW1wYWlnbiBhcyBhbnkpO1xuICAgICAgICBpZiAocmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNyZWF0ZWRDYW1wYWlnbjogQ2FtcGFpZ24gPSB7XG4gICAgICAgICAgICAgICAgLi4ubmV3Q2FtcGFpZ24sXG4gICAgICAgICAgICAgICAgX2lkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBjYW1wYWlnbjogY3JlYXRlZENhbXBhaWduIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIGNyZWF0ZSBjYW1wYWlnbi5cIiB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDcmVhdGUgY2FtcGFpZ24gZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZC5cIiB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENhbXBhaWduc0J5Q29tcGFueShjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8Q2FtcGFpZ25bXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghY29tcGFueUlkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNvbXBhbnlJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjYW1wYWlnbnNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q2FtcGFpZ25zQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBjYW1wYWlnbnMgPSBhd2FpdCBjYW1wYWlnbnNDb2xsZWN0aW9uLmZpbmQoeyBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpIH0pLnNvcnQoeyBjcmVhdGVkQXQ6IC0xIH0pLnRvQXJyYXkoKTtcblxuICAgICAgICByZXR1cm4gY2FtcGFpZ25zLm1hcChjYW1wYWlnbiA9PiAoe1xuICAgICAgICAgICAgLi4uY2FtcGFpZ24sXG4gICAgICAgICAgICBfaWQ6IGNhbXBhaWduLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgaWQ6IGNhbXBhaWduLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgY29tcGFueUlkOiBjYW1wYWlnbi5jb21wYW55SWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoY2FtcGFpZ24uY3JlYXRlZEF0KS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgc2VudEF0OiBjYW1wYWlnbi5zZW50QXQgPyBuZXcgRGF0ZShjYW1wYWlnbi5zZW50QXQpLnRvSVNPU3RyaW5nKCkgOiB1bmRlZmluZWQsXG4gICAgICAgIH0pKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgY2FtcGFpZ25zOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbXBvcnRDb250YWN0c0Zyb21DU1YoY29udGFjdHNEYXRhOiB7IG5hbWU6IHN0cmluZzsgZW1haWw6IHN0cmluZzsgcGhvbmU6IHN0cmluZyB9W10sIGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U6IHN0cmluZzsgbmV3Q29udGFjdHM6IFVzZXJbXTsgaW1wb3J0ZWRDb3VudDogbnVtYmVyOyBza2lwcGVkQ291bnQ6IG51bWJlcjsgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzQ29sbGVjdGlvbiA9IGF3YWl0IGdldENvbnRhY3RzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBuZXdDb250YWN0czogVXNlcltdID0gW107XG4gICAgICAgIGxldCBpbXBvcnRlZENvdW50ID0gMDtcbiAgICAgICAgbGV0IHNraXBwZWRDb3VudCA9IDA7XG5cbiAgICAgICAgY29uc3QgY29tcGFueU9iaklkID0gbmV3IE9iamVjdElkKGNvbXBhbnlJZCk7XG5cbiAgICAgICAgZm9yIChjb25zdCBjb250YWN0IG9mIGNvbnRhY3RzRGF0YSkge1xuICAgICAgICAgICAgbGV0IGV4aXN0aW5nQ29udGFjdCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoY29udGFjdC5lbWFpbCkge1xuICAgICAgICAgICAgICAgIGV4aXN0aW5nQ29udGFjdCA9IGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi5maW5kT25lKHtcbiAgICAgICAgICAgICAgICAgICAgZW1haWw6IGNvbnRhY3QuZW1haWwudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGFueUlkOiBjb21wYW55T2JqSWRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGV4aXN0aW5nQ29udGFjdCkge1xuICAgICAgICAgICAgICAgIHNraXBwZWRDb3VudCsrO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBjb250YWN0VG9JbnNlcnQ6IE9taXQ8VXNlciwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBjb250YWN0Lm5hbWUsXG4gICAgICAgICAgICAgICAgZW1haWw6IGNvbnRhY3QuZW1haWwudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICAgICBwaG9uZTogY29udGFjdC5waG9uZSxcbiAgICAgICAgICAgICAgICBhdmF0YXI6ICcnLFxuICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogY29tcGFueU9iaklkLFxuICAgICAgICAgICAgICAgIG5vdGVzOiBbXSxcbiAgICAgICAgICAgICAgICBvbmxpbmU6IGZhbHNlLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udGFjdHNDb2xsZWN0aW9uLmluc2VydE9uZShjb250YWN0VG9JbnNlcnQgYXMgYW55KTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQuaW5zZXJ0ZWRJZCkge1xuICAgICAgICAgICAgICAgIGltcG9ydGVkQ291bnQrKztcbiAgICAgICAgICAgICAgICBuZXdDb250YWN0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgLi4uKGNvbnRhY3RUb0luc2VydCBhcyBPbWl0PFVzZXIsICdpZCcgfCAnX2lkJz4pLFxuICAgICAgICAgICAgICAgICAgICBfaWQ6IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIGlkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBjb21wYW55SWQ6IGNvbXBhbnlJZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgbWVzc2FnZTogYEltcG9ydCBjb21wbGV0ZS4gQWRkZWQgJHtpbXBvcnRlZENvdW50fSBuZXcgY29udGFjdHMsIHNraXBwZWQgJHtza2lwcGVkQ291bnR9IGR1cGxpY2F0ZXMuYCxcbiAgICAgICAgICAgIG5ld0NvbnRhY3RzLFxuICAgICAgICAgICAgaW1wb3J0ZWRDb3VudCxcbiAgICAgICAgICAgIHNraXBwZWRDb3VudFxuICAgICAgICB9O1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkNTViBpbXBvcnQgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZCBkdXJpbmcgaW1wb3J0LlwiLCBuZXdDb250YWN0czogW10sIGltcG9ydGVkQ291bnQ6IDAsIHNraXBwZWRDb3VudDogMCB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUFnZW50QXZhdGFyKGFnZW50SWQ6IHN0cmluZywgYXZhdGFyOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgYXZhdGFyPzogc3RyaW5nOyB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHVwZGF0ZVJlc3VsdCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChhZ2VudElkKSB9LFxuICAgICAgICAgICAgeyAkc2V0OiB7IGF2YXRhciB9IH1cbiAgICAgICAgKTtcblxuICAgICAgICBpZiAodXBkYXRlUmVzdWx0Lm1vZGlmaWVkQ291bnQgPT09IDAgJiYgdXBkYXRlUmVzdWx0Lm1hdGNoZWRDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQWdlbnQgbm90IGZvdW5kLlwiIH07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIExvZyBhY3Rpdml0eVxuICAgICAgICBjb25zdCBhZ2VudCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IF9pZDogbmV3IE9iamVjdElkKGFnZW50SWQpIH0pO1xuICAgICAgICBpZiAoYWdlbnQpIHtcbiAgICAgICAgICAgICBhd2FpdCBsb2dBY3Rpdml0eShhZ2VudC5jb21wYW55SWQsIGFnZW50Lm5hbWUsICdVcGRhdGUgUHJvZmlsZScsIGBVcGRhdGVkIHByb2ZpbGUgcGljdHVyZWApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgYXZhdGFyOiBhdmF0YXIgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVXBkYXRlIGFnZW50IGF2YXRhciBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkLlwiIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2NoZWR1bGVBbmFseXRpY3NSZXBvcnQoZW1haWw6IHN0cmluZywgZnJlcXVlbmN5OiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZTogc3RyaW5nOyB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gSW4gYSByZWFsIGFwcGxpY2F0aW9uLCB5b3Ugd291bGQgY29ubmVjdCB0byBhIGpvYiBzY2hlZHVsZXIgKGUuZy4sIEJ1bGxNUSwgY3JvbilcbiAgICAgICAgLy8gYW5kIHF1ZXVlIGEgam9iIHRvIHNlbmQgYW4gZW1haWwgcmVwb3J0IGJhc2VkIG9uIHRoZSBmcmVxdWVuY3kuXG4gICAgICAgIC8vIEZvciB0aGlzIGRlbW8sIHdlJ2xsIGp1c3QgbG9nIGl0IHRvIHRoZSBjb25zb2xlLlxuICAgICAgICBjb25zb2xlLmxvZyhgQW5hbHl0aWNzIHJlcG9ydCBzY2hlZHVsZWQgZm9yICR7ZW1haWx9IHdpdGggZnJlcXVlbmN5OiAke2ZyZXF1ZW5jeX1gKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFlvdSBjb3VsZCBhbHNvIGxvZyB0aGlzIGFzIGEgc3lzdGVtIGFjdGl2aXR5XG4gICAgICAgIC8vIGF3YWl0IGxvZ0FjdGl2aXR5KGNvbXBhbnlJZCwgJ1N5c3RlbScsICdTY2hlZHVsZSBSZXBvcnQnLCBgQW5hbHl0aWNzIHJlcG9ydCBzY2hlZHVsZWQgZm9yICR7ZW1haWx9ICgke2ZyZXF1ZW5jeX0pYCk7XG5cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgbWVzc2FnZTogYFJlcG9ydCBzdWNjZXNzZnVsbHkgc2NoZWR1bGVkIGZvciAke2VtYWlsfS5gIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlNjaGVkdWxlIHJlcG9ydCBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIHdoaWxlIHNjaGVkdWxpbmcgdGhlIHJlcG9ydC5cIiB9O1xuICAgIH1cbn1cbiAgICBcblxuICAgIFxuXG4gICAgXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjZSQXNuQnNCIn0=
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:d0329e [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40534236dcc36f51af1a921f1d5dd985231fa0be2f":"getMessagesForChat"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getMessagesForChat": (()=>getMessagesForChat)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var getMessagesForChat = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("40534236dcc36f51af1a921f1d5dd985231fa0be2f", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getMessagesForChat"); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4vYWN0aW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbid1c2Ugc2VydmVyJztcblxuaW1wb3J0IHsgZ2V0RGIgfSBmcm9tIFwiQC9saWIvZGJcIjtcbmltcG9ydCB7IGhhc2hQYXNzd29yZCwgdmVyaWZ5UGFzc3dvcmQgfSBmcm9tIFwiQC9saWIvYXV0aFwiO1xuaW1wb3J0IHR5cGUgeyBBZ2VudCwgQWdlbnRSb2xlLCBBbm5vdW5jZW1lbnQsIENvbXBhbnksIENvbW1lbnQsIEFjdGl2aXR5TG9nLCBVc2VyLCBOb3RlLCBDaGF0LCBNZXNzYWdlLCBDaGFubmVsLCBDYW1wYWlnbiB9IGZyb20gXCJAL3R5cGVzXCI7XG5pbXBvcnQgeyBDb2xsZWN0aW9uLCBEYiwgT2JqZWN0SWQgfSBmcm9tIFwibW9uZ29kYlwiO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRBZ2VudHNDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxBZ2VudD4+IHtcbiAgICBjb25zdCBkYjogRGIgPSBhd2FpdCBnZXREYigpO1xuICAgIHJldHVybiBkYi5jb2xsZWN0aW9uPEFnZW50PignYWdlbnRzJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENvbXBhbmllc0NvbGxlY3Rpb24oKTogUHJvbWlzZTxDb2xsZWN0aW9uPENvbXBhbnk+PiB7XG4gICAgY29uc3QgZGI6IERiID0gYXdhaXQgZ2V0RGIoKTtcbiAgICByZXR1cm4gZGIuY29sbGVjdGlvbjxDb21wYW55PignY29tcGFuaWVzJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEFubm91bmNlbWVudHNDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxBbm5vdW5jZW1lbnQ+PiB7XG4gICAgY29uc3QgZGI6IERiID0gYXdhaXQgZ2V0RGIoKTtcbiAgICByZXR1cm4gZGIuY29sbGVjdGlvbjxBbm5vdW5jZW1lbnQ+KCdhbm5vdW5jZW1lbnRzJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEFjdGl2aXR5TG9nc0NvbGxlY3Rpb24oKTogUHJvbWlzZTxDb2xsZWN0aW9uPEFjdGl2aXR5TG9nPj4ge1xuICAgIGNvbnN0IGRiOiBEYiA9IGF3YWl0IGdldERiKCk7XG4gICAgcmV0dXJuIGRiLmNvbGxlY3Rpb248QWN0aXZpdHlMb2c+KCdhY3Rpdml0eV9sb2dzJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENvbnRhY3RzQ29sbGVjdGlvbigpOiBQcm9taXNlPENvbGxlY3Rpb248VXNlcj4+IHtcbiAgICBjb25zdCBkYjogRGIgPSBhd2FpdCBnZXREYigpO1xuICAgIHJldHVybiBkYi5jb2xsZWN0aW9uPFVzZXI+KCdjb250YWN0cycpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRDaGF0c0NvbGxlY3Rpb24oKTogUHJvbWlzZTxDb2xsZWN0aW9uPENoYXQ+PiB7XG4gICAgY29uc3QgZGI6IERiID0gYXdhaXQgZ2V0RGIoKTtcbiAgICByZXR1cm4gZGIuY29sbGVjdGlvbjxDaGF0PignY2hhdHMnKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0TWVzc2FnZXNDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxNZXNzYWdlPj4ge1xuICAgIGNvbnN0IGRiOiBEYiA9IGF3YWl0IGdldERiKCk7XG4gICAgcmV0dXJuIGRiLmNvbGxlY3Rpb248TWVzc2FnZT4oJ21lc3NhZ2VzJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENhbXBhaWduc0NvbGxlY3Rpb24oKTogUHJvbWlzZTxDb2xsZWN0aW9uPENhbXBhaWduPj4ge1xuICAgIGNvbnN0IGRiOiBEYiA9IGF3YWl0IGdldERiKCk7XG4gICAgcmV0dXJuIGRiLmNvbGxlY3Rpb248Q2FtcGFpZ24+KCdjYW1wYWlnbnMnKTtcbn1cblxuXG5hc3luYyBmdW5jdGlvbiBsb2dBY3Rpdml0eShjb21wYW55SWQ6IHN0cmluZyB8IE9iamVjdElkLCBhZ2VudE5hbWU6IHN0cmluZywgYWN0aW9uOiBzdHJpbmcsIGRldGFpbHM6IHN0cmluZykge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGxvZ3NDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWN0aXZpdHlMb2dzQ29sbGVjdGlvbigpO1xuICAgICAgICBhd2FpdCBsb2dzQ29sbGVjdGlvbi5pbnNlcnRPbmUoe1xuICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSxcbiAgICAgICAgICAgIGFnZW50TmFtZSxcbiAgICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICAgIGRldGFpbHMsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gbG9nIGFjdGl2aXR5OlwiLCBlcnJvcik7XG4gICAgfVxufVxuXG4vLyBBIHNpbXBsZSBoYXNoaW5nIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIHBzZXVkby1yYW5kb20gYnV0IGNvbnNpc3RlbnQgbnVtYmVyIGZyb20gYSBzdHJpbmcuXG5jb25zdCBzaW1wbGVIYXNoID0gKHN0cjogc3RyaW5nKSA9PiB7XG4gIGxldCBoYXNoID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjaGFyID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgaGFzaCA9IChoYXNoIDw8IDUpIC0gaGFzaCArIGNoYXI7XG4gICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgfVxuICByZXR1cm4gTWF0aC5hYnMoaGFzaCk7XG59O1xuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBZ2VudHNCeUNvbXBhbnkoY29tcGFueUlkOiBzdHJpbmcpOiBQcm9taXNlPEFnZW50W10+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIWNvbXBhbnlJZCB8fCAhT2JqZWN0SWQuaXNWYWxpZChjb21wYW55SWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZXNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0TWVzc2FnZXNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGFnZW50cyA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZCh7IGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkgfSwgeyBwcm9qZWN0aW9uOiB7IHBhc3N3b3JkOiAwIH0gfSkudG9BcnJheSgpO1xuXG4gICAgICAgIGNvbnN0IGFnZW50RGF0YVdpdGhTdGF0cyA9IGF3YWl0IFByb21pc2UuYWxsKGFnZW50cy5tYXAoYXN5bmMgKGFnZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICB0b2RheS5zZXRIb3VycygwLCAwLCAwLCAwKTtcblxuICAgICAgICAgICAgY29uc3QgY29udmVyc2F0aW9uc1RvZGF5ID0gYXdhaXQgbWVzc2FnZXNDb2xsZWN0aW9uLmNvdW50RG9jdW1lbnRzKHtcbiAgICAgICAgICAgICAgICBzZW5kZXJJZDogYWdlbnQuX2lkLFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogeyAkZ3RlOiB0b2RheS50b0lTT1N0cmluZygpIH0gXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3Qgc3RhdHVzZXM6IEFycmF5PCdPbmxpbmUnIHwgJ09mZmxpbmUnIHwgJ0J1c3knPiA9IFsnT25saW5lJywgJ09mZmxpbmUnLCAnQnVzeSddO1xuICAgICAgICAgICAgY29uc3QgaGFzaCA9IHNpbXBsZUhhc2goYWdlbnQubmFtZSk7XG4gICAgICAgICAgICBjb25zdCByYW5kb21TdGF0dXMgPSBzdGF0dXNlc1toYXNoICUgc3RhdHVzZXMubGVuZ3RoXTtcblxuICAgICAgICAgICAgbGV0IGF2Z1Jlc3BvbnNlVGltZSA9IFwiTi9BXCI7XG4gICAgICAgICAgICBsZXQgY3NhdDogbnVtYmVyIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICBpZiAoY29udmVyc2F0aW9uc1RvZGF5ID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF2Z1Jlc3BvbnNlTWludXRlcyA9IChoYXNoICUgNCkgKyAxOyAvLyAxIHRvIDQgbWludXRlc1xuICAgICAgICAgICAgICAgIGNvbnN0IGF2Z1Jlc3BvbnNlU2Vjb25kcyA9IGhhc2ggJSA2MDsgLy8gMCB0byA1OSBzZWNvbmRzXG4gICAgICAgICAgICAgICAgYXZnUmVzcG9uc2VUaW1lID0gYCR7YXZnUmVzcG9uc2VNaW51dGVzfW0gJHthdmdSZXNwb25zZVNlY29uZHN9c2A7XG4gICAgICAgICAgICAgICAgY3NhdCA9IDg1ICsgKGhhc2ggJSAxNSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uYWdlbnQsXG4gICAgICAgICAgICAgICAgX2lkOiBhZ2VudC5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBpZDogYWdlbnQuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBhZ2VudC5jb21wYW55SWQ/LnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY29udmVyc2F0aW9uc1RvZGF5LFxuICAgICAgICAgICAgICAgIHN0YXR1czogcmFuZG9tU3RhdHVzLFxuICAgICAgICAgICAgICAgIGF2Z1Jlc3BvbnNlVGltZSxcbiAgICAgICAgICAgICAgICBjc2F0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSkpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGFnZW50RGF0YVdpdGhTdGF0cztcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgYWdlbnRzIGJ5IGNvbXBhbnk6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUFubm91bmNlbWVudChkYXRhOiB7IHRpdGxlOiBzdHJpbmc7IGNvbnRlbnQ6IHN0cmluZzsgY2F0ZWdvcnk6IHN0cmluZzsgYXV0aG9ySWQ6IHN0cmluZzsgY29tcGFueUlkOiBzdHJpbmcgfSk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBtZXNzYWdlPzogc3RyaW5nOyBhbm5vdW5jZW1lbnQ/OiBBbm5vdW5jZW1lbnQgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QW5ub3VuY2VtZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcblxuICAgICAgICBjb25zdCBhdXRob3IgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBfaWQ6IG5ldyBPYmplY3RJZChkYXRhLmF1dGhvcklkKSB9KTtcbiAgICAgICAgaWYgKCFhdXRob3IpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkF1dGhvciBub3QgZm91bmQuXCIgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5ld0Fubm91bmNlbWVudDogT21pdDxBbm5vdW5jZW1lbnQsICdpZCcgfCAnX2lkJz4gPSB7XG4gICAgICAgICAgICB0aXRsZTogZGF0YS50aXRsZSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGRhdGEuY29udGVudCxcbiAgICAgICAgICAgIGNhdGVnb3J5OiBkYXRhLmNhdGVnb3J5IGFzIGFueSxcbiAgICAgICAgICAgIGF1dGhvcjoge1xuICAgICAgICAgICAgICAgIGlkOiBhdXRob3IuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgbmFtZTogYXV0aG9yLm5hbWUsXG4gICAgICAgICAgICAgICAgYXZhdGFyOiBhdXRob3IuYXZhdGFyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoZGF0YS5jb21wYW55SWQpLFxuICAgICAgICAgICAgZGF0ZTogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgcmVhZEJ5OiBbXSxcbiAgICAgICAgICAgIGNvbW1lbnRzOiBbXSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhbm5vdW5jZW1lbnRzQ29sbGVjdGlvbi5pbnNlcnRPbmUobmV3QW5ub3VuY2VtZW50IGFzIGFueSk7XG4gICAgICAgIGF3YWl0IGxvZ0FjdGl2aXR5KGRhdGEuY29tcGFueUlkLCBhdXRob3IubmFtZSwgJ0NyZWF0ZSBBbm5vdW5jZW1lbnQnLCBgUHVibGlzaGVkOiBcIiR7ZGF0YS50aXRsZX1cImApO1xuXG5cbiAgICAgICAgaWYgKHJlc3VsdC5pbnNlcnRlZElkKSB7XG4gICAgICAgICAgICBjb25zdCBjcmVhdGVkQW5ub3VuY2VtZW50OiBBbm5vdW5jZW1lbnQgPSB7XG4gICAgICAgICAgICAgICAgLi4uKG5ld0Fubm91bmNlbWVudCBhcyBPbWl0PEFubm91bmNlbWVudCwgJ19pZCcgfCAnaWQnPiksXG4gICAgICAgICAgICAgICAgX2lkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGRhdGEuY29tcGFueUlkKS50b1N0cmluZygpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGFubm91bmNlbWVudDogY3JlYXRlZEFubm91bmNlbWVudCB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIGNyZWF0ZSBhbm5vdW5jZW1lbnQuXCIgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQ3JlYXRlIGFubm91bmNlbWVudCBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkLlwiIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QW5ub3VuY2VtZW50c0J5Q29tcGFueShjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8QW5ub3VuY2VtZW50W10+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIWNvbXBhbnlJZCB8fCAhT2JqZWN0SWQuaXNWYWxpZChjb21wYW55SWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYW5ub3VuY2VtZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBbm5vdW5jZW1lbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBhbm5vdW5jZW1lbnRzID0gYXdhaXQgYW5ub3VuY2VtZW50c0NvbGxlY3Rpb24uZmluZCh7IGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkgfSkuc29ydCh7IGRhdGU6IC0xIH0pLnRvQXJyYXkoKTtcblxuICAgICAgICByZXR1cm4gYW5ub3VuY2VtZW50cy5tYXAoYW5ub3VuY2VtZW50ID0+ICh7XG4gICAgICAgICAgICAuLi5hbm5vdW5jZW1lbnQsXG4gICAgICAgICAgICBfaWQ6IGFubm91bmNlbWVudC5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGlkOiBhbm5vdW5jZW1lbnQuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBjb21wYW55SWQ6IGFubm91bmNlbWVudC5jb21wYW55SWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIHJlYWRCeTogYW5ub3VuY2VtZW50LnJlYWRCeSB8fCBbXSxcbiAgICAgICAgICAgIGNvbW1lbnRzOiAoYW5ub3VuY2VtZW50LmNvbW1lbnRzIHx8IFtdKS5tYXAoKGNvbW1lbnQ6IENvbW1lbnQpID0+ICh7XG4gICAgICAgICAgICAgICAgLi4uY29tbWVudCxcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKGNvbW1lbnQudGltZXN0YW1wKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgfSkpLFxuICAgICAgICB9KSk7XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgYW5ub3VuY2VtZW50cyBieSBjb21wYW55OlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYXJrQW5ub3VuY2VtZW50QXNSZWFkKGFubm91bmNlbWVudElkOiBzdHJpbmcsIGFnZW50SWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuIH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBhbm5vdW5jZW1lbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFubm91bmNlbWVudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGF3YWl0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICAgICAgICAgIHsgX2lkOiBuZXcgT2JqZWN0SWQoYW5ub3VuY2VtZW50SWQpIH0sXG4gICAgICAgICAgICB7ICRhZGRUb1NldDogeyByZWFkQnk6IGFnZW50SWQgfSB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiTWFyayBhcyByZWFkIGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWRkQ29tbWVudFRvQW5ub3VuY2VtZW50KGFubm91bmNlbWVudElkOiBzdHJpbmcsIGF1dGhvcklkOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuLCBjb21tZW50PzogQ29tbWVudCB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgYXV0aG9yID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5maW5kT25lKHsgX2lkOiBuZXcgT2JqZWN0SWQoYXV0aG9ySWQpIH0pO1xuICAgICAgICBpZiAoIWF1dGhvcikgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcblxuICAgICAgICBjb25zdCBuZXdDb21tZW50OiBDb21tZW50ID0ge1xuICAgICAgICAgICAgaWQ6IG5ldyBPYmplY3RJZCgpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBhdXRob3I6IHtcbiAgICAgICAgICAgICAgICBpZDogYXV0aG9yLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIG5hbWU6IGF1dGhvci5uYW1lLFxuICAgICAgICAgICAgICAgIGF2YXRhcjogYXV0aG9yLmF2YXRhclxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBhbm5vdW5jZW1lbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFubm91bmNlbWVudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGF3YWl0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICAgICAgICAgIHsgX2lkOiBuZXcgT2JqZWN0SWQoYW5ub3VuY2VtZW50SWQpIH0sXG4gICAgICAgICAgICB7ICRwdXNoOiB7IGNvbW1lbnRzOiBuZXdDb21tZW50IH0gfVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgY29tbWVudDogbmV3Q29tbWVudCB9O1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkFkZCBjb21tZW50IGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XG4gICAgfVxufVxuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVBZ2VudFByb2ZpbGUoYWdlbnRJZDogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIGVtYWlsOiBzdHJpbmcsIHBob25lOiBzdHJpbmcsIGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U/OiBzdHJpbmc7IGFnZW50PzogQWdlbnQ7IH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBhZ2VudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWdlbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgdXBkYXRlUmVzdWx0ID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi51cGRhdGVPbmUoXG4gICAgICAgICAgICB7IF9pZDogbmV3IE9iamVjdElkKGFnZW50SWQpIH0sXG4gICAgICAgICAgICB7ICRzZXQ6IHsgbmFtZSwgZW1haWwsIHBob25lIH0gfVxuICAgICAgICApO1xuXG4gICAgICAgIGlmICh1cGRhdGVSZXN1bHQubW9kaWZpZWRDb3VudCA9PT0gMCAmJiB1cGRhdGVSZXN1bHQubWF0Y2hlZENvdW50ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBZ2VudCBub3QgZm91bmQuXCIgfTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgYWdlbnRXaXRoU3RhdHMgPSBhd2FpdCBnZXRBZ2VudHNCeUNvbXBhbnkoY29tcGFueUlkKTtcbiAgICAgICAgY29uc3QgdXBkYXRlZEFnZW50ID0gYWdlbnRXaXRoU3RhdHMuZmluZChhID0+IGEuaWQgPT09IGFnZW50SWQpO1xuXG5cbiAgICAgICAgaWYgKHVwZGF0ZWRBZ2VudCkge1xuICAgICAgICAgICAgYXdhaXQgbG9nQWN0aXZpdHkoY29tcGFueUlkLCB1cGRhdGVkQWdlbnQubmFtZSwgJ1VwZGF0ZSBQcm9maWxlJywgYFVwZGF0ZWQgYWdlbnQgcHJvZmlsZSBmb3IgJHtuYW1lfWApO1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgYWdlbnQ6IHVwZGF0ZWRBZ2VudCB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIHJldHJpZXZlIHVwZGF0ZWQgYWdlbnQuXCIgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVXBkYXRlIGFnZW50IHByb2ZpbGUgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZC5cIiB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUFnZW50UGFzc3dvcmQoYWdlbnRJZDogc3RyaW5nLCBjdXJyZW50UGFzc3dvcmQ6IHN0cmluZywgbmV3UGFzc3dvcmQ6IHN0cmluZywgY29tcGFueUlkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZTogc3RyaW5nIH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBhZ2VudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWdlbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBhZ2VudCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IF9pZDogbmV3IE9iamVjdElkKGFnZW50SWQpIH0pO1xuXG4gICAgICAgIGlmICghYWdlbnQgfHwgIWFnZW50LnBhc3N3b3JkKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBZ2VudCBub3QgZm91bmQuXCIgfTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgaXNQYXNzd29yZFZhbGlkID0gYXdhaXQgdmVyaWZ5UGFzc3dvcmQoY3VycmVudFBhc3N3b3JkLCBhZ2VudC5wYXNzd29yZCk7XG4gICAgICAgIGlmICghaXNQYXNzd29yZFZhbGlkKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJJbmNvcnJlY3QgY3VycmVudCBwYXNzd29yZC5cIiB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbmV3SGFzaGVkUGFzc3dvcmQgPSBhd2FpdCBoYXNoUGFzc3dvcmQobmV3UGFzc3dvcmQpO1xuICAgICAgICBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICAgICAgICAgIHsgX2lkOiBuZXcgT2JqZWN0SWQoYWdlbnRJZCkgfSxcbiAgICAgICAgICAgIHsgJHNldDogeyBwYXNzd29yZDogbmV3SGFzaGVkUGFzc3dvcmQgfSB9XG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICBhd2FpdCBsb2dBY3Rpdml0eShjb21wYW55SWQsIGFnZW50Lm5hbWUsICdVcGRhdGUgUGFzc3dvcmQnLCBgQ2hhbmdlZCBwYXNzd29yZGApO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBtZXNzYWdlOiBcIlBhc3N3b3JkIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5LlwiIH07XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVXBkYXRlIHBhc3N3b3JkIGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQuXCIgfTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUxvZ2luKGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkX3VudXNlZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U/OiBzdHJpbmc7IGFnZW50PzogQWdlbnQgfT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBhZ2VudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWdlbnRzQ29sbGVjdGlvbigpO1xuICAgICAgY29uc3QgYWdlbnREb2MgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBlbWFpbDogZW1haWwudG9Mb3dlckNhc2UoKSB9KTtcblxuICAgICAgaWYgKGFnZW50RG9jICYmIGFnZW50RG9jLnBhc3N3b3JkKSB7XG4gICAgICAgIGNvbnN0IGlzUGFzc3dvcmRWYWxpZCA9IGF3YWl0IHZlcmlmeVBhc3N3b3JkKHBhc3N3b3JkX3VudXNlZCwgYWdlbnREb2MucGFzc3dvcmQpO1xuICAgICAgICBpZiAoaXNQYXNzd29yZFZhbGlkKSB7XG4gICAgICAgICAgY29uc3QgeyBwYXNzd29yZCwgLi4uYWdlbnREYXRhIH0gPSBhZ2VudERvYztcbiAgICAgICAgICBjb25zdCBhZ2VudDogQWdlbnQgPSB7XG4gICAgICAgICAgICAuLi5hZ2VudERhdGEsXG4gICAgICAgICAgICBfaWQ6IGFnZW50RG9jLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgaWQ6IGFnZW50RG9jLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgY29tcGFueUlkOiBhZ2VudERvYy5jb21wYW55SWQ/LnRvU3RyaW5nKCksXG4gICAgICAgICAgfTtcbiAgICAgICAgICBhd2FpdCBsb2dBY3Rpdml0eShhZ2VudC5jb21wYW55SWQsIGFnZW50Lm5hbWUsICdMb2dpbicsIGBMb2dnZWQgaW4gc3VjY2Vzc2Z1bGx5YCk7XG4gICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgYWdlbnQ6IGFnZW50IH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkludmFsaWQgZW1haWwgb3IgcGFzc3dvcmQuXCIgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkxvZ2luIGVycm9yOlwiLCBlcnJvcik7XG4gICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJEYXRhYmFzZSBjb25uZWN0aW9uIGVycm9yLlwiIH07XG4gICAgfVxufTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUFnZW50KG5hbWU6IHN0cmluZywgZW1haWw6IHN0cmluZywgcGFzc3dvcmRfdW51c2VkOiBzdHJpbmcsIHJvbGU6IEFnZW50Um9sZSwgY29tcGFueUlkOiBzdHJpbmcsIGNyZWF0ZWRCeTogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U/OiBzdHJpbmc7IGFnZW50PzogQWdlbnQ7IH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBhZ2VudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWdlbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBleGlzdGluZ0FnZW50ID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5maW5kT25lKHsgZW1haWw6IGVtYWlsLnRvTG93ZXJDYXNlKCkgfSk7XG5cbiAgICAgICAgaWYgKGV4aXN0aW5nQWdlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFuIGFnZW50IHdpdGggdGhpcyBlbWFpbCBhbHJlYWR5IGV4aXN0cy5cIiB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaGFzaGVkUGFzc3dvcmQgPSBhd2FpdCBoYXNoUGFzc3dvcmQocGFzc3dvcmRfdW51c2VkKTtcbiAgICAgICAgY29uc3QgYXZhdGFyID0gJyc7XG5cbiAgICAgICAgY29uc3QgYWdlbnRUb0luc2VydDogT21pdDxBZ2VudCwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBlbWFpbDogZW1haWwudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgIHBhc3N3b3JkOiBoYXNoZWRQYXNzd29yZCxcbiAgICAgICAgICAgIHJvbGUsXG4gICAgICAgICAgICBhdmF0YXIsXG4gICAgICAgICAgICBwaG9uZTogJycsIFxuICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uaW5zZXJ0T25lKGFnZW50VG9JbnNlcnQgYXMgYW55KTtcblxuICAgICAgICBpZiAocmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGFnZW50c1dpdGhTdGF0cyA9IGF3YWl0IGdldEFnZW50c0J5Q29tcGFueShjb21wYW55SWQpO1xuICAgICAgICAgICAgY29uc3QgbmV3QWdlbnQgPSBhZ2VudHNXaXRoU3RhdHMuZmluZChhID0+IGEuaWQgPT09IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCkpO1xuXG4gICAgICAgICAgICBpZiAobmV3QWdlbnQpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBsb2dBY3Rpdml0eShjb21wYW55SWQsIGNyZWF0ZWRCeSwgJ0NyZWF0ZSBBZ2VudCcsIGBDcmVhdGVkIGFnZW50OiAke25hbWV9YCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgYWdlbnQ6IG5ld0FnZW50IH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIGNyZWF0ZSBhZ2VudC5cIiB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDcmVhdGUgYWdlbnQgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZCB3aGlsZSBjcmVhdGluZyB0aGUgYWdlbnQuXCIgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWxldGVBZ2VudChhZ2VudElkOiBzdHJpbmcsIGNvbXBhbnlJZD86IHN0cmluZywgZGVsZXRlZEJ5Pzogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW4sIG1lc3NhZ2U/OiBzdHJpbmcgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFnZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBZ2VudHNDb2xsZWN0aW9uKCk7XG5cbiAgICAgICAgaWYgKCFhZ2VudElkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGFnZW50SWQpKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJJbnZhbGlkIGFnZW50IElELlwiIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBhZ2VudFRvRGVsZXRlID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5maW5kT25lKHsgX2lkOiBuZXcgT2JqZWN0SWQoYWdlbnRJZCkgfSk7XG4gICAgICAgIGlmICghYWdlbnRUb0RlbGV0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQWdlbnQgbm90IGZvdW5kLlwiIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQcmV2ZW50IGRlbGV0aW5nIHRoZSBsYXN0IGFkbWluXG4gICAgICAgIGlmIChhZ2VudFRvRGVsZXRlLnJvbGUgPT09ICdhZG1pbicpIHtcbiAgICAgICAgICAgIGNvbnN0IGFkbWluQ291bnQgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmNvdW50RG9jdW1lbnRzKHsgY29tcGFueUlkOiBhZ2VudFRvRGVsZXRlLmNvbXBhbnlJZCwgcm9sZTogJ2FkbWluJyB9KTtcbiAgICAgICAgICAgIGlmIChhZG1pbkNvdW50IDw9IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJDYW5ub3QgcmVtb3ZlIHRoZSBsYXN0IGFkbWluaXN0cmF0b3IuXCIgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5kZWxldGVPbmUoeyBfaWQ6IG5ldyBPYmplY3RJZChhZ2VudElkKSB9KTtcblxuICAgICAgICBpZiAocmVzdWx0LmRlbGV0ZWRDb3VudCA9PT0gMSkge1xuICAgICAgICAgICAgaWYgKGNvbXBhbnlJZCAmJiBkZWxldGVkQnkpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBsb2dBY3Rpdml0eShjb21wYW55SWQsIGRlbGV0ZWRCeSwgJ0RlbGV0ZSBBZ2VudCcsIGBSZW1vdmVkIGFnZW50OiAke2FnZW50VG9EZWxldGUubmFtZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkZhaWxlZCB0byByZW1vdmUgYWdlbnQuXCIgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRGVsZXRlIGFnZW50IGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQuXCIgfTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZVNpZ25VcChuYW1lOiBzdHJpbmcsIGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkX3VudXNlZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U/OiBzdHJpbmc7IGFnZW50PzogQWdlbnQ7IH0+IHtcbiAgICBjb25zdCBkYiA9IGF3YWl0IGdldERiKCk7XG4gICAgY29uc3Qgc2Vzc2lvbiA9IGRiLmNsaWVudC5zdGFydFNlc3Npb24oKTtcbiAgICB0cnkge1xuICAgICAgICBsZXQgbmV3QWdlbnRSZXN1bHQ6IEFnZW50IHwgdW5kZWZpbmVkO1xuICAgICAgICBhd2FpdCBzZXNzaW9uLndpdGhUcmFuc2FjdGlvbihhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb21wYW5pZXNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q29tcGFuaWVzQ29sbGVjdGlvbigpO1xuICAgICAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nQWdlbnQgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBlbWFpbDogZW1haWwudG9Mb3dlckNhc2UoKSB9LCB7IHNlc3Npb24gfSk7XG5cbiAgICAgICAgICAgIGlmIChleGlzdGluZ0FnZW50KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQW4gYWdlbnQgd2l0aCB0aGlzIGVtYWlsIGFscmVhZHkgZXhpc3RzLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgY29tcGFueVJlc3VsdCA9IGF3YWl0IGNvbXBhbmllc0NvbGxlY3Rpb24uaW5zZXJ0T25lKHtcbiAgICAgICAgICAgICAgICBuYW1lOiBgJHtuYW1lfSdzIENvbXBhbnlgLFxuICAgICAgICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgICAgICAgICAgICBib3RwcmVzc0JvdElkOiAncGxhY2Vob2xkZXJfYm90X2lkJywgLy8gQWRkIHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAgICAgYm90cHJlc3NBcGlLZXk6ICdwbGFjZWhvbGRlcl9hcGlfa2V5JyAvLyBBZGQgcGxhY2Vob2xkZXJcbiAgICAgICAgICAgIH0sIHsgc2Vzc2lvbiB9KTtcblxuICAgICAgICAgICAgaWYgKCFjb21wYW55UmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gY3JlYXRlIGNvbXBhbnkuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY29tcGFueUlkID0gY29tcGFueVJlc3VsdC5pbnNlcnRlZElkO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBoYXNoZWRQYXNzd29yZCA9IGF3YWl0IGhhc2hQYXNzd29yZChwYXNzd29yZF91bnVzZWQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBhZ2VudFRvSW5zZXJ0OiBPbWl0PEFnZW50LCAnaWQnIHwgJ19pZCc+ID0ge1xuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgZW1haWw6IGVtYWlsLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ6IGhhc2hlZFBhc3N3b3JkLFxuICAgICAgICAgICAgICAgIHJvbGU6ICdhZG1pbicsXG4gICAgICAgICAgICAgICAgYXZhdGFyOiAnJyxcbiAgICAgICAgICAgICAgICBwaG9uZTogJycsXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBjb21wYW55SWQsXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCBhZ2VudFJlc3VsdCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uaW5zZXJ0T25lKGFnZW50VG9JbnNlcnQgYXMgYW55LCB7IHNlc3Npb24gfSk7XG5cbiAgICAgICAgICAgICBpZiAoIWFnZW50UmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gY3JlYXRlIGFkbWluIGFnZW50LlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgYXdhaXQgbG9nQWN0aXZpdHkoY29tcGFueUlkLCBuYW1lLCAnU2lnbiBVcCcsIGBDcmVhdGVkIG5ldyBjb21wYW55IGFuZCBhZG1pbiBhY2NvdW50LmApO1xuXG4gICAgICAgICAgICBjb25zdCBuZXdBZ2VudERvYyA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IF9pZDogYWdlbnRSZXN1bHQuaW5zZXJ0ZWRJZCB9LCB7IHNlc3Npb24gfSk7XG4gICAgICAgICAgICBpZiAobmV3QWdlbnREb2MpIHtcbiAgICAgICAgICAgICAgICAgY29uc3QgeyBwYXNzd29yZCwgLi4uYWdlbnREYXRhIH0gPSBuZXdBZ2VudERvYztcbiAgICAgICAgICAgICAgICAgbmV3QWdlbnRSZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgICAgIC4uLmFnZW50RGF0YSxcbiAgICAgICAgICAgICAgICAgICAgX2lkOiBuZXdBZ2VudERvYy5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IG5ld0FnZW50RG9jLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBjb21wYW55SWQ6IG5ld0FnZW50RG9jLmNvbXBhbnlJZD8udG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFuZXdBZ2VudFJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIHJldHJpZXZlIHRoZSBjcmVhdGVkIGFnZW50LlwiIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGFnZW50OiBuZXdBZ2VudFJlc3VsdCB9O1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlNpZ24gdXAgdHJhbnNhY3Rpb24gZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgLy8gQWJvcnQgdHJhbnNhY3Rpb24gb24gZXJyb3IgaWYgaXQgd2FzIHN0YXJ0ZWRcbiAgICAgICAgaWYgKHNlc3Npb24uaW5UcmFuc2FjdGlvbigpKSB7XG4gICAgICAgICAgICBhd2FpdCBzZXNzaW9uLmFib3J0VHJhbnNhY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB8fCBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHNpZ24gdXAuXCIgfTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgICBhd2FpdCBzZXNzaW9uLmVuZFNlc3Npb24oKTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFjdGl2aXR5TG9ncyhjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8QWN0aXZpdHlMb2dbXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghY29tcGFueUlkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNvbXBhbnlJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsb2dzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFjdGl2aXR5TG9nc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgbG9ncyA9IGF3YWl0IGxvZ3NDb2xsZWN0aW9uLmZpbmQoeyBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpIH0pLnNvcnQoeyB0aW1lc3RhbXA6IC0xIH0pLmxpbWl0KDUwKS50b0FycmF5KCk7XG5cbiAgICAgICAgcmV0dXJuIGxvZ3MubWFwKGxvZyA9PiAoe1xuICAgICAgICAgICAgLi4ubG9nLFxuICAgICAgICAgICAgX2lkOiBsb2cuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBpZDogbG9nLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgY29tcGFueUlkOiBsb2cuY29tcGFueUlkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICB0aW1lc3RhbXA6IGxvZy50aW1lc3RhbXAudG9JU09TdHJpbmcoKSxcbiAgICAgICAgfSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBhY3Rpdml0eSBsb2dzOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDb250YWN0c0J5Q29tcGFueShjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8VXNlcltdPiB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKCFjb21wYW55SWQgfHwgIU9iamVjdElkLmlzVmFsaWQoY29tcGFueUlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzQ29sbGVjdGlvbiA9IGF3YWl0IGdldENvbnRhY3RzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBjb250YWN0cyA9IGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi5maW5kKHsgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSB9KS50b0FycmF5KCk7XG5cbiAgICAgICAgcmV0dXJuIGNvbnRhY3RzLm1hcChjb250YWN0ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgX2lkLCBjb21wYW55SWQsIC4uLnJlc3QgfSA9IGNvbnRhY3QgYXMgYW55O1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5yZXN0LFxuICAgICAgICAgICAgICAgIF9pZDogX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgaWQ6IF9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogY29tcGFueUlkPy50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIG5vdGVzOiAoY29udGFjdC5ub3RlcyB8fCBbXSkubWFwKChub3RlOiBOb3RlKSA9PiAoe1xuICAgICAgICAgICAgICAgICAgICAuLi5ub3RlLFxuICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKG5vdGUudGltZXN0YW1wKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBjb250YWN0czpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlQ29udGFjdChuYW1lOiBzdHJpbmcsIGVtYWlsOiBzdHJpbmcsIHBob25lOiBzdHJpbmcsIGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U/OiBzdHJpbmc7IGNvbnRhY3Q/OiBVc2VyIH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjb250YWN0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRDb250YWN0c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nQ29udGFjdCA9IGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi5maW5kT25lKHsgZW1haWw6IGVtYWlsLnRvTG93ZXJDYXNlKCksIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkgfSk7XG4gICAgICAgIGlmIChleGlzdGluZ0NvbnRhY3QpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkEgY29udGFjdCB3aXRoIHRoaXMgZW1haWwgYWxyZWFkeSBleGlzdHMuXCIgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvbnRhY3RUb0luc2VydDogT21pdDxVc2VyLCAnaWQnIHwgJ19pZCc+ID0ge1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGVtYWlsOiBlbWFpbC50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgcGhvbmUsXG4gICAgICAgICAgICBhdmF0YXI6ICcnLFxuICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSxcbiAgICAgICAgICAgIG5vdGVzOiBbXSxcbiAgICAgICAgICAgIG9ubGluZTogZmFsc2UsXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udGFjdHNDb2xsZWN0aW9uLmluc2VydE9uZShjb250YWN0VG9JbnNlcnQgYXMgYW55KTtcbiAgICAgICAgXG4gICAgICAgIGlmIChyZXN1bHQuaW5zZXJ0ZWRJZCkge1xuICAgICAgICAgICAgY29uc3QgbmV3Q29udGFjdDogVXNlciA9IHtcbiAgICAgICAgICAgICAgICAuLi4oY29udGFjdFRvSW5zZXJ0IGFzIE9taXQ8VXNlciwgJ19pZCd8J2lkJz4pLFxuICAgICAgICAgICAgICAgIF9pZDogcmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBpZDogcmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgY29udGFjdDogbmV3Q29udGFjdCB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIGNyZWF0ZSBjb250YWN0LlwiIH07XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQ3JlYXRlIGNvbnRhY3QgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZC5cIiB9O1xuICAgIH1cbn1cblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYXNzaWduQWdlbnRUb0NvbnRhY3QoY29udGFjdElkOiBzdHJpbmcsIGFnZW50SWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuIH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjb250YWN0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRDb250YWN0c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgYXdhaXQgY29udGFjdHNDb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICAgICAgICAgIHsgX2lkOiBuZXcgT2JqZWN0SWQoY29udGFjdElkKSB9LFxuICAgICAgICAgICAgeyAkc2V0OiB7IGFzc2lnbmVkQWdlbnRJZDogYWdlbnRJZCB9IH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhc3NpZ25pbmcgYWdlbnQ6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhZGROb3RlVG9Db250YWN0KGNvbnRhY3RJZDogc3RyaW5nLCBhZ2VudElkOiBzdHJpbmcsIGFnZW50TmFtZTogc3RyaW5nLCB0ZXh0OiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbm90ZT86IE5vdGUgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzQ29sbGVjdGlvbiA9IGF3YWl0IGdldENvbnRhY3RzQ29sbGVjdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgbmV3Tm90ZTogTm90ZSA9IHtcbiAgICAgICAgICAgIGlkOiBuZXcgT2JqZWN0SWQoKS50b1N0cmluZygpLFxuICAgICAgICAgICAgYWdlbnRJZCxcbiAgICAgICAgICAgIGFnZW50TmFtZSxcbiAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi51cGRhdGVPbmUoXG4gICAgICAgICAgICB7IF9pZDogbmV3IE9iamVjdElkKGNvbnRhY3RJZCkgfSxcbiAgICAgICAgICAgIHsgJHB1c2g6IHsgbm90ZXM6IHsgJGVhY2g6IFtuZXdOb3RlXSwgJHBvc2l0aW9uOiAwIH0gfSB9XG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICBpZiAocmVzdWx0Lm1vZGlmaWVkQ291bnQgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBub3RlOiBuZXdOb3RlIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWRkaW5nIG5vdGU6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXROb3Rlc0ZvckNvbnRhY3QoY29udGFjdElkOiBzdHJpbmcpOiBQcm9taXNlPE5vdGVbXT4ge1xuICAgICB0cnkge1xuICAgICAgICBpZiAoIWNvbnRhY3RJZCB8fCAhT2JqZWN0SWQuaXNWYWxpZChjb250YWN0SWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29udGFjdHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q29udGFjdHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGNvbnRhY3QgPSBhd2FpdCBjb250YWN0c0NvbGxlY3Rpb24uZmluZE9uZSh7IF9pZDogbmV3IE9iamVjdElkKGNvbnRhY3RJZCkgfSk7XG4gICAgICAgIHJldHVybiAoY29udGFjdD8ubm90ZXMgfHwgW10pLm1hcCgobm90ZTogTm90ZSkgPT4gKHtcbiAgICAgICAgICAgIC4uLm5vdGUsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKG5vdGUudGltZXN0YW1wKS50b0lTT1N0cmluZygpLFxuICAgICAgICB9KSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIG5vdGVzOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDaGF0c0J5Q29tcGFueShjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8Q2hhdFtdPiB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKCFjb21wYW55SWQgfHwgIU9iamVjdElkLmlzVmFsaWQoY29tcGFueUlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNoYXRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldENoYXRzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBjaGF0cyA9IGF3YWl0IGNoYXRzQ29sbGVjdGlvbi5hZ2dyZWdhdGUoW1xuICAgICAgICAgICAgeyAkbWF0Y2g6IHsgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSB9IH0sXG4gICAgICAgICAgICB7ICRzb3J0OiB7IHRpbWVzdGFtcDogLTEgfSB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICRsb29rdXA6IHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogJ2NvbnRhY3RzJyxcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxGaWVsZDogJ3VzZXJJZCcsXG4gICAgICAgICAgICAgICAgICAgIGZvcmVpZ25GaWVsZDogJ19pZCcsXG4gICAgICAgICAgICAgICAgICAgIGFzOiAndXNlcidcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyAkdW53aW5kOiAnJHVzZXInIH1cbiAgICAgICAgXSkudG9BcnJheSgpO1xuXG4gICAgICAgIHJldHVybiBjaGF0cy5tYXAoY2hhdCA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IF9pZCwgY29tcGFueUlkLCB1c2VySWQsIC4uLnJlc3QgfSA9IGNoYXQgYXMgYW55O1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5yZXN0LFxuICAgICAgICAgICAgICAgIF9pZDogX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgaWQ6IF9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogY29tcGFueUlkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgdXNlcklkOiB1c2VySWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlczogW10sIC8vIE1lc3NhZ2VzIHdpbGwgYmUgbGF6eS1sb2FkZWRcbiAgICAgICAgICAgICAgICB1c2VyOiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLmNoYXQudXNlcixcbiAgICAgICAgICAgICAgICAgICAgX2lkOiBjaGF0LnVzZXIuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIGlkOiBjaGF0LnVzZXIuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogY2hhdC51c2VyLmNvbXBhbnlJZCA/IGNoYXQudXNlci5jb21wYW55SWQudG9TdHJpbmcoKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgY2hhdHMgYnkgY29tcGFueTpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TWVzc2FnZXNGb3JDaGF0KGNoYXRJZDogc3RyaW5nKTogUHJvbWlzZTxNZXNzYWdlW10+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIWNoYXRJZCB8fCAhT2JqZWN0SWQuaXNWYWxpZChjaGF0SWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVzc2FnZXNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0TWVzc2FnZXNDb2xsZWN0aW9uKCk7XG4gICAgICAgIC8vIEFsc28gZmV0Y2ggc2VuZGVyIGRldGFpbHMgaWYgaXQncyBhIHVzZXIsIG5vdCBhbiBhZ2VudCAoJ21lJylcbiAgICAgICAgY29uc3QgbWVzc2FnZXMgPSBhd2FpdCBtZXNzYWdlc0NvbGxlY3Rpb24uYWdncmVnYXRlKFtcbiAgICAgICAgICAgIHsgJG1hdGNoOiB7IGNoYXRJZDogbmV3IE9iamVjdElkKGNoYXRJZCkgfSB9LFxuICAgICAgICAgICAgeyAkc29ydDogeyB0aW1lc3RhbXA6IDEgfSB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICRsb29rdXA6IHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogJ2NvbnRhY3RzJyxcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxGaWVsZDogJ3NlbmRlcklkJyxcbiAgICAgICAgICAgICAgICAgICAgZm9yZWlnbkZpZWxkOiAnX2lkJyxcbiAgICAgICAgICAgICAgICAgICAgYXM6ICdzZW5kZXJJbmZvJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXSkudG9BcnJheSgpO1xuXG4gICAgICAgIHJldHVybiBtZXNzYWdlcy5tYXAobXNnID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgX2lkLCBjaGF0SWQsIHNlbmRlcklkLCBzZW5kZXJJbmZvLCAuLi5yZXN0IH0gPSBtc2cgYXMgYW55O1xuICAgICAgICAgICAgY29uc3Qgc2VuZGVyID0gbXNnLnNlbmRlciA9PT0gJ21lJyA/ICdtZScgOiAoc2VuZGVySW5mb1swXSB8fCBudWxsKTtcblxuICAgICAgICAgICAgaWYgKHNlbmRlciAmJiBzZW5kZXIgIT09ICdtZScpIHtcbiAgICAgICAgICAgICAgICBzZW5kZXIuaWQgPSBzZW5kZXIuX2lkLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgICAgICAgICBpZDogX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgc2VuZGVyLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIG1lc3NhZ2VzOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZW5kTWVzc2FnZShjaGF0SWQ6IHN0cmluZywgdGV4dDogc3RyaW5nLCBhZ2VudElkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbmV3TWVzc2FnZT86IE1lc3NhZ2UgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzQ29sbGVjdGlvbiA9IGF3YWl0IGdldE1lc3NhZ2VzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBjaGF0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRDaGF0c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGNvbnN0IG5ld01lc3NhZ2VUb0luc2VydDogT21pdDxNZXNzYWdlLCAnaWQnIHwgJ19pZCc+ID0ge1xuICAgICAgICAgICAgY2hhdElkOiBuZXcgT2JqZWN0SWQoY2hhdElkKSxcbiAgICAgICAgICAgIHNlbmRlcjogJ21lJywgLy8gJ21lJyBkZW5vdGVzIHRoZSBhZ2VudFxuICAgICAgICAgICAgc2VuZGVySWQ6IG5ldyBPYmplY3RJZChhZ2VudElkKSxcbiAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IHRpbWVzdGFtcC50b0lTT1N0cmluZygpLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG1lc3NhZ2VzQ29sbGVjdGlvbi5pbnNlcnRPbmUobmV3TWVzc2FnZVRvSW5zZXJ0IGFzIGFueSk7XG5cbiAgICAgICAgaWYgKHJlc3VsdC5pbnNlcnRlZElkKSB7XG4gICAgICAgICAgICBhd2FpdCBjaGF0c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgICAgIHsgX2lkOiBuZXcgT2JqZWN0SWQoY2hhdElkKSB9LFxuICAgICAgICAgICAgICAgIHsgJHNldDogeyBsYXN0TWVzc2FnZTogdGV4dCwgdGltZXN0YW1wOiB0aW1lc3RhbXAudG9Mb2NhbGVUaW1lU3RyaW5nKFtdLCB7IGhvdXI6ICcyLWRpZ2l0JywgbWludXRlOiAnMi1kaWdpdCcgfSkgfSB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBmaW5hbE5ld01lc3NhZ2U6IE1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgICAgLi4uKG5ld01lc3NhZ2VUb0luc2VydCBhcyBPbWl0PE1lc3NhZ2UsICdfaWQnfCdpZCc+KSxcbiAgICAgICAgICAgICAgICBfaWQ6IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgaWQ6IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY2hhdElkOiBuZXdNZXNzYWdlVG9JbnNlcnQuY2hhdElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgc2VuZGVySWQ6IG5ld01lc3NhZ2VUb0luc2VydC5zZW5kZXJJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIHsgXG4gICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSwgXG4gICAgICAgICAgICAgICAgbmV3TWVzc2FnZTogZmluYWxOZXdNZXNzYWdlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHNlbmRpbmcgbWVzc2FnZTpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNldENoYXRib3RTdGF0dXMoY2hhdElkOiBzdHJpbmcsIGlzQWN0aXZlOiBib29sZWFuKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW4gfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNoYXRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldENoYXRzQ29sbGVjdGlvbigpO1xuICAgICAgICBhd2FpdCBjaGF0c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChjaGF0SWQpIH0sXG4gICAgICAgICAgICB7ICRzZXQ6IHsgaXNDaGF0Ym90QWN0aXZlOiBpc0FjdGl2ZSB9IH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBzZXR0aW5nIGNoYXRib3Qgc3RhdHVzOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RhcnROZXdDaGF0cyh1c2VyczogVXNlcltdLCBtZXNzYWdlOiBzdHJpbmcsIGNvbXBhbnlJZDogc3RyaW5nLCBhZ2VudElkOiBzdHJpbmcpOiBQcm9taXNlPENoYXRbXT4ge1xuICAgIGNvbnN0IGNoYXRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldENoYXRzQ29sbGVjdGlvbigpO1xuICAgIGNvbnN0IG5ld09yVXBkYXRlZENoYXRzOiBDaGF0W10gPSBbXTtcblxuICAgIGZvciAoY29uc3QgdXNlciBvZiB1c2Vycykge1xuICAgICAgICBjb25zdCBleGlzdGluZ0NoYXREb2MgPSBhd2FpdCBjaGF0c0NvbGxlY3Rpb24uZmluZE9uZSh7XG4gICAgICAgICAgICB1c2VySWQ6IG5ldyBPYmplY3RJZCh1c2VyLmlkKSxcbiAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZClcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGV4aXN0aW5nQ2hhdERvYykge1xuICAgICAgICAgICAgYXdhaXQgc2VuZE1lc3NhZ2UoZXhpc3RpbmdDaGF0RG9jLl9pZC50b1N0cmluZygpLCBtZXNzYWdlLCBhZ2VudElkKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgdXBkYXRlZENoYXQ6IENoYXQgPSB7XG4gICAgICAgICAgICAgICAgLi4uKGV4aXN0aW5nQ2hhdERvYyBhcyBhbnkpLFxuICAgICAgICAgICAgICAgIF9pZDogZXhpc3RpbmdDaGF0RG9jLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiBleGlzdGluZ0NoYXREb2MuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgdXNlcklkOiBleGlzdGluZ0NoYXREb2MudXNlcklkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBleGlzdGluZ0NoYXREb2MuY29tcGFueUlkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgbGFzdE1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvTG9jYWxlVGltZVN0cmluZyhbXSwgeyBob3VyOiAnMi1kaWdpdCcsIG1pbnV0ZTogJzItZGlnaXQnIH0pLFxuICAgICAgICAgICAgICAgIHVzZXI6IHVzZXIsXG4gICAgICAgICAgICAgICAgbWVzc2FnZXM6IFtdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG5ld09yVXBkYXRlZENoYXRzLnB1c2godXBkYXRlZENoYXQpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgY29uc3QgbmV3Q2hhdERhdGE6IE9taXQ8Q2hhdCwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgICAgICB1c2VySWQ6IG5ldyBPYmplY3RJZCh1c2VyLmlkKSxcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpLFxuICAgICAgICAgICAgICAgIGxhc3RNZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogdGltZXN0YW1wLnRvTG9jYWxlVGltZVN0cmluZyhbXSwgeyBob3VyOiAnMi1kaWdpdCcsIG1pbnV0ZTogJzItZGlnaXQnIH0pLFxuICAgICAgICAgICAgICAgIHVucmVhZENvdW50OiAwLFxuICAgICAgICAgICAgICAgIHByaW9yaXR5OiAnbm9ybWFsJyxcbiAgICAgICAgICAgICAgICBjaGFubmVsOiAnV2ViY2hhdCcsXG4gICAgICAgICAgICAgICAgaXNDaGF0Ym90QWN0aXZlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlczogW11cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBjaGF0UmVzdWx0ID0gYXdhaXQgY2hhdHNDb2xsZWN0aW9uLmluc2VydE9uZShuZXdDaGF0RGF0YSBhcyBhbnkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoY2hhdFJlc3VsdC5pbnNlcnRlZElkKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgc2VuZE1lc3NhZ2UoY2hhdFJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksIG1lc3NhZ2UsIGFnZW50SWQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNyZWF0ZWRDaGF0OiBDaGF0ID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi4obmV3Q2hhdERhdGEgYXMgYW55KSxcbiAgICAgICAgICAgICAgICAgICAgX2lkOiBjaGF0UmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGNoYXRSZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICB1c2VySWQ6IG5ld0NoYXREYXRhLnVzZXJJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBjb21wYW55SWQ6IG5ld0NoYXREYXRhLmNvbXBhbnlJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICB1c2VyOiB1c2VyLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlczogW10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBuZXdPclVwZGF0ZWRDaGF0cy5wdXNoKGNyZWF0ZWRDaGF0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3T3JVcGRhdGVkQ2hhdHM7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVDYW1wYWlnbihkYXRhOiBQYXJ0aWFsPENhbXBhaWduPiAmIHsgc2NoZWR1bGVUeXBlPzogJ25vdycgfCAnbGF0ZXInIH0sIGNvbXBhbnlJZDogc3RyaW5nLCBhZ2VudElkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgY2FtcGFpZ24/OiBDYW1wYWlnbjsgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNhbXBhaWduc0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRDYW1wYWlnbnNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzQ29sbGVjdGlvbiA9IGF3YWl0IGdldENvbnRhY3RzQ29sbGVjdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgbGV0IHN0YXR1czogQ2FtcGFpZ25bJ3N0YXR1cyddID0gJ0RyYWZ0JztcbiAgICAgICAgbGV0IHNlbnRBdDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgZGVsaXZlcnkgPSAwO1xuICAgICAgICBsZXQgZW5nYWdlbWVudCA9IDA7XG4gICAgICAgIGxldCBjb252ZXJzaW9uID0gMDtcblxuICAgICAgICBpZiAoZGF0YS5zY2hlZHVsZVR5cGUgPT09ICdub3cnKSB7XG4gICAgICAgICAgICBzdGF0dXMgPSAnQ29tcGxldGVkJztcbiAgICAgICAgICAgIHNlbnRBdCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgIC8vIEdlbmVyYXRlIG1vY2sgcGVyZm9ybWFuY2UgZGF0YSBmb3IgaW1tZWRpYXRlIGNhbXBhaWduc1xuICAgICAgICAgICAgZGVsaXZlcnkgPSA5NSArIE1hdGgucmFuZG9tKCkgKiA1OyBcbiAgICAgICAgICAgIGVuZ2FnZW1lbnQgPSAxMCArIE1hdGgucmFuZG9tKCkgKiAxNTtcbiAgICAgICAgICAgIGNvbnZlcnNpb24gPSAyICsgTWF0aC5yYW5kb20oKSAqIDg7IFxuXG4gICAgICAgICAgICAvLyBBY3R1YWxseSBzZW5kIHRoZSBtZXNzYWdlc1xuICAgICAgICAgICAgaWYgKGRhdGEuYXVkaWVuY2UgJiYgZGF0YS5tZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXVkaWVuY2VDb250YWN0cyA9IGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi5maW5kKHsgX2lkOiB7ICRpbjogZGF0YS5hdWRpZW5jZS5tYXAoaWQgPT4gbmV3IE9iamVjdElkKGlkKSkgfSB9KS50b0FycmF5KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdXNlcnMgPSBhdWRpZW5jZUNvbnRhY3RzLm1hcChjID0+ICh7XG4gICAgICAgICAgICAgICAgICAgIC4uLmMsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBjLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBfaWQ6IGMuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgfSkpIGFzIFVzZXJbXTtcblxuICAgICAgICAgICAgICAgIGF3YWl0IHN0YXJ0TmV3Q2hhdHModXNlcnMsIGRhdGEubWVzc2FnZSwgY29tcGFueUlkLCBhZ2VudElkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChkYXRhLnNjaGVkdWxlVHlwZSA9PT0gJ2xhdGVyJykge1xuICAgICAgICAgICAgc3RhdHVzID0gJ1NjaGVkdWxlZCc7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBuZXdDYW1wYWlnbjogT21pdDxDYW1wYWlnbiwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgIHRpdGxlOiBkYXRhLnRpdGxlISxcbiAgICAgICAgICAgIHR5cGU6IGRhdGEudHlwZSB8fCAnQnJvYWRjYXN0JyxcbiAgICAgICAgICAgIHN0YXR1czogc3RhdHVzLFxuICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSxcbiAgICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgYXVkaWVuY2U6IGRhdGEuYXVkaWVuY2UgfHwgW10sXG4gICAgICAgICAgICBtZXNzYWdlOiBkYXRhLm1lc3NhZ2UgfHwgXCJcIixcbiAgICAgICAgICAgIHNlbnRBdDogc2VudEF0LFxuICAgICAgICAgICAgZGVsaXZlcnksXG4gICAgICAgICAgICBlbmdhZ2VtZW50LFxuICAgICAgICAgICAgY29udmVyc2lvbixcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjYW1wYWlnbnNDb2xsZWN0aW9uLmluc2VydE9uZShuZXdDYW1wYWlnbiBhcyBhbnkpO1xuICAgICAgICBpZiAocmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNyZWF0ZWRDYW1wYWlnbjogQ2FtcGFpZ24gPSB7XG4gICAgICAgICAgICAgICAgLi4ubmV3Q2FtcGFpZ24sXG4gICAgICAgICAgICAgICAgX2lkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBjYW1wYWlnbjogY3JlYXRlZENhbXBhaWduIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIGNyZWF0ZSBjYW1wYWlnbi5cIiB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDcmVhdGUgY2FtcGFpZ24gZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZC5cIiB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENhbXBhaWduc0J5Q29tcGFueShjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8Q2FtcGFpZ25bXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghY29tcGFueUlkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNvbXBhbnlJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjYW1wYWlnbnNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q2FtcGFpZ25zQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBjYW1wYWlnbnMgPSBhd2FpdCBjYW1wYWlnbnNDb2xsZWN0aW9uLmZpbmQoeyBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpIH0pLnNvcnQoeyBjcmVhdGVkQXQ6IC0xIH0pLnRvQXJyYXkoKTtcblxuICAgICAgICByZXR1cm4gY2FtcGFpZ25zLm1hcChjYW1wYWlnbiA9PiAoe1xuICAgICAgICAgICAgLi4uY2FtcGFpZ24sXG4gICAgICAgICAgICBfaWQ6IGNhbXBhaWduLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgaWQ6IGNhbXBhaWduLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgY29tcGFueUlkOiBjYW1wYWlnbi5jb21wYW55SWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoY2FtcGFpZ24uY3JlYXRlZEF0KS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgc2VudEF0OiBjYW1wYWlnbi5zZW50QXQgPyBuZXcgRGF0ZShjYW1wYWlnbi5zZW50QXQpLnRvSVNPU3RyaW5nKCkgOiB1bmRlZmluZWQsXG4gICAgICAgIH0pKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgY2FtcGFpZ25zOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbXBvcnRDb250YWN0c0Zyb21DU1YoY29udGFjdHNEYXRhOiB7IG5hbWU6IHN0cmluZzsgZW1haWw6IHN0cmluZzsgcGhvbmU6IHN0cmluZyB9W10sIGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U6IHN0cmluZzsgbmV3Q29udGFjdHM6IFVzZXJbXTsgaW1wb3J0ZWRDb3VudDogbnVtYmVyOyBza2lwcGVkQ291bnQ6IG51bWJlcjsgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzQ29sbGVjdGlvbiA9IGF3YWl0IGdldENvbnRhY3RzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBuZXdDb250YWN0czogVXNlcltdID0gW107XG4gICAgICAgIGxldCBpbXBvcnRlZENvdW50ID0gMDtcbiAgICAgICAgbGV0IHNraXBwZWRDb3VudCA9IDA7XG5cbiAgICAgICAgY29uc3QgY29tcGFueU9iaklkID0gbmV3IE9iamVjdElkKGNvbXBhbnlJZCk7XG5cbiAgICAgICAgZm9yIChjb25zdCBjb250YWN0IG9mIGNvbnRhY3RzRGF0YSkge1xuICAgICAgICAgICAgbGV0IGV4aXN0aW5nQ29udGFjdCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoY29udGFjdC5lbWFpbCkge1xuICAgICAgICAgICAgICAgIGV4aXN0aW5nQ29udGFjdCA9IGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi5maW5kT25lKHtcbiAgICAgICAgICAgICAgICAgICAgZW1haWw6IGNvbnRhY3QuZW1haWwudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGFueUlkOiBjb21wYW55T2JqSWRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGV4aXN0aW5nQ29udGFjdCkge1xuICAgICAgICAgICAgICAgIHNraXBwZWRDb3VudCsrO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBjb250YWN0VG9JbnNlcnQ6IE9taXQ8VXNlciwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBjb250YWN0Lm5hbWUsXG4gICAgICAgICAgICAgICAgZW1haWw6IGNvbnRhY3QuZW1haWwudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICAgICBwaG9uZTogY29udGFjdC5waG9uZSxcbiAgICAgICAgICAgICAgICBhdmF0YXI6ICcnLFxuICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogY29tcGFueU9iaklkLFxuICAgICAgICAgICAgICAgIG5vdGVzOiBbXSxcbiAgICAgICAgICAgICAgICBvbmxpbmU6IGZhbHNlLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udGFjdHNDb2xsZWN0aW9uLmluc2VydE9uZShjb250YWN0VG9JbnNlcnQgYXMgYW55KTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQuaW5zZXJ0ZWRJZCkge1xuICAgICAgICAgICAgICAgIGltcG9ydGVkQ291bnQrKztcbiAgICAgICAgICAgICAgICBuZXdDb250YWN0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgLi4uKGNvbnRhY3RUb0luc2VydCBhcyBPbWl0PFVzZXIsICdpZCcgfCAnX2lkJz4pLFxuICAgICAgICAgICAgICAgICAgICBfaWQ6IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIGlkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBjb21wYW55SWQ6IGNvbXBhbnlJZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgbWVzc2FnZTogYEltcG9ydCBjb21wbGV0ZS4gQWRkZWQgJHtpbXBvcnRlZENvdW50fSBuZXcgY29udGFjdHMsIHNraXBwZWQgJHtza2lwcGVkQ291bnR9IGR1cGxpY2F0ZXMuYCxcbiAgICAgICAgICAgIG5ld0NvbnRhY3RzLFxuICAgICAgICAgICAgaW1wb3J0ZWRDb3VudCxcbiAgICAgICAgICAgIHNraXBwZWRDb3VudFxuICAgICAgICB9O1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkNTViBpbXBvcnQgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZCBkdXJpbmcgaW1wb3J0LlwiLCBuZXdDb250YWN0czogW10sIGltcG9ydGVkQ291bnQ6IDAsIHNraXBwZWRDb3VudDogMCB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUFnZW50QXZhdGFyKGFnZW50SWQ6IHN0cmluZywgYXZhdGFyOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgYXZhdGFyPzogc3RyaW5nOyB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHVwZGF0ZVJlc3VsdCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChhZ2VudElkKSB9LFxuICAgICAgICAgICAgeyAkc2V0OiB7IGF2YXRhciB9IH1cbiAgICAgICAgKTtcblxuICAgICAgICBpZiAodXBkYXRlUmVzdWx0Lm1vZGlmaWVkQ291bnQgPT09IDAgJiYgdXBkYXRlUmVzdWx0Lm1hdGNoZWRDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQWdlbnQgbm90IGZvdW5kLlwiIH07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIExvZyBhY3Rpdml0eVxuICAgICAgICBjb25zdCBhZ2VudCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IF9pZDogbmV3IE9iamVjdElkKGFnZW50SWQpIH0pO1xuICAgICAgICBpZiAoYWdlbnQpIHtcbiAgICAgICAgICAgICBhd2FpdCBsb2dBY3Rpdml0eShhZ2VudC5jb21wYW55SWQsIGFnZW50Lm5hbWUsICdVcGRhdGUgUHJvZmlsZScsIGBVcGRhdGVkIHByb2ZpbGUgcGljdHVyZWApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgYXZhdGFyOiBhdmF0YXIgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVXBkYXRlIGFnZW50IGF2YXRhciBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkLlwiIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2NoZWR1bGVBbmFseXRpY3NSZXBvcnQoZW1haWw6IHN0cmluZywgZnJlcXVlbmN5OiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZTogc3RyaW5nOyB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gSW4gYSByZWFsIGFwcGxpY2F0aW9uLCB5b3Ugd291bGQgY29ubmVjdCB0byBhIGpvYiBzY2hlZHVsZXIgKGUuZy4sIEJ1bGxNUSwgY3JvbilcbiAgICAgICAgLy8gYW5kIHF1ZXVlIGEgam9iIHRvIHNlbmQgYW4gZW1haWwgcmVwb3J0IGJhc2VkIG9uIHRoZSBmcmVxdWVuY3kuXG4gICAgICAgIC8vIEZvciB0aGlzIGRlbW8sIHdlJ2xsIGp1c3QgbG9nIGl0IHRvIHRoZSBjb25zb2xlLlxuICAgICAgICBjb25zb2xlLmxvZyhgQW5hbHl0aWNzIHJlcG9ydCBzY2hlZHVsZWQgZm9yICR7ZW1haWx9IHdpdGggZnJlcXVlbmN5OiAke2ZyZXF1ZW5jeX1gKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFlvdSBjb3VsZCBhbHNvIGxvZyB0aGlzIGFzIGEgc3lzdGVtIGFjdGl2aXR5XG4gICAgICAgIC8vIGF3YWl0IGxvZ0FjdGl2aXR5KGNvbXBhbnlJZCwgJ1N5c3RlbScsICdTY2hlZHVsZSBSZXBvcnQnLCBgQW5hbHl0aWNzIHJlcG9ydCBzY2hlZHVsZWQgZm9yICR7ZW1haWx9ICgke2ZyZXF1ZW5jeX0pYCk7XG5cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgbWVzc2FnZTogYFJlcG9ydCBzdWNjZXNzZnVsbHkgc2NoZWR1bGVkIGZvciAke2VtYWlsfS5gIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlNjaGVkdWxlIHJlcG9ydCBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIHdoaWxlIHNjaGVkdWxpbmcgdGhlIHJlcG9ydC5cIiB9O1xuICAgIH1cbn1cbiAgICBcblxuICAgIFxuXG4gICAgXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjhSQWlxQnNCIn0=
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:fb5d01 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"70550f3a06ff63d8c1c6555f235fca6dc7330a34c0":"sendMessage"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "sendMessage": (()=>sendMessage)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var sendMessage = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("70550f3a06ff63d8c1c6555f235fca6dc7330a34c0", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "sendMessage"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:f703a8 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"609d4f76fb496a216c91066f2d4684c160f7fd02a4":"setChatbotStatus"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "setChatbotStatus": (()=>setChatbotStatus)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var setChatbotStatus = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("609d4f76fb496a216c91066f2d4684c160f7fd02a4", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "setChatbotStatus"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:5be53a [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"78e1313773a3e1763f3457daecfd448d9fb5a79106":"startNewChats"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "startNewChats": (()=>startNewChats)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var startNewChats = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("78e1313773a3e1763f3457daecfd448d9fb5a79106", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "startNewChats"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:bc440b [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40ddb22e27e4cef48e6f8b4f4548db5d5d7b59d98c":"getContactsByCompany"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getContactsByCompany": (()=>getContactsByCompany)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var getContactsByCompany = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("40ddb22e27e4cef48e6f8b4f4548db5d5d7b59d98c", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getContactsByCompany"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:a85233 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"780997e968e3cabe30367154f3b8d33efe060f51bd":"addNoteToContact"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "addNoteToContact": (()=>addNoteToContact)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var addNoteToContact = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("780997e968e3cabe30367154f3b8d33efe060f51bd", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "addNoteToContact"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:488203 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"60baf496c3062efe4fd326c7af2943c2196e029cce":"assignAgentToContact"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "assignAgentToContact": (()=>assignAgentToContact)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var assignAgentToContact = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("60baf496c3062efe4fd326c7af2943c2196e029cce", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "assignAgentToContact"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:3ddb12 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"4087786a1113f54129434f2a7816d4f589ebf1b846":"getAgentsByCompany"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getAgentsByCompany": (()=>getAgentsByCompany)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var getAgentsByCompany = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("4087786a1113f54129434f2a7816d4f589ebf1b846", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getAgentsByCompany"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:ff5219 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"60d072bc1975e4e5f878dc1c3a7bbba30e68a6f871":"importContactsFromCSV"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "importContactsFromCSV": (()=>importContactsFromCSV)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var importContactsFromCSV = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("60d072bc1975e4e5f878dc1c3a7bbba30e68a6f871", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "importContactsFromCSV"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:3b57ca [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"783b92989339fb5b73f8cf537b1cd9811ad31c6bdf":"createContact"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "createContact": (()=>createContact)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var createContact = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("783b92989339fb5b73f8cf537b1cd9811ad31c6bdf", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "createContact"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:4a4e6e [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"703df0e88d6b7f31da31805fe7c8d53353df7e0ee2":"deleteAgent"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "deleteAgent": (()=>deleteAgent)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var deleteAgent = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("703df0e88d6b7f31da31805fe7c8d53353df7e0ee2", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "deleteAgent"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:1193b1 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"404d8f1b9c2cd44e439a3f4dba37f710171ff8f88b":"getActivityLogs"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getActivityLogs": (()=>getActivityLogs)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var getActivityLogs = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("404d8f1b9c2cd44e439a3f4dba37f710171ff8f88b", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getActivityLogs"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:976ef4 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"7c4c24e8dc61bef49f2c2f8a8acc71b5dd4ffb33e3":"updateAgentProfile"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "updateAgentProfile": (()=>updateAgentProfile)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var updateAgentProfile = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("7c4c24e8dc61bef49f2c2f8a8acc71b5dd4ffb33e3", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "updateAgentProfile"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:ca4bd0 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"60f2354c630933e8cfbda63a32de99ef4c111b10e4":"scheduleAnalyticsReport"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "scheduleAnalyticsReport": (()=>scheduleAnalyticsReport)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var scheduleAnalyticsReport = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("60f2354c630933e8cfbda63a32de99ef4c111b10e4", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "scheduleAnalyticsReport"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:64403d [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40ff6278859af3f524ec2ac84e79db5390255a1668":"createAnnouncement"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "createAnnouncement": (()=>createAnnouncement)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var createAnnouncement = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("40ff6278859af3f524ec2ac84e79db5390255a1668", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "createAnnouncement"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:1a7119 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"409b841e613ce80e5c40df0364f6df47d80421d363":"getAnnouncementsByCompany"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getAnnouncementsByCompany": (()=>getAnnouncementsByCompany)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var getAnnouncementsByCompany = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("409b841e613ce80e5c40df0364f6df47d80421d363", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getAnnouncementsByCompany"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:3cf39d [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"60daecd654edd9aad0f66818f3643edb5b83926f6b":"markAnnouncementAsRead"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "markAnnouncementAsRead": (()=>markAnnouncementAsRead)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var markAnnouncementAsRead = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("60daecd654edd9aad0f66818f3643edb5b83926f6b", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "markAnnouncementAsRead"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:2f0c5d [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"70fcfed8bffc4caf060f93474e4a8996b303b4b0fc":"addCommentToAnnouncement"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "addCommentToAnnouncement": (()=>addCommentToAnnouncement)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var addCommentToAnnouncement = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("70fcfed8bffc4caf060f93474e4a8996b303b4b0fc", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "addCommentToAnnouncement"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:1ec551 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"602c899fcfd2f9f3ff717cf7b6992bb14c9e5acee8":"updateAgentAvatar"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "updateAgentAvatar": (()=>updateAgentAvatar)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var updateAgentAvatar = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("602c899fcfd2f9f3ff717cf7b6992bb14c9e5acee8", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "updateAgentAvatar"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:86898f [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"7802a2a3c0c2bb253b917e951020eb8b5beaa029c6":"updateAgentPassword"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "updateAgentPassword": (()=>updateAgentPassword)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var updateAgentPassword = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("7802a2a3c0c2bb253b917e951020eb8b5beaa029c6", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "updateAgentPassword"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:3c0b55 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40038480f4f658c87505338e9dcd7c2a9a8544e267":"getCampaignsByCompany"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getCampaignsByCompany": (()=>getCampaignsByCompany)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var getCampaignsByCompany = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("40038480f4f658c87505338e9dcd7c2a9a8544e267", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getCampaignsByCompany"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:feb57b [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"70a879e7bd08c30d234a83e75003b58f7cb4bfd128":"createCampaign"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "createCampaign": (()=>createCampaign)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var createCampaign = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("70a879e7bd08c30d234a83e75003b58f7cb4bfd128", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "createCampaign"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:24d232 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"6049a27b16f34690f84c6af4f9a048cb3293c23e61":"handleLogin"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "handleLogin": (()=>handleLogin)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var handleLogin = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("6049a27b16f34690f84c6af4f9a048cb3293c23e61", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "handleLogin"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:7e6c78 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"70780065eead8858964f97f44aaa44c48f608e84ba":"handleSignUp"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "handleSignUp": (()=>handleSignUp)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var handleSignUp = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("70780065eead8858964f97f44aaa44c48f608e84ba", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "handleSignUp"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/page.tsx [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>Home)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/jsx-dev-runtime.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$chat$2d$layout$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/chat-layout.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$vertical$2d$nav$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/vertical-nav.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$contacts$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/contacts-view.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$agents$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/agents-view.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$dashboard$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/dashboard-view.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$announcements$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/announcements-view.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$settings$2d$dialog$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/settings-dialog.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$campaigns$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/campaigns-view.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$my$2d$performance$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/my-performance-view.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$auth$2d$form$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/auth-form.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$app$2f$data$3a$24d232__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$text$2f$javascript$3e$__ = __turbopack_context__.i("[project]/src/app/data:24d232 [app-client] (ecmascript) <text/javascript>");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$app$2f$data$3a$7e6c78__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$text$2f$javascript$3e$__ = __turbopack_context__.i("[project]/src/app/data:7e6c78 [app-client] (ecmascript) <text/javascript>");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$hooks$2f$use$2d$toast$2e$ts__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/hooks/use-toast.ts [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$loading$2d$screen$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/loading-screen.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$system$2d$settings$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/system-settings-view.tsx [app-client] (ecmascript)");
;
var _s = __turbopack_context__.k.signature();
"use client";
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
function Home({ params, searchParams }) {
    _s();
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["use"])(params);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["use"])(searchParams);
    const [activeView, setActiveView] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])("Chat");
    const [isNavOpen, setIsNavOpen] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])(false);
    const [currentUser, setCurrentUser] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])(null);
    const [isSettingsOpen, setIsSettingsOpen] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])(false);
    const [initialContact, setInitialContact] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])(null);
    const [isLoading, setIsLoading] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])(true);
    const { toast } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$hooks$2f$use$2d$toast$2e$ts__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useToast"])();
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useEffect"])({
        "Home.useEffect": ()=>{
            const timer = setTimeout({
                "Home.useEffect.timer": ()=>{
                    setIsLoading(false);
                }
            }["Home.useEffect.timer"], 1500);
            return ({
                "Home.useEffect": ()=>clearTimeout(timer)
            })["Home.useEffect"];
        }
    }["Home.useEffect"], []);
    const onLogin = async (email, password_unused)=>{
        const result = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$app$2f$data$3a$24d232__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$text$2f$javascript$3e$__["handleLogin"])(email, password_unused);
        if (result.success && result.agent) {
            const agent = result.agent;
            setCurrentUser({
                id: agent.id,
                name: agent.name,
                avatar: agent.avatar,
                role: agent.role,
                email: agent.email,
                phone: agent.phone,
                companyId: agent.companyId
            });
            if (agent.role === 'admin') {
                setActiveView('Dashboard');
            } else {
                setActiveView('Chat');
            }
        }
        return {
            success: result.success,
            message: result.message
        };
    };
    const onSignUp = async (name, email, password_unused)=>{
        const result = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$app$2f$data$3a$7e6c78__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$text$2f$javascript$3e$__["handleSignUp"])(name, email, password_unused);
        if (result.success && result.agent) {
            toast({
                title: "Account Created!",
                description: "You can now sign in with your new credentials."
            });
            const agent = result.agent;
            setCurrentUser({
                id: agent.id,
                name: agent.name,
                avatar: agent.avatar,
                role: agent.role,
                email: agent.email,
                phone: agent.phone,
                companyId: agent.companyId
            });
            if (agent.role === 'admin') {
                setActiveView('Dashboard');
            } else {
                setActiveView('Chat');
            }
        }
        return result;
    };
    const handleLogout = ()=>{
        setCurrentUser(null);
        setActiveView('Chat');
    };
    const handleUpdateUser = (updatedUser)=>{
        setCurrentUser((prev)=>prev ? {
                ...prev,
                ...updatedUser
            } : null);
    };
    const handleNavigateToChat = (contact)=>{
        setInitialContact(contact);
        setActiveView("Chat");
        // Reset initialContact after a short delay to allow ChatLayout to pick it up
        setTimeout(()=>setInitialContact(null), 100);
    };
    const renderView = ()=>{
        const props = {
            onMenuClick: ()=>setIsNavOpen(true),
            user: currentUser
        };
        switch(activeView){
            case "Chat":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$chat$2d$layout$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ChatLayout"], {
                    ...props,
                    initialContact: initialContact
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 113,
                    columnNumber: 16
                }, this);
            case "Contacts":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$contacts$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ContactsView"], {
                    ...props,
                    onNavigateToChat: handleNavigateToChat
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 115,
                    columnNumber: 16
                }, this);
            case "Agents":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$agents$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AgentsView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 117,
                    columnNumber: 16
                }, this);
            case "Dashboard":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$dashboard$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DashboardView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 119,
                    columnNumber: 16
                }, this);
            case "Announcements":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$announcements$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AnnouncementsView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 121,
                    columnNumber: 16
                }, this);
            case "My Performance":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$my$2d$performance$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MyPerformanceView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 123,
                    columnNumber: 16
                }, this);
            case "Campaigns":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$campaigns$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CampaignsView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 125,
                    columnNumber: 17
                }, this);
            case "System Settings":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$system$2d$settings$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SystemSettingsView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 127,
                    columnNumber: 16
                }, this);
            default:
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$chat$2d$layout$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ChatLayout"], {
                    user: currentUser,
                    onMenuClick: ()=>setIsNavOpen(true),
                    initialContact: initialContact
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 129,
                    columnNumber: 16
                }, this);
        }
    };
    if (isLoading) {
        return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$loading$2d$screen$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["LoadingScreen"], {}, void 0, false, {
            fileName: "[project]/src/app/page.tsx",
            lineNumber: 134,
            columnNumber: 12
        }, this);
    }
    if (!currentUser) {
        return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])("main", {
            className: "flex h-screen w-full items-center justify-center bg-background p-4 overflow-hidden auth-page-background",
            children: /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$auth$2d$form$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AuthForm"], {
                onLogin: onLogin,
                onSignUp: onSignUp
            }, void 0, false, {
                fileName: "[project]/src/app/page.tsx",
                lineNumber: 140,
                columnNumber: 9
            }, this)
        }, void 0, false, {
            fileName: "[project]/src/app/page.tsx",
            lineNumber: 139,
            columnNumber: 7
        }, this);
    }
    return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])("main", {
        className: "flex h-screen bg-background",
        children: [
            /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$settings$2d$dialog$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SettingsDialog"], {
                open: isSettingsOpen,
                onOpenChange: setIsSettingsOpen,
                user: currentUser,
                onUserUpdate: handleUpdateUser
            }, void 0, false, {
                fileName: "[project]/src/app/page.tsx",
                lineNumber: 147,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$vertical$2d$nav$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["VerticalNav"], {
                activeView: activeView,
                setActiveView: setActiveView,
                user: currentUser,
                onLogout: handleLogout,
                isOpen: isNavOpen,
                setIsOpen: setIsNavOpen,
                onSettingsClick: ()=>setIsSettingsOpen(true)
            }, void 0, false, {
                fileName: "[project]/src/app/page.tsx",
                lineNumber: 153,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])("div", {
                className: "flex-1 md:pl-[70px] min-w-0",
                children: renderView()
            }, void 0, false, {
                fileName: "[project]/src/app/page.tsx",
                lineNumber: 162,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true, {
        fileName: "[project]/src/app/page.tsx",
        lineNumber: 146,
        columnNumber: 5
    }, this);
}
_s(Home, "/Fj3fHe8tPk+wz+vB/BQwaDYQQM=", false, function() {
    return [
        __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$hooks$2f$use$2d$toast$2e$ts__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useToast"]
    ];
});
_c = Home;
var _c;
__turbopack_context__.k.register(_c, "Home");
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
}]);

//# sourceMappingURL=src_app_cd448936._.js.map