(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/src/app/data:824146 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"7efa29b2bf7fa82364aadbf5011c649e7f21f09fbf":"createAgent"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "createAgent": (()=>createAgent)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var createAgent = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("7efa29b2bf7fa82364aadbf5011c649e7f21f09fbf", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "createAgent"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:021161 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40d5d08abcb55310482395efa2b68b3d883c709e39":"getChatsByCompany"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getChatsByCompany": (()=>getChatsByCompany)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var getChatsByCompany = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("40d5d08abcb55310482395efa2b68b3d883c709e39", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getChatsByCompany"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:45a203 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40534236dcc36f51af1a921f1d5dd985231fa0be2f":"getMessagesForChat"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getMessagesForChat": (()=>getMessagesForChat)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var getMessagesForChat = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("40534236dcc36f51af1a921f1d5dd985231fa0be2f", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getMessagesForChat"); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4vYWN0aW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbid1c2Ugc2VydmVyJztcblxuaW1wb3J0IHsgZ2V0RGIgfSBmcm9tIFwiQC9saWIvZGJcIjtcbmltcG9ydCB7IGhhc2hQYXNzd29yZCwgdmVyaWZ5UGFzc3dvcmQgfSBmcm9tIFwiQC9saWIvYXV0aFwiO1xuaW1wb3J0IHR5cGUgeyBBZ2VudCwgQWdlbnRSb2xlLCBBbm5vdW5jZW1lbnQsIENvbXBhbnksIENvbW1lbnQsIEFjdGl2aXR5TG9nLCBVc2VyLCBOb3RlLCBDaGF0LCBNZXNzYWdlLCBDaGFubmVsLCBDYW1wYWlnbiB9IGZyb20gXCJAL3R5cGVzXCI7XG5pbXBvcnQgeyBDb2xsZWN0aW9uLCBEYiwgT2JqZWN0SWQgfSBmcm9tIFwibW9uZ29kYlwiO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRBZ2VudHNDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxBZ2VudD4+IHtcbiAgICBjb25zdCBkYjogRGIgPSBhd2FpdCBnZXREYigpO1xuICAgIHJldHVybiBkYi5jb2xsZWN0aW9uPEFnZW50PignYWdlbnRzJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENvbXBhbmllc0NvbGxlY3Rpb24oKTogUHJvbWlzZTxDb2xsZWN0aW9uPENvbXBhbnk+PiB7XG4gICAgY29uc3QgZGI6IERiID0gYXdhaXQgZ2V0RGIoKTtcbiAgICByZXR1cm4gZGIuY29sbGVjdGlvbjxDb21wYW55PignY29tcGFuaWVzJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEFubm91bmNlbWVudHNDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxBbm5vdW5jZW1lbnQ+PiB7XG4gICAgY29uc3QgZGI6IERiID0gYXdhaXQgZ2V0RGIoKTtcbiAgICByZXR1cm4gZGIuY29sbGVjdGlvbjxBbm5vdW5jZW1lbnQ+KCdhbm5vdW5jZW1lbnRzJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEFjdGl2aXR5TG9nc0NvbGxlY3Rpb24oKTogUHJvbWlzZTxDb2xsZWN0aW9uPEFjdGl2aXR5TG9nPj4ge1xuICAgIGNvbnN0IGRiOiBEYiA9IGF3YWl0IGdldERiKCk7XG4gICAgcmV0dXJuIGRiLmNvbGxlY3Rpb248QWN0aXZpdHlMb2c+KCdhY3Rpdml0eV9sb2dzJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENvbnRhY3RzQ29sbGVjdGlvbigpOiBQcm9taXNlPENvbGxlY3Rpb248VXNlcj4+IHtcbiAgICBjb25zdCBkYjogRGIgPSBhd2FpdCBnZXREYigpO1xuICAgIHJldHVybiBkYi5jb2xsZWN0aW9uPFVzZXI+KCdjb250YWN0cycpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRDaGF0c0NvbGxlY3Rpb24oKTogUHJvbWlzZTxDb2xsZWN0aW9uPENoYXQ+PiB7XG4gICAgY29uc3QgZGI6IERiID0gYXdhaXQgZ2V0RGIoKTtcbiAgICByZXR1cm4gZGIuY29sbGVjdGlvbjxDaGF0PignY2hhdHMnKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0TWVzc2FnZXNDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxNZXNzYWdlPj4ge1xuICAgIGNvbnN0IGRiOiBEYiA9IGF3YWl0IGdldERiKCk7XG4gICAgcmV0dXJuIGRiLmNvbGxlY3Rpb248TWVzc2FnZT4oJ21lc3NhZ2VzJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENhbXBhaWduc0NvbGxlY3Rpb24oKTogUHJvbWlzZTxDb2xsZWN0aW9uPENhbXBhaWduPj4ge1xuICAgIGNvbnN0IGRiOiBEYiA9IGF3YWl0IGdldERiKCk7XG4gICAgcmV0dXJuIGRiLmNvbGxlY3Rpb248Q2FtcGFpZ24+KCdjYW1wYWlnbnMnKTtcbn1cblxuXG5hc3luYyBmdW5jdGlvbiBsb2dBY3Rpdml0eShjb21wYW55SWQ6IHN0cmluZyB8IE9iamVjdElkLCBhZ2VudE5hbWU6IHN0cmluZywgYWN0aW9uOiBzdHJpbmcsIGRldGFpbHM6IHN0cmluZykge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGxvZ3NDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWN0aXZpdHlMb2dzQ29sbGVjdGlvbigpO1xuICAgICAgICBhd2FpdCBsb2dzQ29sbGVjdGlvbi5pbnNlcnRPbmUoe1xuICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSxcbiAgICAgICAgICAgIGFnZW50TmFtZSxcbiAgICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICAgIGRldGFpbHMsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gbG9nIGFjdGl2aXR5OlwiLCBlcnJvcik7XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWdlbnRzQnlDb21wYW55KGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTxBZ2VudFtdPiB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKCFjb21wYW55SWQgfHwgIU9iamVjdElkLmlzVmFsaWQoY29tcGFueUlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFnZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBZ2VudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzQ29sbGVjdGlvbiA9IGF3YWl0IGdldE1lc3NhZ2VzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBhZ2VudHMgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmZpbmQoeyBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpIH0sIHsgcHJvamVjdGlvbjogeyBwYXNzd29yZDogMCB9IH0pLnRvQXJyYXkoKTtcblxuICAgICAgICBjb25zdCBhZ2VudERhdGFXaXRoU3RhdHMgPSBhd2FpdCBQcm9taXNlLmFsbChhZ2VudHMubWFwKGFzeW5jIChhZ2VudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgdG9kYXkuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGNvbnZlcnNhdGlvbnNUb2RheSA9IGF3YWl0IG1lc3NhZ2VzQ29sbGVjdGlvbi5jb3VudERvY3VtZW50cyh7XG4gICAgICAgICAgICAgICAgc2VuZGVySWQ6IGFnZW50Ll9pZCxcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IHsgJGd0ZTogdG9kYXkudG9JU09TdHJpbmcoKSB9IFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHN0YXR1c2VzOiBBcnJheTwnT25saW5lJyB8ICdPZmZsaW5lJyB8ICdCdXN5Jz4gPSBbJ09ubGluZScsICdPZmZsaW5lJywgJ0J1c3knXTtcbiAgICAgICAgICAgIGNvbnN0IHJhbmRvbVN0YXR1cyA9IHN0YXR1c2VzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHN0YXR1c2VzLmxlbmd0aCldO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLmFnZW50LFxuICAgICAgICAgICAgICAgIF9pZDogYWdlbnQuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgaWQ6IGFnZW50Ll9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogYWdlbnQuY29tcGFueUlkPy50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGNvbnZlcnNhdGlvbnNUb2RheSxcbiAgICAgICAgICAgICAgICBzdGF0dXM6IHJhbmRvbVN0YXR1cyxcbiAgICAgICAgICAgICAgICBhdmdSZXNwb25zZVRpbWU6IGAke01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDUpfW0gJHtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA2MCl9c2AsXG4gICAgICAgICAgICAgICAgY3NhdDogODUgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxNSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gYWdlbnREYXRhV2l0aFN0YXRzO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBhZ2VudHMgYnkgY29tcGFueTpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlQW5ub3VuY2VtZW50KGRhdGE6IHsgdGl0bGU6IHN0cmluZzsgY29udGVudDogc3RyaW5nOyBjYXRlZ29yeTogc3RyaW5nOyBhdXRob3JJZDogc3RyaW5nOyBjb21wYW55SWQ6IHN0cmluZyB9KTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U/OiBzdHJpbmc7IGFubm91bmNlbWVudD86IEFubm91bmNlbWVudCB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYW5ub3VuY2VtZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBbm5vdW5jZW1lbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBhZ2VudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWdlbnRzQ29sbGVjdGlvbigpO1xuXG4gICAgICAgIGNvbnN0IGF1dGhvciA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IF9pZDogbmV3IE9iamVjdElkKGRhdGEuYXV0aG9ySWQpIH0pO1xuICAgICAgICBpZiAoIWF1dGhvcikge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQXV0aG9yIG5vdCBmb3VuZC5cIiB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbmV3QW5ub3VuY2VtZW50OiBPbWl0PEFubm91bmNlbWVudCwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgIHRpdGxlOiBkYXRhLnRpdGxlLFxuICAgICAgICAgICAgY29udGVudDogZGF0YS5jb250ZW50LFxuICAgICAgICAgICAgY2F0ZWdvcnk6IGRhdGEuY2F0ZWdvcnkgYXMgYW55LFxuICAgICAgICAgICAgYXV0aG9yOiB7XG4gICAgICAgICAgICAgICAgaWQ6IGF1dGhvci5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBuYW1lOiBhdXRob3IubmFtZSxcbiAgICAgICAgICAgICAgICBhdmF0YXI6IGF1dGhvci5hdmF0YXJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChkYXRhLmNvbXBhbnlJZCksXG4gICAgICAgICAgICBkYXRlOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICByZWFkQnk6IFtdLFxuICAgICAgICAgICAgY29tbWVudHM6IFtdLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uLmluc2VydE9uZShuZXdBbm5vdW5jZW1lbnQgYXMgYW55KTtcbiAgICAgICAgYXdhaXQgbG9nQWN0aXZpdHkoZGF0YS5jb21wYW55SWQsIGF1dGhvci5uYW1lLCAnQ3JlYXRlIEFubm91bmNlbWVudCcsIGBQdWJsaXNoZWQ6IFwiJHtkYXRhLnRpdGxlfVwiYCk7XG5cblxuICAgICAgICBpZiAocmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNyZWF0ZWRBbm5vdW5jZW1lbnQ6IEFubm91bmNlbWVudCA9IHtcbiAgICAgICAgICAgICAgICAuLi4obmV3QW5ub3VuY2VtZW50IGFzIE9taXQ8QW5ub3VuY2VtZW50LCAnX2lkJyB8ICdpZCc+KSxcbiAgICAgICAgICAgICAgICBfaWQ6IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgaWQ6IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoZGF0YS5jb21wYW55SWQpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgYW5ub3VuY2VtZW50OiBjcmVhdGVkQW5ub3VuY2VtZW50IH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJGYWlsZWQgdG8gY3JlYXRlIGFubm91bmNlbWVudC5cIiB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDcmVhdGUgYW5ub3VuY2VtZW50IGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQuXCIgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBbm5vdW5jZW1lbnRzQnlDb21wYW55KGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTxBbm5vdW5jZW1lbnRbXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghY29tcGFueUlkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNvbXBhbnlJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbm5vdW5jZW1lbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFubm91bmNlbWVudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGFubm91bmNlbWVudHMgPSBhd2FpdCBhbm5vdW5jZW1lbnRzQ29sbGVjdGlvbi5maW5kKHsgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSB9KS5zb3J0KHsgZGF0ZTogLTEgfSkudG9BcnJheSgpO1xuXG4gICAgICAgIHJldHVybiBhbm5vdW5jZW1lbnRzLm1hcChhbm5vdW5jZW1lbnQgPT4gKHtcbiAgICAgICAgICAgIC4uLmFubm91bmNlbWVudCxcbiAgICAgICAgICAgIF9pZDogYW5ub3VuY2VtZW50Ll9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgaWQ6IGFubm91bmNlbWVudC5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGNvbXBhbnlJZDogYW5ub3VuY2VtZW50LmNvbXBhbnlJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgcmVhZEJ5OiBhbm5vdW5jZW1lbnQucmVhZEJ5IHx8IFtdLFxuICAgICAgICAgICAgY29tbWVudHM6IChhbm5vdW5jZW1lbnQuY29tbWVudHMgfHwgW10pLm1hcCgoY29tbWVudDogQ29tbWVudCkgPT4gKHtcbiAgICAgICAgICAgICAgICAuLi5jb21tZW50LFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoY29tbWVudC50aW1lc3RhbXApLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICB9KSksXG4gICAgICAgIH0pKTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBhbm5vdW5jZW1lbnRzIGJ5IGNvbXBhbnk6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1hcmtBbm5vdW5jZW1lbnRBc1JlYWQoYW5ub3VuY2VtZW50SWQ6IHN0cmluZywgYWdlbnRJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW4gfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QW5ub3VuY2VtZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgYXdhaXQgYW5ub3VuY2VtZW50c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChhbm5vdW5jZW1lbnRJZCkgfSxcbiAgICAgICAgICAgIHsgJGFkZFRvU2V0OiB7IHJlYWRCeTogYWdlbnRJZCB9IH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXJrIGFzIHJlYWQgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhZGRDb21tZW50VG9Bbm5vdW5jZW1lbnQoYW5ub3VuY2VtZW50SWQ6IHN0cmluZywgYXV0aG9ySWQ6IHN0cmluZywgY29udGVudDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW4sIGNvbW1lbnQ/OiBDb21tZW50IH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBhZ2VudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWdlbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBhdXRob3IgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBfaWQ6IG5ldyBPYmplY3RJZChhdXRob3JJZCkgfSk7XG4gICAgICAgIGlmICghYXV0aG9yKSByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xuXG4gICAgICAgIGNvbnN0IG5ld0NvbW1lbnQ6IENvbW1lbnQgPSB7XG4gICAgICAgICAgICBpZDogbmV3IE9iamVjdElkKCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGF1dGhvcjoge1xuICAgICAgICAgICAgICAgIGlkOiBhdXRob3IuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgbmFtZTogYXV0aG9yLm5hbWUsXG4gICAgICAgICAgICAgICAgYXZhdGFyOiBhdXRob3IuYXZhdGFyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QW5ub3VuY2VtZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgYXdhaXQgYW5ub3VuY2VtZW50c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChhbm5vdW5jZW1lbnRJZCkgfSxcbiAgICAgICAgICAgIHsgJHB1c2g6IHsgY29tbWVudHM6IG5ld0NvbW1lbnQgfSB9XG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBjb21tZW50OiBuZXdDb21tZW50IH07XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQWRkIGNvbW1lbnQgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUFnZW50UHJvZmlsZShhZ2VudElkOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgZW1haWw6IHN0cmluZywgcGhvbmU6IHN0cmluZywgY29tcGFueUlkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgYWdlbnQ/OiBBZ2VudDsgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFnZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBZ2VudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCB1cGRhdGVSZXN1bHQgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICAgICAgICAgIHsgX2lkOiBuZXcgT2JqZWN0SWQoYWdlbnRJZCkgfSxcbiAgICAgICAgICAgIHsgJHNldDogeyBuYW1lLCBlbWFpbCwgcGhvbmUgfSB9XG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKHVwZGF0ZVJlc3VsdC5tb2RpZmllZENvdW50ID09PSAwICYmIHVwZGF0ZVJlc3VsdC5tYXRjaGVkQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFnZW50IG5vdCBmb3VuZC5cIiB9O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCB1cGRhdGVkQWdlbnREb2MgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBfaWQ6IG5ldyBPYmplY3RJZChhZ2VudElkKSB9KTtcblxuICAgICAgICBpZiAodXBkYXRlZEFnZW50RG9jKSB7XG4gICAgICAgICAgICBjb25zdCB7IHBhc3N3b3JkLCAuLi5hZ2VudERhdGEgfSA9IHVwZGF0ZWRBZ2VudERvYztcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRBZ2VudDogQWdlbnQgPSB7XG4gICAgICAgICAgICAgICAgLi4uYWdlbnREYXRhLFxuICAgICAgICAgICAgICAgIF9pZDogdXBkYXRlZEFnZW50RG9jLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiB1cGRhdGVkQWdlbnREb2MuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiB1cGRhdGVkQWdlbnREb2MuY29tcGFueUlkPy50b1N0cmluZygpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGF3YWl0IGxvZ0FjdGl2aXR5KGNvbXBhbnlJZCwgdXBkYXRlZEFnZW50Lm5hbWUsICdVcGRhdGUgUHJvZmlsZScsIGBVcGRhdGVkIHByb2ZpbGUgZGV0YWlsc2ApO1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgYWdlbnQ6IHVwZGF0ZWRBZ2VudCB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIHJldHJpZXZlIHVwZGF0ZWQgYWdlbnQuXCIgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVXBkYXRlIGFnZW50IHByb2ZpbGUgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZC5cIiB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUFnZW50UGFzc3dvcmQoYWdlbnRJZDogc3RyaW5nLCBjdXJyZW50UGFzc3dvcmRfdW51c2VkOiBzdHJpbmcsIG5ld1Bhc3N3b3JkX3VudXNlZDogc3RyaW5nLCBjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBtZXNzYWdlOiBzdHJpbmcgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFnZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBZ2VudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGFnZW50ID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5maW5kT25lKHsgX2lkOiBuZXcgT2JqZWN0SWQoYWdlbnRJZCkgfSk7XG5cbiAgICAgICAgaWYgKCFhZ2VudCB8fCAhYWdlbnQucGFzc3dvcmQpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFnZW50IG5vdCBmb3VuZC5cIiB9O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBpc1Bhc3N3b3JkVmFsaWQgPSBhd2FpdCB2ZXJpZnlQYXNzd29yZChjdXJyZW50UGFzc3dvcmRfdW51c2VkLCBhZ2VudC5wYXNzd29yZCk7XG4gICAgICAgIGlmICghaXNQYXNzd29yZFZhbGlkKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJJbmNvcnJlY3QgY3VycmVudCBwYXNzd29yZC5cIiB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbmV3SGFzaGVkUGFzc3dvcmQgPSBhd2FpdCBoYXNoUGFzc3dvcmQobmV3UGFzc3dvcmRfdW51c2VkKTtcbiAgICAgICAgYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi51cGRhdGVPbmUoXG4gICAgICAgICAgICB7IF9pZDogbmV3IE9iamVjdElkKGFnZW50SWQpIH0sXG4gICAgICAgICAgICB7ICRzZXQ6IHsgcGFzc3dvcmQ6IG5ld0hhc2hlZFBhc3N3b3JkIH0gfVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgYXdhaXQgbG9nQWN0aXZpdHkoY29tcGFueUlkLCBhZ2VudC5uYW1lLCAnVXBkYXRlIFBhc3N3b3JkJywgYENoYW5nZWQgcGFzc3dvcmRgKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgbWVzc2FnZTogXCJQYXNzd29yZCB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5cIiB9O1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlVwZGF0ZSBwYXNzd29yZCBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkLlwiIH07XG4gICAgfVxufVxuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBoYW5kbGVMb2dpbihlbWFpbDogc3RyaW5nLCBwYXNzd29yZF91bnVzZWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBtZXNzYWdlPzogc3RyaW5nOyBhZ2VudD86IEFnZW50IH0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgIGNvbnN0IGFnZW50RG9jID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5maW5kT25lKHsgZW1haWw6IGVtYWlsLnRvTG93ZXJDYXNlKCkgfSk7XG5cbiAgICAgIGlmIChhZ2VudERvYyAmJiBhZ2VudERvYy5wYXNzd29yZCkge1xuICAgICAgICBjb25zdCBpc1Bhc3N3b3JkVmFsaWQgPSBhd2FpdCB2ZXJpZnlQYXNzd29yZChwYXNzd29yZF91bnVzZWQsIGFnZW50RG9jLnBhc3N3b3JkKTtcbiAgICAgICAgaWYgKGlzUGFzc3dvcmRWYWxpZCkge1xuICAgICAgICAgIGNvbnN0IHsgcGFzc3dvcmQsIC4uLmFnZW50RGF0YSB9ID0gYWdlbnREb2M7XG4gICAgICAgICAgY29uc3QgYWdlbnQ6IEFnZW50ID0ge1xuICAgICAgICAgICAgLi4uYWdlbnREYXRhLFxuICAgICAgICAgICAgX2lkOiBhZ2VudERvYy5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGlkOiBhZ2VudERvYy5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGNvbXBhbnlJZDogYWdlbnREb2MuY29tcGFueUlkPy50b1N0cmluZygpLFxuICAgICAgICAgIH07XG4gICAgICAgICAgYXdhaXQgbG9nQWN0aXZpdHkoYWdlbnQuY29tcGFueUlkLCBhZ2VudC5uYW1lLCAnTG9naW4nLCBgTG9nZ2VkIGluIHN1Y2Nlc3NmdWxseWApO1xuICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGFnZW50OiBhZ2VudCB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJJbnZhbGlkIGVtYWlsIG9yIHBhc3N3b3JkLlwiIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJMb2dpbiBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRGF0YWJhc2UgY29ubmVjdGlvbiBlcnJvci5cIiB9O1xuICAgIH1cbn07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVBZ2VudChuYW1lOiBzdHJpbmcsIGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkX3VudXNlZDogc3RyaW5nLCByb2xlOiBBZ2VudFJvbGUsIGNvbXBhbnlJZDogc3RyaW5nLCBjcmVhdGVkQnk6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBtZXNzYWdlPzogc3RyaW5nOyBhZ2VudD86IEFnZW50OyB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdBZ2VudCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IGVtYWlsOiBlbWFpbC50b0xvd2VyQ2FzZSgpIH0pO1xuXG4gICAgICAgIGlmIChleGlzdGluZ0FnZW50KSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiBhZ2VudCB3aXRoIHRoaXMgZW1haWwgYWxyZWFkeSBleGlzdHMuXCIgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGhhc2hlZFBhc3N3b3JkID0gYXdhaXQgaGFzaFBhc3N3b3JkKHBhc3N3b3JkX3VudXNlZCk7XG4gICAgICAgIGNvbnN0IGF2YXRhciA9IGBodHRwczovL3BpY3N1bS5waG90b3Mvc2VlZC8ke25hbWUucmVwbGFjZSgvXFxzL2csICcnKX0vMTAwLzEwMGA7XG5cbiAgICAgICAgY29uc3QgYWdlbnRUb0luc2VydDogT21pdDxBZ2VudCwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBlbWFpbDogZW1haWwudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgIHBhc3N3b3JkOiBoYXNoZWRQYXNzd29yZCxcbiAgICAgICAgICAgIHJvbGUsXG4gICAgICAgICAgICBhdmF0YXIsXG4gICAgICAgICAgICBwaG9uZTogJycsIFxuICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uaW5zZXJ0T25lKGFnZW50VG9JbnNlcnQgYXMgYW55KTtcblxuICAgICAgICBpZiAocmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0FnZW50RG9jID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5maW5kT25lKHsgX2lkOiByZXN1bHQuaW5zZXJ0ZWRJZCB9KTtcbiAgICAgICAgICAgIGlmIChuZXdBZ2VudERvYykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgcGFzc3dvcmQsIC4uLmFnZW50RGF0YSB9ID0gbmV3QWdlbnREb2M7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3QWdlbnQ6IEFnZW50ID0ge1xuICAgICAgICAgICAgICAgICAgLi4uYWdlbnREYXRhLFxuICAgICAgICAgICAgICAgICAgX2lkOiBuZXdBZ2VudERvYy5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgIGlkOiBuZXdBZ2VudERvYy5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3QWdlbnREb2MuY29tcGFueUlkPy50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgYXdhaXQgbG9nQWN0aXZpdHkoY29tcGFueUlkLCBjcmVhdGVkQnksICdDcmVhdGUgQWdlbnQnLCBgQ3JlYXRlZCBhZ2VudDogJHtuYW1lfWApO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGFnZW50OiBuZXdBZ2VudCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkZhaWxlZCB0byBjcmVhdGUgYWdlbnQuXCIgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQ3JlYXRlIGFnZW50IGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQgd2hpbGUgY3JlYXRpbmcgdGhlIGFnZW50LlwiIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlU2lnblVwKG5hbWU6IHN0cmluZywgZW1haWw6IHN0cmluZywgcGFzc3dvcmRfdW51c2VkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgYWdlbnQ/OiBBZ2VudDsgfT4ge1xuICAgIGNvbnN0IGRiID0gYXdhaXQgZ2V0RGIoKTtcbiAgICBjb25zdCBzZXNzaW9uID0gZGIuY2xpZW50LnN0YXJ0U2Vzc2lvbigpO1xuICAgIHRyeSB7XG4gICAgICAgIGxldCBuZXdBZ2VudFJlc3VsdDogQWdlbnQgfCB1bmRlZmluZWQ7XG4gICAgICAgIGF3YWl0IHNlc3Npb24ud2l0aFRyYW5zYWN0aW9uKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBhbmllc0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRDb21wYW5pZXNDb2xsZWN0aW9uKCk7XG4gICAgICAgICAgICBjb25zdCBhZ2VudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWdlbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdBZ2VudCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IGVtYWlsOiBlbWFpbC50b0xvd2VyQ2FzZSgpIH0sIHsgc2Vzc2lvbiB9KTtcblxuICAgICAgICAgICAgaWYgKGV4aXN0aW5nQWdlbnQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBbiBhZ2VudCB3aXRoIHRoaXMgZW1haWwgYWxyZWFkeSBleGlzdHMuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBjb21wYW55UmVzdWx0ID0gYXdhaXQgY29tcGFuaWVzQ29sbGVjdGlvbi5pbnNlcnRPbmUoe1xuICAgICAgICAgICAgICAgIG5hbWU6IGAke25hbWV9J3MgQ29tcGFueWAsXG4gICAgICAgICAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgfSwgeyBzZXNzaW9uIH0pO1xuXG4gICAgICAgICAgICBpZiAoIWNvbXBhbnlSZXN1bHQuaW5zZXJ0ZWRJZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBjcmVhdGUgY29tcGFueS5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb21wYW55SWQgPSBjb21wYW55UmVzdWx0Lmluc2VydGVkSWQ7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGhhc2hlZFBhc3N3b3JkID0gYXdhaXQgaGFzaFBhc3N3b3JkKHBhc3N3b3JkX3VudXNlZCk7XG4gICAgICAgICAgICBjb25zdCBhdmF0YXIgPSBgaHR0cHM6Ly9waWNzdW0ucGhvdG9zL3NlZWQvJHtuYW1lLnJlcGxhY2UoL1xccy9nLCAnJyl9LzEwMC8xMDBgO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBhZ2VudFRvSW5zZXJ0OiBPbWl0PEFnZW50LCAnaWQnIHwgJ19pZCc+ID0ge1xuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgZW1haWw6IGVtYWlsLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ6IGhhc2hlZFBhc3N3b3JkLFxuICAgICAgICAgICAgICAgIHJvbGU6ICdhZG1pbicsXG4gICAgICAgICAgICAgICAgYXZhdGFyLFxuICAgICAgICAgICAgICAgIHBob25lOiAnJyxcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IGNvbXBhbnlJZCxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnN0IGFnZW50UmVzdWx0ID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5pbnNlcnRPbmUoYWdlbnRUb0luc2VydCBhcyBhbnksIHsgc2Vzc2lvbiB9KTtcblxuICAgICAgICAgICAgIGlmICghYWdlbnRSZXN1bHQuaW5zZXJ0ZWRJZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBjcmVhdGUgYWRtaW4gYWdlbnQuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBhd2FpdCBsb2dBY3Rpdml0eShjb21wYW55SWQsIG5hbWUsICdTaWduIFVwJywgYENyZWF0ZWQgbmV3IGNvbXBhbnkgYW5kIGFkbWluIGFjY291bnQuYCk7XG5cbiAgICAgICAgICAgIGNvbnN0IG5ld0FnZW50RG9jID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5maW5kT25lKHsgX2lkOiBhZ2VudFJlc3VsdC5pbnNlcnRlZElkIH0sIHsgc2Vzc2lvbiB9KTtcbiAgICAgICAgICAgIGlmIChuZXdBZ2VudERvYykge1xuICAgICAgICAgICAgICAgICBjb25zdCB7IHBhc3N3b3JkLCAuLi5hZ2VudERhdGEgfSA9IG5ld0FnZW50RG9jO1xuICAgICAgICAgICAgICAgICBuZXdBZ2VudFJlc3VsdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uYWdlbnREYXRhLFxuICAgICAgICAgICAgICAgICAgICBfaWQ6IG5ld0FnZW50RG9jLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBpZDogbmV3QWdlbnREb2MuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3QWdlbnREb2MuY29tcGFueUlkPy50b1N0cmluZygpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBpZiAoIW5ld0FnZW50UmVzdWx0KSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJGYWlsZWQgdG8gcmV0cmlldmUgdGhlIGNyZWF0ZWQgYWdlbnQuXCIgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgYWdlbnQ6IG5ld0FnZW50UmVzdWx0IH07XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiU2lnbiB1cCB0cmFuc2FjdGlvbiBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICAvLyBBYm9ydCB0cmFuc2FjdGlvbiBvbiBlcnJvciBpZiBpdCB3YXMgc3RhcnRlZFxuICAgICAgICBpZiAoc2Vzc2lvbi5pblRyYW5zYWN0aW9uKCkpIHtcbiAgICAgICAgICAgIGF3YWl0IHNlc3Npb24uYWJvcnRUcmFuc2FjdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBlcnJvci5tZXNzYWdlIHx8IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZCBkdXJpbmcgc2lnbiB1cC5cIiB9O1xuICAgIH0gZmluYWxseSB7XG4gICAgICAgIGF3YWl0IHNlc3Npb24uZW5kU2Vzc2lvbigpO1xuICAgIH1cbn1cblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWN0aXZpdHlMb2dzKGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTxBY3Rpdml0eUxvZ1tdPiB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKCFjb21wYW55SWQgfHwgIU9iamVjdElkLmlzVmFsaWQoY29tcGFueUlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxvZ3NDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWN0aXZpdHlMb2dzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBsb2dzID0gYXdhaXQgbG9nc0NvbGxlY3Rpb24uZmluZCh7IGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkgfSkuc29ydCh7IHRpbWVzdGFtcDogLTEgfSkubGltaXQoNTApLnRvQXJyYXkoKTtcblxuICAgICAgICByZXR1cm4gbG9ncy5tYXAobG9nID0+ICh7XG4gICAgICAgICAgICAuLi5sb2csXG4gICAgICAgICAgICBfaWQ6IGxvZy5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGlkOiBsb2cuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBjb21wYW55SWQ6IGxvZy5jb21wYW55SWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogbG9nLnRpbWVzdGFtcC50b0lTT1N0cmluZygpLFxuICAgICAgICB9KSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIGFjdGl2aXR5IGxvZ3M6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENvbnRhY3RzQnlDb21wYW55KGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTxVc2VyW10+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIWNvbXBhbnlJZCB8fCAhT2JqZWN0SWQuaXNWYWxpZChjb21wYW55SWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29udGFjdHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q29udGFjdHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzID0gYXdhaXQgY29udGFjdHNDb2xsZWN0aW9uLmZpbmQoeyBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpIH0pLnRvQXJyYXkoKTtcblxuICAgICAgICByZXR1cm4gY29udGFjdHMubWFwKGNvbnRhY3QgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBfaWQsIGNvbXBhbnlJZCwgLi4ucmVzdCB9ID0gY29udGFjdCBhcyBhbnk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgICAgICAgICAgX2lkOiBfaWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBpZDogX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBjb21wYW55SWQ/LnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgbm90ZXM6IChjb250YWN0Lm5vdGVzIHx8IFtdKS5tYXAoKG5vdGU6IE5vdGUpID0+ICh7XG4gICAgICAgICAgICAgICAgICAgIC4uLm5vdGUsXG4gICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUobm90ZS50aW1lc3RhbXApLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIGNvbnRhY3RzOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVDb250YWN0KG5hbWU6IHN0cmluZywgZW1haWw6IHN0cmluZywgcGhvbmU6IHN0cmluZywgY29tcGFueUlkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgY29udGFjdD86IFVzZXIgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzQ29sbGVjdGlvbiA9IGF3YWl0IGdldENvbnRhY3RzQ29sbGVjdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZXhpc3RpbmdDb250YWN0ID0gYXdhaXQgY29udGFjdHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBlbWFpbDogZW1haWwudG9Mb3dlckNhc2UoKSwgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSB9KTtcbiAgICAgICAgaWYgKGV4aXN0aW5nQ29udGFjdCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQSBjb250YWN0IHdpdGggdGhpcyBlbWFpbCBhbHJlYWR5IGV4aXN0cy5cIiB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYXZhdGFyID0gYGh0dHBzOi8vcGljc3VtLnBob3Rvcy9zZWVkLyR7bmFtZS5yZXBsYWNlKC9cXHMvZywgJycpfS8xMDAvMTAwYDtcblxuICAgICAgICBjb25zdCBjb250YWN0VG9JbnNlcnQ6IE9taXQ8VXNlciwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBlbWFpbDogZW1haWwudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgIHBob25lLFxuICAgICAgICAgICAgYXZhdGFyLFxuICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSxcbiAgICAgICAgICAgIG5vdGVzOiBbXSxcbiAgICAgICAgICAgIG9ubGluZTogZmFsc2UsXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udGFjdHNDb2xsZWN0aW9uLmluc2VydE9uZShjb250YWN0VG9JbnNlcnQgYXMgYW55KTtcbiAgICAgICAgXG4gICAgICAgIGlmIChyZXN1bHQuaW5zZXJ0ZWRJZCkge1xuICAgICAgICAgICAgY29uc3QgbmV3Q29udGFjdDogVXNlciA9IHtcbiAgICAgICAgICAgICAgICAuLi4oY29udGFjdFRvSW5zZXJ0IGFzIE9taXQ8VXNlciwgJ19pZCd8J2lkJz4pLFxuICAgICAgICAgICAgICAgIF9pZDogcmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBpZDogcmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgY29udGFjdDogbmV3Q29udGFjdCB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIGNyZWF0ZSBjb250YWN0LlwiIH07XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQ3JlYXRlIGNvbnRhY3QgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZC5cIiB9O1xuICAgIH1cbn1cblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYXNzaWduQWdlbnRUb0NvbnRhY3QoY29udGFjdElkOiBzdHJpbmcsIGFnZW50SWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuIH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjb250YWN0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRDb250YWN0c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgYXdhaXQgY29udGFjdHNDb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICAgICAgICAgIHsgX2lkOiBuZXcgT2JqZWN0SWQoY29udGFjdElkKSB9LFxuICAgICAgICAgICAgeyAkc2V0OiB7IGFzc2lnbmVkQWdlbnRJZDogYWdlbnRJZCB9IH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhc3NpZ25pbmcgYWdlbnQ6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhZGROb3RlVG9Db250YWN0KGNvbnRhY3RJZDogc3RyaW5nLCBhZ2VudElkOiBzdHJpbmcsIGFnZW50TmFtZTogc3RyaW5nLCB0ZXh0OiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbm90ZT86IE5vdGUgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzQ29sbGVjdGlvbiA9IGF3YWl0IGdldENvbnRhY3RzQ29sbGVjdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgbmV3Tm90ZTogTm90ZSA9IHtcbiAgICAgICAgICAgIGlkOiBuZXcgT2JqZWN0SWQoKS50b1N0cmluZygpLFxuICAgICAgICAgICAgYWdlbnRJZCxcbiAgICAgICAgICAgIGFnZW50TmFtZSxcbiAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi51cGRhdGVPbmUoXG4gICAgICAgICAgICB7IF9pZDogbmV3IE9iamVjdElkKGNvbnRhY3RJZCkgfSxcbiAgICAgICAgICAgIHsgJHB1c2g6IHsgbm90ZXM6IHsgJGVhY2g6IFtuZXdOb3RlXSwgJHBvc2l0aW9uOiAwIH0gfSB9XG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICBpZiAocmVzdWx0Lm1vZGlmaWVkQ291bnQgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBub3RlOiBuZXdOb3RlIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWRkaW5nIG5vdGU6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXROb3Rlc0ZvckNvbnRhY3QoY29udGFjdElkOiBzdHJpbmcpOiBQcm9taXNlPE5vdGVbXT4ge1xuICAgICB0cnkge1xuICAgICAgICBpZiAoIWNvbnRhY3RJZCB8fCAhT2JqZWN0SWQuaXNWYWxpZChjb250YWN0SWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29udGFjdHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q29udGFjdHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGNvbnRhY3QgPSBhd2FpdCBjb250YWN0c0NvbGxlY3Rpb24uZmluZE9uZSh7IF9pZDogbmV3IE9iamVjdElkKGNvbnRhY3RJZCkgfSk7XG4gICAgICAgIHJldHVybiAoY29udGFjdD8ubm90ZXMgfHwgW10pLm1hcCgobm90ZTogTm90ZSkgPT4gKHtcbiAgICAgICAgICAgIC4uLm5vdGUsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKG5vdGUudGltZXN0YW1wKS50b0lTT1N0cmluZygpLFxuICAgICAgICB9KSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIG5vdGVzOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDaGF0c0J5Q29tcGFueShjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8Q2hhdFtdPiB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKCFjb21wYW55SWQgfHwgIU9iamVjdElkLmlzVmFsaWQoY29tcGFueUlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNoYXRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldENoYXRzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBjaGF0cyA9IGF3YWl0IGNoYXRzQ29sbGVjdGlvbi5hZ2dyZWdhdGUoW1xuICAgICAgICAgICAgeyAkbWF0Y2g6IHsgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSB9IH0sXG4gICAgICAgICAgICB7ICRzb3J0OiB7IHRpbWVzdGFtcDogLTEgfSB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICRsb29rdXA6IHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogJ2NvbnRhY3RzJyxcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxGaWVsZDogJ3VzZXJJZCcsXG4gICAgICAgICAgICAgICAgICAgIGZvcmVpZ25GaWVsZDogJ19pZCcsXG4gICAgICAgICAgICAgICAgICAgIGFzOiAndXNlcidcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyAkdW53aW5kOiAnJHVzZXInIH1cbiAgICAgICAgXSkudG9BcnJheSgpO1xuXG4gICAgICAgIHJldHVybiBjaGF0cy5tYXAoY2hhdCA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IF9pZCwgY29tcGFueUlkLCB1c2VySWQsIC4uLnJlc3QgfSA9IGNoYXQgYXMgYW55O1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5yZXN0LFxuICAgICAgICAgICAgICAgIF9pZDogX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgaWQ6IF9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogY29tcGFueUlkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgdXNlcklkOiB1c2VySWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlczogW10sIC8vIE1lc3NhZ2VzIHdpbGwgYmUgbGF6eS1sb2FkZWRcbiAgICAgICAgICAgICAgICB1c2VyOiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLmNoYXQudXNlcixcbiAgICAgICAgICAgICAgICAgICAgX2lkOiBjaGF0LnVzZXIuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIGlkOiBjaGF0LnVzZXIuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogY2hhdC51c2VyLmNvbXBhbnlJZCA/IGNoYXQudXNlci5jb21wYW55SWQudG9TdHJpbmcoKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgY2hhdHMgYnkgY29tcGFueTpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TWVzc2FnZXNGb3JDaGF0KGNoYXRJZDogc3RyaW5nKTogUHJvbWlzZTxNZXNzYWdlW10+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIWNoYXRJZCB8fCAhT2JqZWN0SWQuaXNWYWxpZChjaGF0SWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVzc2FnZXNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0TWVzc2FnZXNDb2xsZWN0aW9uKCk7XG4gICAgICAgIC8vIEFsc28gZmV0Y2ggc2VuZGVyIGRldGFpbHMgaWYgaXQncyBhIHVzZXIsIG5vdCBhbiBhZ2VudCAoJ21lJylcbiAgICAgICAgY29uc3QgbWVzc2FnZXMgPSBhd2FpdCBtZXNzYWdlc0NvbGxlY3Rpb24uYWdncmVnYXRlKFtcbiAgICAgICAgICAgIHsgJG1hdGNoOiB7IGNoYXRJZDogbmV3IE9iamVjdElkKGNoYXRJZCkgfSB9LFxuICAgICAgICAgICAgeyAkc29ydDogeyB0aW1lc3RhbXA6IDEgfSB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICRsb29rdXA6IHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogJ2NvbnRhY3RzJyxcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxGaWVsZDogJ3NlbmRlcklkJyxcbiAgICAgICAgICAgICAgICAgICAgZm9yZWlnbkZpZWxkOiAnX2lkJyxcbiAgICAgICAgICAgICAgICAgICAgYXM6ICdzZW5kZXJJbmZvJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXSkudG9BcnJheSgpO1xuXG4gICAgICAgIHJldHVybiBtZXNzYWdlcy5tYXAobXNnID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgX2lkLCBjaGF0SWQsIHNlbmRlcklkLCBzZW5kZXJJbmZvLCAuLi5yZXN0IH0gPSBtc2cgYXMgYW55O1xuICAgICAgICAgICAgY29uc3Qgc2VuZGVyID0gbXNnLnNlbmRlciA9PT0gJ21lJyA/ICdtZScgOiAoc2VuZGVySW5mb1swXSB8fCBudWxsKTtcblxuICAgICAgICAgICAgaWYgKHNlbmRlciAmJiBzZW5kZXIgIT09ICdtZScpIHtcbiAgICAgICAgICAgICAgICBzZW5kZXIuaWQgPSBzZW5kZXIuX2lkLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgICAgICAgICBpZDogX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgc2VuZGVyLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIG1lc3NhZ2VzOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZW5kTWVzc2FnZShjaGF0SWQ6IHN0cmluZywgdGV4dDogc3RyaW5nLCBhZ2VudElkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbmV3TWVzc2FnZT86IE1lc3NhZ2UgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzQ29sbGVjdGlvbiA9IGF3YWl0IGdldE1lc3NhZ2VzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBjaGF0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRDaGF0c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGNvbnN0IG5ld01lc3NhZ2VUb0luc2VydDogT21pdDxNZXNzYWdlLCAnaWQnIHwgJ19pZCc+ID0ge1xuICAgICAgICAgICAgY2hhdElkOiBuZXcgT2JqZWN0SWQoY2hhdElkKSxcbiAgICAgICAgICAgIHNlbmRlcjogJ21lJywgLy8gJ21lJyBkZW5vdGVzIHRoZSBhZ2VudFxuICAgICAgICAgICAgc2VuZGVySWQ6IG5ldyBPYmplY3RJZChhZ2VudElkKSxcbiAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IHRpbWVzdGFtcC50b0lTT1N0cmluZygpLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG1lc3NhZ2VzQ29sbGVjdGlvbi5pbnNlcnRPbmUobmV3TWVzc2FnZVRvSW5zZXJ0IGFzIGFueSk7XG5cbiAgICAgICAgaWYgKHJlc3VsdC5pbnNlcnRlZElkKSB7XG4gICAgICAgICAgICBhd2FpdCBjaGF0c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgICAgIHsgX2lkOiBuZXcgT2JqZWN0SWQoY2hhdElkKSB9LFxuICAgICAgICAgICAgICAgIHsgJHNldDogeyBsYXN0TWVzc2FnZTogdGV4dCwgdGltZXN0YW1wOiB0aW1lc3RhbXAudG9Mb2NhbGVUaW1lU3RyaW5nKFtdLCB7IGhvdXI6ICcyLWRpZ2l0JywgbWludXRlOiAnMi1kaWdpdCcgfSkgfSB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBmaW5hbE5ld01lc3NhZ2U6IE1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgICAgLi4uKG5ld01lc3NhZ2VUb0luc2VydCBhcyBPbWl0PE1lc3NhZ2UsICdfaWQnfCdpZCc+KSxcbiAgICAgICAgICAgICAgICBfaWQ6IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgaWQ6IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY2hhdElkOiBuZXdNZXNzYWdlVG9JbnNlcnQuY2hhdElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgc2VuZGVySWQ6IG5ld01lc3NhZ2VUb0luc2VydC5zZW5kZXJJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIHsgXG4gICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSwgXG4gICAgICAgICAgICAgICAgbmV3TWVzc2FnZTogZmluYWxOZXdNZXNzYWdlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHNlbmRpbmcgbWVzc2FnZTpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNldENoYXRib3RTdGF0dXMoY2hhdElkOiBzdHJpbmcsIGlzQWN0aXZlOiBib29sZWFuKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW4gfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNoYXRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldENoYXRzQ29sbGVjdGlvbigpO1xuICAgICAgICBhd2FpdCBjaGF0c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChjaGF0SWQpIH0sXG4gICAgICAgICAgICB7ICRzZXQ6IHsgaXNDaGF0Ym90QWN0aXZlOiBpc0FjdGl2ZSB9IH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBzZXR0aW5nIGNoYXRib3Qgc3RhdHVzOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RhcnROZXdDaGF0cyh1c2VyczogVXNlcltdLCBtZXNzYWdlOiBzdHJpbmcsIGNvbXBhbnlJZDogc3RyaW5nLCBhZ2VudElkOiBzdHJpbmcpOiBQcm9taXNlPENoYXRbXT4ge1xuICAgIGNvbnN0IGNoYXRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldENoYXRzQ29sbGVjdGlvbigpO1xuICAgIGNvbnN0IG5ld09yVXBkYXRlZENoYXRzOiBDaGF0W10gPSBbXTtcblxuICAgIGZvciAoY29uc3QgdXNlciBvZiB1c2Vycykge1xuICAgICAgICBjb25zdCBleGlzdGluZ0NoYXREb2MgPSBhd2FpdCBjaGF0c0NvbGxlY3Rpb24uZmluZE9uZSh7XG4gICAgICAgICAgICB1c2VySWQ6IG5ldyBPYmplY3RJZCh1c2VyLmlkKSxcbiAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZClcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGV4aXN0aW5nQ2hhdERvYykge1xuICAgICAgICAgICAgYXdhaXQgc2VuZE1lc3NhZ2UoZXhpc3RpbmdDaGF0RG9jLl9pZC50b1N0cmluZygpLCBtZXNzYWdlLCBhZ2VudElkKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgdXBkYXRlZENoYXQ6IENoYXQgPSB7XG4gICAgICAgICAgICAgICAgLi4uKGV4aXN0aW5nQ2hhdERvYyBhcyBhbnkpLFxuICAgICAgICAgICAgICAgIF9pZDogZXhpc3RpbmdDaGF0RG9jLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiBleGlzdGluZ0NoYXREb2MuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgdXNlcklkOiBleGlzdGluZ0NoYXREb2MudXNlcklkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBleGlzdGluZ0NoYXREb2MuY29tcGFueUlkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgbGFzdE1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvTG9jYWxlVGltZVN0cmluZyhbXSwgeyBob3VyOiAnMi1kaWdpdCcsIG1pbnV0ZTogJzItZGlnaXQnIH0pLFxuICAgICAgICAgICAgICAgIHVzZXI6IHVzZXIsXG4gICAgICAgICAgICAgICAgbWVzc2FnZXM6IFtdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG5ld09yVXBkYXRlZENoYXRzLnB1c2godXBkYXRlZENoYXQpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgY29uc3QgbmV3Q2hhdERhdGE6IE9taXQ8Q2hhdCwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgICAgICB1c2VySWQ6IG5ldyBPYmplY3RJZCh1c2VyLmlkKSxcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpLFxuICAgICAgICAgICAgICAgIGxhc3RNZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogdGltZXN0YW1wLnRvTG9jYWxlVGltZVN0cmluZyhbXSwgeyBob3VyOiAnMi1kaWdpdCcsIG1pbnV0ZTogJzItZGlnaXQnIH0pLFxuICAgICAgICAgICAgICAgIHVucmVhZENvdW50OiAwLFxuICAgICAgICAgICAgICAgIHByaW9yaXR5OiAnbm9ybWFsJyxcbiAgICAgICAgICAgICAgICBjaGFubmVsOiAnV2ViY2hhdCcsXG4gICAgICAgICAgICAgICAgaXNDaGF0Ym90QWN0aXZlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlczogW11cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBjaGF0UmVzdWx0ID0gYXdhaXQgY2hhdHNDb2xsZWN0aW9uLmluc2VydE9uZShuZXdDaGF0RGF0YSBhcyBhbnkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoY2hhdFJlc3VsdC5pbnNlcnRlZElkKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgc2VuZE1lc3NhZ2UoY2hhdFJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksIG1lc3NhZ2UsIGFnZW50SWQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNyZWF0ZWRDaGF0OiBDaGF0ID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi4obmV3Q2hhdERhdGEgYXMgYW55KSxcbiAgICAgICAgICAgICAgICAgICAgX2lkOiBjaGF0UmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGNoYXRSZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICB1c2VySWQ6IG5ld0NoYXREYXRhLnVzZXJJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBjb21wYW55SWQ6IG5ld0NoYXREYXRhLmNvbXBhbnlJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICB1c2VyOiB1c2VyLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlczogW10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBuZXdPclVwZGF0ZWRDaGF0cy5wdXNoKGNyZWF0ZWRDaGF0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3T3JVcGRhdGVkQ2hhdHM7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVDYW1wYWlnbihkYXRhOiBQYXJ0aWFsPENhbXBhaWduPiAmIHsgc2NoZWR1bGVUeXBlPzogJ25vdycgfCAnbGF0ZXInIH0sIGNvbXBhbnlJZDogc3RyaW5nLCBhZ2VudElkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgY2FtcGFpZ24/OiBDYW1wYWlnbjsgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNhbXBhaWduc0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRDYW1wYWlnbnNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzQ29sbGVjdGlvbiA9IGF3YWl0IGdldENvbnRhY3RzQ29sbGVjdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgbGV0IHN0YXR1czogQ2FtcGFpZ25bJ3N0YXR1cyddID0gJ0RyYWZ0JztcbiAgICAgICAgbGV0IHNlbnRBdDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgZGVsaXZlcnkgPSAwO1xuICAgICAgICBsZXQgZW5nYWdlbWVudCA9IDA7XG4gICAgICAgIGxldCBjb252ZXJzaW9uID0gMDtcblxuICAgICAgICBpZiAoZGF0YS5zY2hlZHVsZVR5cGUgPT09ICdub3cnKSB7XG4gICAgICAgICAgICBzdGF0dXMgPSAnQ29tcGxldGVkJztcbiAgICAgICAgICAgIHNlbnRBdCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgIC8vIEdlbmVyYXRlIG1vY2sgcGVyZm9ybWFuY2UgZGF0YSBmb3IgaW1tZWRpYXRlIGNhbXBhaWduc1xuICAgICAgICAgICAgZGVsaXZlcnkgPSA5NSArIE1hdGgucmFuZG9tKCkgKiA1OyBcbiAgICAgICAgICAgIGVuZ2FnZW1lbnQgPSAxMCArIE1hdGgucmFuZG9tKCkgKiAxNTtcbiAgICAgICAgICAgIGNvbnZlcnNpb24gPSAyICsgTWF0aC5yYW5kb20oKSAqIDg7IFxuXG4gICAgICAgICAgICAvLyBBY3R1YWxseSBzZW5kIHRoZSBtZXNzYWdlc1xuICAgICAgICAgICAgaWYgKGRhdGEuYXVkaWVuY2UgJiYgZGF0YS5tZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXVkaWVuY2VDb250YWN0cyA9IGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi5maW5kKHsgX2lkOiB7ICRpbjogZGF0YS5hdWRpZW5jZS5tYXAoaWQgPT4gbmV3IE9iamVjdElkKGlkKSkgfSB9KS50b0FycmF5KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdXNlcnMgPSBhdWRpZW5jZUNvbnRhY3RzLm1hcChjID0+ICh7XG4gICAgICAgICAgICAgICAgICAgIC4uLmMsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBjLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBfaWQ6IGMuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgfSkpIGFzIFVzZXJbXTtcblxuICAgICAgICAgICAgICAgIGF3YWl0IHN0YXJ0TmV3Q2hhdHModXNlcnMsIGRhdGEubWVzc2FnZSwgY29tcGFueUlkLCBhZ2VudElkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChkYXRhLnNjaGVkdWxlVHlwZSA9PT0gJ2xhdGVyJykge1xuICAgICAgICAgICAgc3RhdHVzID0gJ1NjaGVkdWxlZCc7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBuZXdDYW1wYWlnbjogT21pdDxDYW1wYWlnbiwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgIHRpdGxlOiBkYXRhLnRpdGxlISxcbiAgICAgICAgICAgIHR5cGU6IGRhdGEudHlwZSB8fCAnQnJvYWRjYXN0JyxcbiAgICAgICAgICAgIHN0YXR1czogc3RhdHVzLFxuICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSxcbiAgICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgYXVkaWVuY2U6IGRhdGEuYXVkaWVuY2UgfHwgW10sXG4gICAgICAgICAgICBtZXNzYWdlOiBkYXRhLm1lc3NhZ2UgfHwgXCJcIixcbiAgICAgICAgICAgIHNlbnRBdDogc2VudEF0LFxuICAgICAgICAgICAgZGVsaXZlcnksXG4gICAgICAgICAgICBlbmdhZ2VtZW50LFxuICAgICAgICAgICAgY29udmVyc2lvbixcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjYW1wYWlnbnNDb2xsZWN0aW9uLmluc2VydE9uZShuZXdDYW1wYWlnbiBhcyBhbnkpO1xuICAgICAgICBpZiAocmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNyZWF0ZWRDYW1wYWlnbjogQ2FtcGFpZ24gPSB7XG4gICAgICAgICAgICAgICAgLi4ubmV3Q2FtcGFpZ24sXG4gICAgICAgICAgICAgICAgX2lkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBjYW1wYWlnbjogY3JlYXRlZENhbXBhaWduIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIGNyZWF0ZSBjYW1wYWlnbi5cIiB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDcmVhdGUgY2FtcGFpZ24gZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZC5cIiB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENhbXBhaWduc0J5Q29tcGFueShjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8Q2FtcGFpZ25bXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghY29tcGFueUlkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNvbXBhbnlJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjYW1wYWlnbnNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q2FtcGFpZ25zQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBjYW1wYWlnbnMgPSBhd2FpdCBjYW1wYWlnbnNDb2xsZWN0aW9uLmZpbmQoeyBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpIH0pLnNvcnQoeyBjcmVhdGVkQXQ6IC0xIH0pLnRvQXJyYXkoKTtcblxuICAgICAgICByZXR1cm4gY2FtcGFpZ25zLm1hcChjYW1wYWlnbiA9PiAoe1xuICAgICAgICAgICAgLi4uY2FtcGFpZ24sXG4gICAgICAgICAgICBfaWQ6IGNhbXBhaWduLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgaWQ6IGNhbXBhaWduLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgY29tcGFueUlkOiBjYW1wYWlnbi5jb21wYW55SWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoY2FtcGFpZ24uY3JlYXRlZEF0KS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgc2VudEF0OiBjYW1wYWlnbi5zZW50QXQgPyBuZXcgRGF0ZShjYW1wYWlnbi5zZW50QXQpLnRvSVNPU3RyaW5nKCkgOiB1bmRlZmluZWQsXG4gICAgICAgIH0pKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgY2FtcGFpZ25zOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG4gICAgXG4gICAgXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjhSQSttQnNCIn0=
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:8d8e6f [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"70550f3a06ff63d8c1c6555f235fca6dc7330a34c0":"sendMessage"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "sendMessage": (()=>sendMessage)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var sendMessage = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("70550f3a06ff63d8c1c6555f235fca6dc7330a34c0", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "sendMessage"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:0416f8 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"609d4f76fb496a216c91066f2d4684c160f7fd02a4":"setChatbotStatus"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "setChatbotStatus": (()=>setChatbotStatus)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var setChatbotStatus = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("609d4f76fb496a216c91066f2d4684c160f7fd02a4", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "setChatbotStatus"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:0dfd6f [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"78e1313773a3e1763f3457daecfd448d9fb5a79106":"startNewChats"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "startNewChats": (()=>startNewChats)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var startNewChats = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("78e1313773a3e1763f3457daecfd448d9fb5a79106", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "startNewChats"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:5bd730 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40ddb22e27e4cef48e6f8b4f4548db5d5d7b59d98c":"getContactsByCompany"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getContactsByCompany": (()=>getContactsByCompany)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var getContactsByCompany = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("40ddb22e27e4cef48e6f8b4f4548db5d5d7b59d98c", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getContactsByCompany"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:2c90a2 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"780997e968e3cabe30367154f3b8d33efe060f51bd":"addNoteToContact"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "addNoteToContact": (()=>addNoteToContact)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var addNoteToContact = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("780997e968e3cabe30367154f3b8d33efe060f51bd", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "addNoteToContact"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:629e6d [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"60baf496c3062efe4fd326c7af2943c2196e029cce":"assignAgentToContact"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "assignAgentToContact": (()=>assignAgentToContact)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var assignAgentToContact = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("60baf496c3062efe4fd326c7af2943c2196e029cce", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "assignAgentToContact"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:c5bffc [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"4087786a1113f54129434f2a7816d4f589ebf1b846":"getAgentsByCompany"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getAgentsByCompany": (()=>getAgentsByCompany)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var getAgentsByCompany = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("4087786a1113f54129434f2a7816d4f589ebf1b846", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getAgentsByCompany"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:affef1 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"783b92989339fb5b73f8cf537b1cd9811ad31c6bdf":"createContact"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "createContact": (()=>createContact)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var createContact = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("783b92989339fb5b73f8cf537b1cd9811ad31c6bdf", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "createContact"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:d7a11f [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40ff6278859af3f524ec2ac84e79db5390255a1668":"createAnnouncement"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "createAnnouncement": (()=>createAnnouncement)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var createAnnouncement = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("40ff6278859af3f524ec2ac84e79db5390255a1668", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "createAnnouncement"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:2c22d4 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"409b841e613ce80e5c40df0364f6df47d80421d363":"getAnnouncementsByCompany"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getAnnouncementsByCompany": (()=>getAnnouncementsByCompany)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var getAnnouncementsByCompany = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("409b841e613ce80e5c40df0364f6df47d80421d363", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getAnnouncementsByCompany"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:3fe081 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"60daecd654edd9aad0f66818f3643edb5b83926f6b":"markAnnouncementAsRead"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "markAnnouncementAsRead": (()=>markAnnouncementAsRead)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var markAnnouncementAsRead = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("60daecd654edd9aad0f66818f3643edb5b83926f6b", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "markAnnouncementAsRead"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:01843e [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"70fcfed8bffc4caf060f93474e4a8996b303b4b0fc":"addCommentToAnnouncement"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "addCommentToAnnouncement": (()=>addCommentToAnnouncement)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var addCommentToAnnouncement = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("70fcfed8bffc4caf060f93474e4a8996b303b4b0fc", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "addCommentToAnnouncement"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:19ac09 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"404d8f1b9c2cd44e439a3f4dba37f710171ff8f88b":"getActivityLogs"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getActivityLogs": (()=>getActivityLogs)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var getActivityLogs = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("404d8f1b9c2cd44e439a3f4dba37f710171ff8f88b", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getActivityLogs"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:0ec0be [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40038480f4f658c87505338e9dcd7c2a9a8544e267":"getCampaignsByCompany"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getCampaignsByCompany": (()=>getCampaignsByCompany)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var getCampaignsByCompany = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("40038480f4f658c87505338e9dcd7c2a9a8544e267", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getCampaignsByCompany"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:2d9016 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"70a879e7bd08c30d234a83e75003b58f7cb4bfd128":"createCampaign"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "createCampaign": (()=>createCampaign)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var createCampaign = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("70a879e7bd08c30d234a83e75003b58f7cb4bfd128", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "createCampaign"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:4ae495 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"70780065eead8858964f97f44aaa44c48f608e84ba":"handleSignUp"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "handleSignUp": (()=>handleSignUp)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var handleSignUp = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("70780065eead8858964f97f44aaa44c48f608e84ba", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "handleSignUp"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/page.tsx [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>Home)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/jsx-dev-runtime.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$chat$2d$layout$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/chat-layout.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$vertical$2d$nav$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/vertical-nav.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$contacts$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/contacts-view.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$agents$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/agents-view.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$dashboard$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/dashboard-view.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$announcements$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/announcements-view.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$settings$2d$dialog$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/settings-dialog.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$campaigns$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/campaigns-view.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$my$2d$performance$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/my-performance-view.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$auth$2d$form$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/auth-form.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$app$2f$data$3a$4ae495__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$text$2f$javascript$3e$__ = __turbopack_context__.i("[project]/src/app/data:4ae495 [app-client] (ecmascript) <text/javascript>");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$hooks$2f$use$2d$toast$2e$ts__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/hooks/use-toast.ts [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$auth$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next-auth/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$ui$2f$kena$2d$ai$2d$logo$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/ui/kena-ai-logo.tsx [app-client] (ecmascript)");
;
var _s = __turbopack_context__.k.signature();
"use client";
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
function Home({ params, searchParams }) {
    _s();
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["use"])(params);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["use"])(searchParams);
    const [activeView, setActiveView] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])("Chat");
    const [isNavOpen, setIsNavOpen] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])(false);
    const [isSettingsOpen, setIsSettingsOpen] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])(false);
    const [initialContact, setInitialContact] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])(null);
    const { toast } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$hooks$2f$use$2d$toast$2e$ts__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useToast"])();
    const { data: session, status } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$auth$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useSession"])();
    const [currentUser, setCurrentUser] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])(null);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useEffect"])({
        "Home.useEffect": ()=>{
            if (session?.user) {
                // This is a bit of a hack to fit the session user into our existing UserProfile type.
                // In a real app, you'd likely unify these types.
                const user = session.user;
                const profile = {
                    id: user.id || user.sub,
                    name: user.name || 'Kena User',
                    email: user.email || '',
                    avatar: user.image || `https://picsum.photos/seed/${user.name}/100/100`,
                    role: user.role || 'agent',
                    phone: user.phone || '',
                    companyId: user.companyId || ''
                };
                setCurrentUser(profile);
                if (profile.role === 'admin' && activeView !== 'Dashboard') {
                    setActiveView('Dashboard');
                } else if (activeView === 'Dashboard' && profile.role !== 'admin') {
                    setActiveView('Chat');
                }
            } else {
                setCurrentUser(null);
            }
        }
    }["Home.useEffect"], [
        session
    ]);
    const onSignUp = async (name, email, password_unused)=>{
        const result = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$app$2f$data$3a$4ae495__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$text$2f$javascript$3e$__["handleSignUp"])(name, email, password_unused);
        if (result.success && result.agent) {
            toast({
                title: "Account Created!",
                description: "You can now sign in with your new credentials."
            });
        }
        return result;
    };
    const handleLogout = ()=>{
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$auth$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["signOut"])();
        setCurrentUser(null);
        setActiveView('Chat');
    };
    const handleUpdateUser = (updatedUser)=>{
        setCurrentUser((prev)=>prev ? {
                ...prev,
                ...updatedUser
            } : null);
    };
    const handleNavigateToChat = (contact)=>{
        setInitialContact(contact);
        setActiveView("Chat");
        // Reset initialContact after a short delay to allow ChatLayout to pick it up
        setTimeout(()=>setInitialContact(null), 100);
    };
    const renderView = ()=>{
        const props = {
            onMenuClick: ()=>setIsNavOpen(true),
            user: currentUser
        };
        switch(activeView){
            case "Chat":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$chat$2d$layout$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ChatLayout"], {
                    ...props,
                    initialContact: initialContact
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 95,
                    columnNumber: 16
                }, this);
            case "Contacts":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$contacts$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ContactsView"], {
                    ...props,
                    onNavigateToChat: handleNavigateToChat
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 97,
                    columnNumber: 16
                }, this);
            case "Agents":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$agents$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AgentsView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 99,
                    columnNumber: 16
                }, this);
            case "Dashboard":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$dashboard$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DashboardView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 101,
                    columnNumber: 16
                }, this);
            case "Announcements":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$announcements$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AnnouncementsView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 103,
                    columnNumber: 16
                }, this);
            case "My Performance":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$my$2d$performance$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MyPerformanceView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 105,
                    columnNumber: 16
                }, this);
            case "Campaigns":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$campaigns$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CampaignsView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 107,
                    columnNumber: 17
                }, this);
            default:
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$chat$2d$layout$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ChatLayout"], {
                    user: currentUser,
                    onMenuClick: ()=>setIsNavOpen(true),
                    initialContact: initialContact
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 109,
                    columnNumber: 16
                }, this);
        }
    };
    if (status === "loading") {
        return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])("main", {
            className: "flex h-screen w-full items-center justify-center bg-background p-4",
            children: /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$ui$2f$kena$2d$ai$2d$logo$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["KenaAILogo"], {
                className: "h-12 animate-pulse"
            }, void 0, false, {
                fileName: "[project]/src/app/page.tsx",
                lineNumber: 116,
                columnNumber: 13
            }, this)
        }, void 0, false, {
            fileName: "[project]/src/app/page.tsx",
            lineNumber: 115,
            columnNumber: 9
        }, this);
    }
    if (!currentUser) {
        return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])("main", {
            className: "flex h-screen w-full items-center justify-center bg-background p-4 overflow-hidden auth-page-background",
            children: /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$auth$2d$form$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AuthForm"], {
                onSignUp: onSignUp
            }, void 0, false, {
                fileName: "[project]/src/app/page.tsx",
                lineNumber: 124,
                columnNumber: 9
            }, this)
        }, void 0, false, {
            fileName: "[project]/src/app/page.tsx",
            lineNumber: 123,
            columnNumber: 7
        }, this);
    }
    return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])("main", {
        className: "flex h-screen bg-background",
        children: [
            /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$settings$2d$dialog$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SettingsDialog"], {
                open: isSettingsOpen,
                onOpenChange: setIsSettingsOpen,
                user: currentUser,
                onUserUpdate: handleUpdateUser
            }, void 0, false, {
                fileName: "[project]/src/app/page.tsx",
                lineNumber: 131,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$vertical$2d$nav$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["VerticalNav"], {
                activeView: activeView,
                setActiveView: setActiveView,
                user: currentUser,
                onLogout: handleLogout,
                isOpen: isNavOpen,
                setIsOpen: setIsNavOpen,
                onSettingsClick: ()=>setIsSettingsOpen(true)
            }, void 0, false, {
                fileName: "[project]/src/app/page.tsx",
                lineNumber: 137,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])("div", {
                className: "flex-1 md:pl-[70px] min-w-0",
                children: renderView()
            }, void 0, false, {
                fileName: "[project]/src/app/page.tsx",
                lineNumber: 146,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true, {
        fileName: "[project]/src/app/page.tsx",
        lineNumber: 130,
        columnNumber: 5
    }, this);
}
_s(Home, "Pi3Gd1JEy6baEUxMeO3J6W9G2yQ=", false, function() {
    return [
        __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$hooks$2f$use$2d$toast$2e$ts__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useToast"],
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$auth$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useSession"]
    ];
});
_c = Home;
var _c;
__turbopack_context__.k.register(_c, "Home");
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
}]);

//# sourceMappingURL=src_app_40fb9253._.js.map