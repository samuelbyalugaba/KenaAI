{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/dashboard/settings-dialog.tsx"],"sourcesContent":["\n\"use client\"\n\nimport * as React from \"react\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport type { ActivityLog, Agent, UserProfile } from \"@/types\"\nimport { useTheme } from \"@/hooks/use-theme\"\nimport { Camera, User, Settings as SettingsIcon, MessageSquare, Bot, Link, Shield, Users, HelpCircle, Log, CreditCard, Puzzle } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { ScrollArea } from \"../ui/scroll-area\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"../ui/card\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"../ui/table\"\nimport { Textarea } from \"../ui/textarea\"\nimport { getActivityLogs, updateAgentAvatar, updateAgentPassword, updateAgentProfile } from \"@/app/actions\"\nimport { Skeleton } from \"../ui/skeleton\"\nimport { Badge } from \"../ui/badge\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { z } from \"zod\"\nimport { useForm } from \"react-hook-form\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"../ui/form\"\n\ntype SettingsDialogProps = {\n  open: boolean\n  onOpenChange: (open: boolean) => void\n  user: UserProfile | null\n  onUserUpdate: (user: Partial<UserProfile>) => void\n}\n\ntype SettingsSection = \"profile\" | \"integrations\" | \"chatbot\" | \"help\"\n\nconst settingsNavItems = (user: UserProfile | null) => {\n    const allItems = [\n        { id: \"profile\", label: \"Profile & Account\", icon: User, forAll: true },\n        { id: \"integrations\", label: \"Platform Integrations\", icon: Link, forAll: false },\n        { id: \"chatbot\", label: \"Chatbot Settings\", icon: Bot, forAll: false },\n        { id: \"help\", label: \"Help & Support\", icon: HelpCircle, forAll: true },\n    ];\n    if (user?.role === 'admin') {\n        return allItems;\n    }\n    return allItems.filter(item => item.forAll);\n}\n\nconst SettingsNav = ({ activeSection, setActiveSection, user }: { activeSection: SettingsSection, setActiveSection: (section: SettingsSection) => void, user: UserProfile | null }) => (\n    <nav className=\"flex flex-col gap-1 p-2 border-b md:border-b-0 md:border-r\">\n        {settingsNavItems(user).map(item => (\n            <Button\n                key={item.id}\n                variant={activeSection === item.id ? \"secondary\" : \"ghost\"}\n                className=\"justify-start gap-3\"\n                onClick={() => setActiveSection(item.id as SettingsSection)}\n            >\n                <item.icon className=\"h-5 w-5\" />\n                <span className=\"hidden md:inline\">{item.label}</span>\n            </Button>\n        ))}\n    </nav>\n);\n\n// --- Setting Section Components ---\nconst profileFormSchema = z.object({\n  name: z.string().min(1, \"Name is required.\"),\n  email: z.string().email(\"Invalid email address.\"),\n  phone: z.string().min(1, \"Phone number is required.\"),\n})\ntype ProfileFormValues = z.infer<typeof profileFormSchema>\n\nconst passwordFormSchema = z.object({\n    currentPassword: z.string().min(1, \"Current password is required.\"),\n    newPassword: z.string().min(8, \"New password must be at least 8 characters.\"),\n    confirmPassword: z.string()\n}).refine((data) => data.newPassword === data.confirmPassword, {\n    message: \"Passwords do not match.\",\n    path: [\"confirmPassword\"],\n})\ntype PasswordFormValues = z.infer<typeof passwordFormSchema>\n\n\nconst ProfileSettings = ({ user, onUserUpdate }: { user: UserProfile, onUserUpdate: (user: Partial<UserProfile>) => void }) => {\n    const { theme, setTheme } = useTheme();\n    const fileInputRef = React.useRef<HTMLInputElement>(null);\n    const { toast } = useToast();\n\n    const profileForm = useForm<ProfileFormValues>({\n        resolver: zodResolver(profileFormSchema),\n        defaultValues: {\n            name: user.name,\n            email: user.email,\n            phone: user.phone,\n        }\n    })\n\n    const passwordForm = useForm<PasswordFormValues>({\n        resolver: zodResolver(passwordFormSchema),\n        defaultValues: {\n            currentPassword: \"\",\n            newPassword: \"\",\n            confirmPassword: \"\",\n        }\n    })\n\n    const handleAvatarChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        const file = e.target.files?.[0];\n        if (!file) return;\n\n        const reader = new FileReader();\n        reader.onload = async (event) => {\n            const dataUrl = event.target?.result as string;\n            \n            const result = await updateAgentAvatar(user.id, dataUrl);\n\n            if(result.success && result.avatar) {\n                onUserUpdate({ avatar: result.avatar });\n                toast({\n                    title: \"Avatar Updated\",\n                    description: \"Your profile picture has been changed.\",\n                });\n            } else {\n                 toast({\n                    variant: \"destructive\",\n                    title: \"Upload Failed\",\n                    description: result.message || \"Could not update your avatar.\",\n                });\n            }\n        };\n        reader.readAsDataURL(file);\n    };\n\n    const handleProfileSubmit = async (values: ProfileFormValues) => {\n        const result = await updateAgentProfile(user.id, values.name, values.email, values.phone, user.companyId);\n\n        if (result.success && result.agent) {\n            onUserUpdate(result.agent);\n            toast({\n                title: \"Profile Updated\",\n                description: \"Your personal information has been saved.\",\n            });\n        } else {\n            toast({\n                variant: \"destructive\",\n                title: \"Update Failed\",\n                description: result.message,\n            });\n        }\n    }\n    \n    const handlePasswordSubmit = async (values: PasswordFormValues) => {\n        const result = await updateAgentPassword(user.id, values.currentPassword, values.newPassword, user.companyId);\n\n        if (result.success) {\n            toast({\n                title: \"Password Updated\",\n                description: \"Your password has been changed successfully.\",\n            });\n            passwordForm.reset();\n        } else {\n            toast({\n                variant: \"destructive\",\n                title: \"Update Failed\",\n                description: result.message,\n            });\n        }\n    }\n\n\n    return (\n        <Tabs defaultValue=\"personal\" className=\"h-full\">\n            <TabsList className=\"mb-4\">\n                <TabsTrigger value=\"personal\">Personal Info</TabsTrigger>\n                <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n                <TabsTrigger value=\"appearance\">Appearance</TabsTrigger>\n            </TabsList>\n            <TabsContent value=\"personal\">\n                 <div className=\"space-y-6\">\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"relative\">\n                         <Avatar className=\"h-20 w-20\">\n                            <AvatarImage src={user.avatar} alt={user.name} />\n                            <AvatarFallback>{user.name.charAt(0)}</AvatarFallback>\n                          </Avatar>\n                          <input\n                                type=\"file\"\n                                ref={fileInputRef}\n                                className=\"hidden\"\n                                accept=\"image/png, image/jpeg, image/gif\"\n                                onChange={handleAvatarChange}\n                            />\n                          <Button variant=\"ghost\" size=\"icon\" className=\"absolute bottom-0 right-0 rounded-full h-8 w-8 bg-background/80 hover:bg-background\" onClick={() => fileInputRef.current?.click()}>\n                            <Camera className=\"h-4 w-4\" />\n                            <span className=\"sr-only\">Change Photo</span>\n                          </Button>\n                      </div>\n                      <div>\n                        <h3 className=\"text-lg font-semibold\">{user.name}</h3>\n                        <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                      </div>\n                    </div>\n                     <Form {...profileForm}>\n                        <form onSubmit={profileForm.handleSubmit(handleProfileSubmit)} className=\"space-y-4\">\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                                <FormField control={profileForm.control} name=\"name\" render={({ field }) => (\n                                    <FormItem> <FormLabel>Name</FormLabel> <FormControl><Input {...field} /></FormControl> <FormMessage /> </FormItem>\n                                )} />\n                                <FormField control={profileForm.control} name=\"email\" render={({ field }) => (\n                                    <FormItem> <FormLabel>Email Address</FormLabel> <FormControl><Input type=\"email\" {...field} /></FormControl> <FormMessage /> </FormItem>\n                                )} />\n                            </div>\n                            <FormField control={profileForm.control} name=\"phone\" render={({ field }) => (\n                                <FormItem> <FormLabel>Phone Number</FormLabel> <FormControl><Input type=\"tel\" {...field} /></FormControl> <FormMessage /> </FormItem>\n                            )} />\n                            <div className=\"flex justify-end\"> <Button type=\"submit\">Save Changes</Button> </div>\n                        </form>\n                    </Form>\n                     <div className=\"space-y-4 border-t pt-6\">\n                        <h4 className=\"font-semibold\">Change Password</h4>\n                         <Form {...passwordForm}>\n                            <form onSubmit={passwordForm.handleSubmit(handlePasswordSubmit)} className=\"space-y-4\">\n                                <FormField control={passwordForm.control} name=\"currentPassword\" render={({ field }) => (\n                                    <FormItem> <FormLabel>Current Password</FormLabel> <FormControl><Input type=\"password\" {...field} /></FormControl> <FormMessage /> </FormItem>\n                                )}/>\n                                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                                    <FormField control={passwordForm.control} name=\"newPassword\" render={({ field }) => (\n                                        <FormItem> <FormLabel>New Password</FormLabel> <FormControl><Input type=\"password\" {...field} /></FormControl> <FormMessage /> </FormItem>\n                                    )}/>\n                                    <FormField control={passwordForm.control} name=\"confirmPassword\" render={({ field }) => (\n                                        <FormItem> <FormLabel>Confirm Password</FormLabel> <FormControl><Input type=\"password\" {...field} /></FormControl> <FormMessage /> </FormItem>\n                                    )}/>\n                                </div>\n                                <div className=\"flex justify-end\"> <Button type=\"submit\">Update Password</Button> </div>\n                            </form>\n                        </Form>\n                    </div>\n                  </div>\n            </TabsContent>\n            <TabsContent value=\"notifications\">\n                 <div className=\"space-y-6\">\n                      <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div>\n                            <h4 className=\"font-medium\">In-App Notifications</h4>\n                            <p className=\"text-sm text-muted-foreground\">Receive alerts directly within the dashboard.</p>\n                        </div>\n                        <Switch defaultChecked />\n                      </div>\n                       <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div>\n                            <h4 className=\"font-medium\">Email Notifications</h4>\n                            <p className=\"text-sm text-muted-foreground\">Get summaries and important alerts sent to your email.</p>\n                        </div>\n                        <Switch />\n                      </div>\n                       <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div>\n                            <h4 className=\"font-medium\">SMS Notifications</h4>\n                            <p className=\"text-sm text-muted-foreground\">Receive urgent alerts via text message.</p>\n                        </div>\n                        <Switch />\n                      </div>\n                       <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div>\n                            <h4 className=\"font-medium\">Push Notifications</h4>\n                            <p className=\"text-sm text-muted-foreground\">Get browser notifications for new messages.</p>\n                        </div>\n                        <Switch defaultChecked />\n                      </div>\n                 </div>\n                 <div className=\"flex justify-end pt-6\"> <Button>Save Preferences</Button> </div>\n            </TabsContent>\n            <TabsContent value=\"appearance\">\n                 <div className=\"space-y-6\">\n                     <div className=\"space-y-2\">\n                        <Label>Theme</Label>\n                        <div className=\"flex items-center space-x-2\">\n                            <Button variant={theme === 'light' ? 'default' : 'outline'} onClick={() => setTheme('light')}>Light</Button>\n                            <Button variant={theme === 'dark' ? 'default' : 'outline'} onClick={() => setTheme('dark')}>Dark</Button>\n                        </div>\n                    </div>\n                     <div className=\"space-y-2\">\n                        <Label htmlFor=\"language\">Language</Label>\n                        <Select defaultValue=\"en-us\">\n                          <SelectTrigger id=\"language\"> <SelectValue /> </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"en-us\">English (United States)</SelectItem>\n                            <SelectItem value=\"es-es\">Español (España)</SelectItem>\n                            <SelectItem value=\"fr-fr\">Français (France)</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"timezone\">Time Zone</Label>\n                        <Select defaultValue=\"est\">\n                          <SelectTrigger id=\"timezone\"> <SelectValue /> </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"pst\">Pacific Standard Time (PST)</SelectItem>\n                            <SelectItem value=\"est\">Eastern Standard Time (EST)</SelectItem>\n                            <SelectItem value=\"gmt\">Greenwich Mean Time (GMT)</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                  </div>\n                  <div className=\"flex justify-end pt-6\"> <Button>Save Settings</Button> </div>\n            </TabsContent>\n        </Tabs>\n    )\n}\n\nconst IntegrationSettings = () => {\n    const integrations = [\n        { name: \"WhatsApp\", connected: true, icon: MessageSquare, description: \"Engage with customers on WhatsApp.\" },\n        { name: \"Facebook\", connected: false, icon: MessageSquare, description: \"Connect with your Facebook audience.\" },\n        { name: \"Instagram\", connected: true, icon: MessageSquare, description: \"Manage your Instagram DMs.\" },\n        { name: \"HubSpot\", comingSoon: true, icon: Puzzle, description: \"Sync contacts and leads with HubSpot.\" },\n        { name: \"Salesforce\", comingSoon: true, icon: Puzzle, description: \"Integrate with your Salesforce CRM.\" },\n        { name: \"Billing\", comingSoon: true, icon: CreditCard, description: \"Manage your subscription and view invoices.\" },\n    ];\n\n    return (\n        <div className=\"space-y-4\">\n            {integrations.map(int => (\n                <Card key={int.name}>\n                    <CardHeader className=\"flex flex-row items-center justify-between\">\n                        <div className=\"flex items-center gap-4\">\n                            <int.icon className=\"h-8 w-8 text-muted-foreground\" />\n                            <div>\n                                <CardTitle className=\"text-base\">{int.name} {int.comingSoon && <Badge variant=\"outline\" className=\"ml-2\">Coming Soon</Badge>}</CardTitle>\n                                <CardDescription className=\"text-xs\">{int.description}</CardDescription>\n                            </div>\n                        </div>\n                        <Button variant={int.connected ? \"destructive\" : \"default\"} disabled={int.comingSoon}>\n                            {int.connected ? \"Disconnect\" : \"Connect\"}\n                        </Button>\n                    </CardHeader>\n                </Card>\n            ))}\n        </div>\n    );\n};\n\nconst ChatbotSettings = () => (\n    <Card>\n        <CardHeader><CardTitle>Chatbot &amp; Conversation</CardTitle></CardHeader>\n        <CardContent className=\"space-y-6\">\n            <div className=\"space-y-2\">\n                <Label htmlFor=\"greeting\">Default Greeting</Label>\n                <Input id=\"greeting\" placeholder=\"Welcome to our support! How can I help you today?\" />\n            </div>\n            <div className=\"space-y-2\">\n                <Label htmlFor=\"fallback\">Fallback Response</Label>\n                <Input id=\"fallback\" placeholder=\"I'm sorry, I didn't understand. Let me get a human for you.\" />\n            </div>\n            <div className=\"space-y-2\">\n                <Label>Knowledge Base</Label>\n                 <Input id=\"picture\" type=\"file\" />\n                 <p className=\"text-xs text-muted-foreground\">Upload FAQs or training data to improve bot accuracy.</p>\n            </div>\n        </CardContent>\n    </Card>\n);\n\nconst HelpSettings = () => (\n    <div className=\"space-y-4\">\n        <Card>\n            <CardHeader><CardTitle>Help Center</CardTitle></CardHeader>\n            <CardContent>\n                <p className=\"text-muted-foreground\">Find articles, tutorials, and answers to common questions.</p>\n                <Button variant=\"outline\" className=\"mt-4\">Visit Help Center</Button>\n            </CardContent>\n        </Card>\n         <Card>\n            <CardHeader><CardTitle>Contact Support</CardTitle></CardHeader>\n            <CardContent>\n                <p className=\"text-muted-foreground\">Can't find what you're looking for? Chat with our support team.</p>\n                <Button className=\"mt-4\">Start Live Chat</Button>\n            </CardContent>\n        </Card>\n        <Card>\n            <CardHeader><CardTitle>Submit Feedback</CardTitle></CardHeader>\n            <CardContent className=\"space-y-4\">\n                 <Textarea placeholder=\"Share your suggestions or report a bug...\"/>\n                 <Button>Submit</Button>\n            </CardContent>\n        </Card>\n        <p className=\"text-center text-xs text-muted-foreground\">App Version: 1.0.0</p>\n    </div>\n);\n\n\nexport function SettingsDialog({ open, onOpenChange, user, onUserUpdate }: SettingsDialogProps) {\n  const [activeSection, setActiveSection] = React.useState<SettingsSection>(\"profile\");\n\n  if (!user) return null\n\n  const renderSection = () => {\n      switch (activeSection) {\n          case 'profile':\n              return <ProfileSettings user={user} onUserUpdate={onUserUpdate} />;\n          case 'integrations':\n              return <IntegrationSettings />;\n          case 'chatbot':\n              return <ChatbotSettings />;\n          case 'help':\n              return <HelpSettings />;\n          default:\n              return <ProfileSettings user={user} onUserUpdate={onUserUpdate} />;\n      }\n  }\n  \n  const sectionTitles: Record<SettingsSection, string> = {\n      profile: \"Profile & Account\",\n      integrations: \"Platform Integrations\",\n      chatbot: \"Chatbot Settings\",\n      help: \"Help & Support\"\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl w-full h-[90vh] flex flex-col p-0 gap-0\">\n        <DialogHeader className=\"p-4 border-b\">\n            <DialogTitle className=\"text-xl\">{sectionTitles[activeSection]}</DialogTitle>\n        </DialogHeader>\n        <div className=\"grid grid-cols-1 md:grid-cols-[200px_1fr] flex-1 overflow-hidden\">\n            <SettingsNav activeSection={activeSection} setActiveSection={setActiveSection} user={user} />\n            <ScrollArea className=\"flex-1\">\n                <div className=\"p-6\">\n                    {renderSection()}\n                </div>\n            </ScrollArea>\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\n    "],"names":[],"mappings":"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","debugId":null}}]
}