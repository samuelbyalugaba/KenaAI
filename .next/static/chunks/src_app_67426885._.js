(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/src/app/data:1ba267 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"7efa29b2bf7fa82364aadbf5011c649e7f21f09fbf":"createAgent"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "createAgent": (()=>createAgent)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var createAgent = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("7efa29b2bf7fa82364aadbf5011c649e7f21f09fbf", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "createAgent"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:8c44ad [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40d5d08abcb55310482395efa2b68b3d883c709e39":"getChatsByCompany"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getChatsByCompany": (()=>getChatsByCompany)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var getChatsByCompany = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("40d5d08abcb55310482395efa2b68b3d883c709e39", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getChatsByCompany"); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4vYWN0aW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbid1c2Ugc2VydmVyJztcblxuaW1wb3J0IHsgZ2V0RGIgfSBmcm9tIFwiQC9saWIvZGJcIjtcbmltcG9ydCB7IGhhc2hQYXNzd29yZCwgdmVyaWZ5UGFzc3dvcmQgfSBmcm9tIFwiQC9saWIvYXV0aFwiO1xuaW1wb3J0IHR5cGUgeyBBZ2VudCwgQWdlbnRSb2xlLCBBbm5vdW5jZW1lbnQsIENvbXBhbnksIENvbW1lbnQsIEFjdGl2aXR5TG9nLCBVc2VyLCBOb3RlLCBDaGF0LCBNZXNzYWdlLCBDaGFubmVsLCBDYW1wYWlnbiB9IGZyb20gXCJAL3R5cGVzXCI7XG5pbXBvcnQgeyBDb2xsZWN0aW9uLCBEYiwgT2JqZWN0SWQgfSBmcm9tIFwibW9uZ29kYlwiO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRBZ2VudHNDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxBZ2VudD4+IHtcbiAgICBjb25zdCBkYjogRGIgPSBhd2FpdCBnZXREYigpO1xuICAgIHJldHVybiBkYi5jb2xsZWN0aW9uPEFnZW50PignYWdlbnRzJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENvbXBhbmllc0NvbGxlY3Rpb24oKTogUHJvbWlzZTxDb2xsZWN0aW9uPENvbXBhbnk+PiB7XG4gICAgY29uc3QgZGI6IERiID0gYXdhaXQgZ2V0RGIoKTtcbiAgICByZXR1cm4gZGIuY29sbGVjdGlvbjxDb21wYW55PignY29tcGFuaWVzJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEFubm91bmNlbWVudHNDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxBbm5vdW5jZW1lbnQ+PiB7XG4gICAgY29uc3QgZGI6IERiID0gYXdhaXQgZ2V0RGIoKTtcbiAgICByZXR1cm4gZGIuY29sbGVjdGlvbjxBbm5vdW5jZW1lbnQ+KCdhbm5vdW5jZW1lbnRzJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEFjdGl2aXR5TG9nc0NvbGxlY3Rpb24oKTogUHJvbWlzZTxDb2xsZWN0aW9uPEFjdGl2aXR5TG9nPj4ge1xuICAgIGNvbnN0IGRiOiBEYiA9IGF3YWl0IGdldERiKCk7XG4gICAgcmV0dXJuIGRiLmNvbGxlY3Rpb248QWN0aXZpdHlMb2c+KCdhY3Rpdml0eV9sb2dzJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENvbnRhY3RzQ29sbGVjdGlvbigpOiBQcm9taXNlPENvbGxlY3Rpb248VXNlcj4+IHtcbiAgICBjb25zdCBkYjogRGIgPSBhd2FpdCBnZXREYigpO1xuICAgIHJldHVybiBkYi5jb2xsZWN0aW9uPFVzZXI+KCdjb250YWN0cycpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRDaGF0c0NvbGxlY3Rpb24oKTogUHJvbWlzZTxDb2xsZWN0aW9uPENoYXQ+PiB7XG4gICAgY29uc3QgZGI6IERiID0gYXdhaXQgZ2V0RGIoKTtcbiAgICByZXR1cm4gZGIuY29sbGVjdGlvbjxDaGF0PignY2hhdHMnKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0TWVzc2FnZXNDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxNZXNzYWdlPj4ge1xuICAgIGNvbnN0IGRiOiBEYiA9IGF3YWl0IGdldERiKCk7XG4gICAgcmV0dXJuIGRiLmNvbGxlY3Rpb248TWVzc2FnZT4oJ21lc3NhZ2VzJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENhbXBhaWduc0NvbGxlY3Rpb24oKTogUHJvbWlzZTxDb2xsZWN0aW9uPENhbXBhaWduPj4ge1xuICAgIGNvbnN0IGRiOiBEYiA9IGF3YWl0IGdldERiKCk7XG4gICAgcmV0dXJuIGRiLmNvbGxlY3Rpb248Q2FtcGFpZ24+KCdjYW1wYWlnbnMnKTtcbn1cblxuXG5hc3luYyBmdW5jdGlvbiBsb2dBY3Rpdml0eShjb21wYW55SWQ6IHN0cmluZyB8IE9iamVjdElkLCBhZ2VudE5hbWU6IHN0cmluZywgYWN0aW9uOiBzdHJpbmcsIGRldGFpbHM6IHN0cmluZykge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGxvZ3NDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWN0aXZpdHlMb2dzQ29sbGVjdGlvbigpO1xuICAgICAgICBhd2FpdCBsb2dzQ29sbGVjdGlvbi5pbnNlcnRPbmUoe1xuICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSxcbiAgICAgICAgICAgIGFnZW50TmFtZSxcbiAgICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICAgIGRldGFpbHMsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gbG9nIGFjdGl2aXR5OlwiLCBlcnJvcik7XG4gICAgfVxufVxuXG4vLyBBIHNpbXBsZSBoYXNoaW5nIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIHBzZXVkby1yYW5kb20gYnV0IGNvbnNpc3RlbnQgbnVtYmVyIGZyb20gYSBzdHJpbmcuXG5jb25zdCBzaW1wbGVIYXNoID0gKHN0cjogc3RyaW5nKSA9PiB7XG4gIGxldCBoYXNoID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjaGFyID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgaGFzaCA9IChoYXNoIDw8IDUpIC0gaGFzaCArIGNoYXI7XG4gICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgfVxuICByZXR1cm4gTWF0aC5hYnMoaGFzaCk7XG59O1xuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBZ2VudHNCeUNvbXBhbnkoY29tcGFueUlkOiBzdHJpbmcpOiBQcm9taXNlPEFnZW50W10+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIWNvbXBhbnlJZCB8fCAhT2JqZWN0SWQuaXNWYWxpZChjb21wYW55SWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZXNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0TWVzc2FnZXNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGFnZW50cyA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZCh7IGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkgfSwgeyBwcm9qZWN0aW9uOiB7IHBhc3N3b3JkOiAwIH0gfSkudG9BcnJheSgpO1xuXG4gICAgICAgIGNvbnN0IGFnZW50RGF0YVdpdGhTdGF0cyA9IGF3YWl0IFByb21pc2UuYWxsKGFnZW50cy5tYXAoYXN5bmMgKGFnZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICB0b2RheS5zZXRIb3VycygwLCAwLCAwLCAwKTtcblxuICAgICAgICAgICAgY29uc3QgY29udmVyc2F0aW9uc1RvZGF5ID0gYXdhaXQgbWVzc2FnZXNDb2xsZWN0aW9uLmNvdW50RG9jdW1lbnRzKHtcbiAgICAgICAgICAgICAgICBzZW5kZXJJZDogYWdlbnQuX2lkLFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogeyAkZ3RlOiB0b2RheS50b0lTT1N0cmluZygpIH0gXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3Qgc3RhdHVzZXM6IEFycmF5PCdPbmxpbmUnIHwgJ09mZmxpbmUnIHwgJ0J1c3knPiA9IFsnT25saW5lJywgJ09mZmxpbmUnLCAnQnVzeSddO1xuICAgICAgICAgICAgY29uc3QgaGFzaCA9IHNpbXBsZUhhc2goYWdlbnQubmFtZSk7XG4gICAgICAgICAgICBjb25zdCByYW5kb21TdGF0dXMgPSBzdGF0dXNlc1toYXNoICUgc3RhdHVzZXMubGVuZ3RoXTtcblxuICAgICAgICAgICAgbGV0IGF2Z1Jlc3BvbnNlVGltZSA9IFwiTi9BXCI7XG4gICAgICAgICAgICBsZXQgY3NhdDogbnVtYmVyIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICBpZiAoY29udmVyc2F0aW9uc1RvZGF5ID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF2Z1Jlc3BvbnNlTWludXRlcyA9IChoYXNoICUgNCkgKyAxOyAvLyAxIHRvIDQgbWludXRlc1xuICAgICAgICAgICAgICAgIGNvbnN0IGF2Z1Jlc3BvbnNlU2Vjb25kcyA9IGhhc2ggJSA2MDsgLy8gMCB0byA1OSBzZWNvbmRzXG4gICAgICAgICAgICAgICAgYXZnUmVzcG9uc2VUaW1lID0gYCR7YXZnUmVzcG9uc2VNaW51dGVzfW0gJHthdmdSZXNwb25zZVNlY29uZHN9c2A7XG4gICAgICAgICAgICAgICAgY3NhdCA9IDg1ICsgKGhhc2ggJSAxNSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uYWdlbnQsXG4gICAgICAgICAgICAgICAgX2lkOiBhZ2VudC5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBpZDogYWdlbnQuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBhZ2VudC5jb21wYW55SWQ/LnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY29udmVyc2F0aW9uc1RvZGF5LFxuICAgICAgICAgICAgICAgIHN0YXR1czogcmFuZG9tU3RhdHVzLFxuICAgICAgICAgICAgICAgIGF2Z1Jlc3BvbnNlVGltZSxcbiAgICAgICAgICAgICAgICBjc2F0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSkpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGFnZW50RGF0YVdpdGhTdGF0cztcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgYWdlbnRzIGJ5IGNvbXBhbnk6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUFubm91bmNlbWVudChkYXRhOiB7IHRpdGxlOiBzdHJpbmc7IGNvbnRlbnQ6IHN0cmluZzsgY2F0ZWdvcnk6IHN0cmluZzsgYXV0aG9ySWQ6IHN0cmluZzsgY29tcGFueUlkOiBzdHJpbmcgfSk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBtZXNzYWdlPzogc3RyaW5nOyBhbm5vdW5jZW1lbnQ/OiBBbm5vdW5jZW1lbnQgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QW5ub3VuY2VtZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcblxuICAgICAgICBjb25zdCBhdXRob3IgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBfaWQ6IG5ldyBPYmplY3RJZChkYXRhLmF1dGhvcklkKSB9KTtcbiAgICAgICAgaWYgKCFhdXRob3IpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkF1dGhvciBub3QgZm91bmQuXCIgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5ld0Fubm91bmNlbWVudDogT21pdDxBbm5vdW5jZW1lbnQsICdpZCcgfCAnX2lkJz4gPSB7XG4gICAgICAgICAgICB0aXRsZTogZGF0YS50aXRsZSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGRhdGEuY29udGVudCxcbiAgICAgICAgICAgIGNhdGVnb3J5OiBkYXRhLmNhdGVnb3J5IGFzIGFueSxcbiAgICAgICAgICAgIGF1dGhvcjoge1xuICAgICAgICAgICAgICAgIGlkOiBhdXRob3IuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgbmFtZTogYXV0aG9yLm5hbWUsXG4gICAgICAgICAgICAgICAgYXZhdGFyOiBhdXRob3IuYXZhdGFyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoZGF0YS5jb21wYW55SWQpLFxuICAgICAgICAgICAgZGF0ZTogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgcmVhZEJ5OiBbXSxcbiAgICAgICAgICAgIGNvbW1lbnRzOiBbXSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhbm5vdW5jZW1lbnRzQ29sbGVjdGlvbi5pbnNlcnRPbmUobmV3QW5ub3VuY2VtZW50IGFzIGFueSk7XG4gICAgICAgIGF3YWl0IGxvZ0FjdGl2aXR5KGRhdGEuY29tcGFueUlkLCBhdXRob3IubmFtZSwgJ0NyZWF0ZSBBbm5vdW5jZW1lbnQnLCBgUHVibGlzaGVkOiBcIiR7ZGF0YS50aXRsZX1cImApO1xuXG5cbiAgICAgICAgaWYgKHJlc3VsdC5pbnNlcnRlZElkKSB7XG4gICAgICAgICAgICBjb25zdCBjcmVhdGVkQW5ub3VuY2VtZW50OiBBbm5vdW5jZW1lbnQgPSB7XG4gICAgICAgICAgICAgICAgLi4uKG5ld0Fubm91bmNlbWVudCBhcyBPbWl0PEFubm91bmNlbWVudCwgJ19pZCcgfCAnaWQnPiksXG4gICAgICAgICAgICAgICAgX2lkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGRhdGEuY29tcGFueUlkKS50b1N0cmluZygpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGFubm91bmNlbWVudDogY3JlYXRlZEFubm91bmNlbWVudCB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIGNyZWF0ZSBhbm5vdW5jZW1lbnQuXCIgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQ3JlYXRlIGFubm91bmNlbWVudCBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkLlwiIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QW5ub3VuY2VtZW50c0J5Q29tcGFueShjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8QW5ub3VuY2VtZW50W10+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIWNvbXBhbnlJZCB8fCAhT2JqZWN0SWQuaXNWYWxpZChjb21wYW55SWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYW5ub3VuY2VtZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBbm5vdW5jZW1lbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBhbm5vdW5jZW1lbnRzID0gYXdhaXQgYW5ub3VuY2VtZW50c0NvbGxlY3Rpb24uZmluZCh7IGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkgfSkuc29ydCh7IGRhdGU6IC0xIH0pLnRvQXJyYXkoKTtcblxuICAgICAgICByZXR1cm4gYW5ub3VuY2VtZW50cy5tYXAoYW5ub3VuY2VtZW50ID0+ICh7XG4gICAgICAgICAgICAuLi5hbm5vdW5jZW1lbnQsXG4gICAgICAgICAgICBfaWQ6IGFubm91bmNlbWVudC5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGlkOiBhbm5vdW5jZW1lbnQuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBjb21wYW55SWQ6IGFubm91bmNlbWVudC5jb21wYW55SWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIHJlYWRCeTogYW5ub3VuY2VtZW50LnJlYWRCeSB8fCBbXSxcbiAgICAgICAgICAgIGNvbW1lbnRzOiAoYW5ub3VuY2VtZW50LmNvbW1lbnRzIHx8IFtdKS5tYXAoKGNvbW1lbnQ6IENvbW1lbnQpID0+ICh7XG4gICAgICAgICAgICAgICAgLi4uY29tbWVudCxcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKGNvbW1lbnQudGltZXN0YW1wKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgfSkpLFxuICAgICAgICB9KSk7XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgYW5ub3VuY2VtZW50cyBieSBjb21wYW55OlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYXJrQW5ub3VuY2VtZW50QXNSZWFkKGFubm91bmNlbWVudElkOiBzdHJpbmcsIGFnZW50SWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuIH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBhbm5vdW5jZW1lbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFubm91bmNlbWVudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGF3YWl0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICAgICAgICAgIHsgX2lkOiBuZXcgT2JqZWN0SWQoYW5ub3VuY2VtZW50SWQpIH0sXG4gICAgICAgICAgICB7ICRhZGRUb1NldDogeyByZWFkQnk6IGFnZW50SWQgfSB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiTWFyayBhcyByZWFkIGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWRkQ29tbWVudFRvQW5ub3VuY2VtZW50KGFubm91bmNlbWVudElkOiBzdHJpbmcsIGF1dGhvcklkOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuLCBjb21tZW50PzogQ29tbWVudCB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgYXV0aG9yID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5maW5kT25lKHsgX2lkOiBuZXcgT2JqZWN0SWQoYXV0aG9ySWQpIH0pO1xuICAgICAgICBpZiAoIWF1dGhvcikgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcblxuICAgICAgICBjb25zdCBuZXdDb21tZW50OiBDb21tZW50ID0ge1xuICAgICAgICAgICAgaWQ6IG5ldyBPYmplY3RJZCgpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBhdXRob3I6IHtcbiAgICAgICAgICAgICAgICBpZDogYXV0aG9yLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIG5hbWU6IGF1dGhvci5uYW1lLFxuICAgICAgICAgICAgICAgIGF2YXRhcjogYXV0aG9yLmF2YXRhclxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBhbm5vdW5jZW1lbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFubm91bmNlbWVudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGF3YWl0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICAgICAgICAgIHsgX2lkOiBuZXcgT2JqZWN0SWQoYW5ub3VuY2VtZW50SWQpIH0sXG4gICAgICAgICAgICB7ICRwdXNoOiB7IGNvbW1lbnRzOiBuZXdDb21tZW50IH0gfVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgY29tbWVudDogbmV3Q29tbWVudCB9O1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkFkZCBjb21tZW50IGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XG4gICAgfVxufVxuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVBZ2VudFByb2ZpbGUoYWdlbnRJZDogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIGVtYWlsOiBzdHJpbmcsIHBob25lOiBzdHJpbmcsIGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U/OiBzdHJpbmc7IGFnZW50PzogQWdlbnQ7IH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBhZ2VudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWdlbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgdXBkYXRlUmVzdWx0ID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi51cGRhdGVPbmUoXG4gICAgICAgICAgICB7IF9pZDogbmV3IE9iamVjdElkKGFnZW50SWQpIH0sXG4gICAgICAgICAgICB7ICRzZXQ6IHsgbmFtZSwgZW1haWwsIHBob25lIH0gfVxuICAgICAgICApO1xuXG4gICAgICAgIGlmICh1cGRhdGVSZXN1bHQubW9kaWZpZWRDb3VudCA9PT0gMCAmJiB1cGRhdGVSZXN1bHQubWF0Y2hlZENvdW50ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBZ2VudCBub3QgZm91bmQuXCIgfTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgYWdlbnRXaXRoU3RhdHMgPSBhd2FpdCBnZXRBZ2VudHNCeUNvbXBhbnkoY29tcGFueUlkKTtcbiAgICAgICAgY29uc3QgdXBkYXRlZEFnZW50ID0gYWdlbnRXaXRoU3RhdHMuZmluZChhID0+IGEuaWQgPT09IGFnZW50SWQpO1xuXG5cbiAgICAgICAgaWYgKHVwZGF0ZWRBZ2VudCkge1xuICAgICAgICAgICAgYXdhaXQgbG9nQWN0aXZpdHkoY29tcGFueUlkLCB1cGRhdGVkQWdlbnQubmFtZSwgJ1VwZGF0ZSBQcm9maWxlJywgYFVwZGF0ZWQgYWdlbnQgcHJvZmlsZSBmb3IgJHtuYW1lfWApO1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgYWdlbnQ6IHVwZGF0ZWRBZ2VudCB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIHJldHJpZXZlIHVwZGF0ZWQgYWdlbnQuXCIgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVXBkYXRlIGFnZW50IHByb2ZpbGUgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZC5cIiB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUFnZW50UGFzc3dvcmQoYWdlbnRJZDogc3RyaW5nLCBjdXJyZW50UGFzc3dvcmRfdW51c2VkOiBzdHJpbmcsIG5ld1Bhc3N3b3JkX3VudXNlZDogc3RyaW5nLCBjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBtZXNzYWdlOiBzdHJpbmcgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFnZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBZ2VudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGFnZW50ID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5maW5kT25lKHsgX2lkOiBuZXcgT2JqZWN0SWQoYWdlbnRJZCkgfSk7XG5cbiAgICAgICAgaWYgKCFhZ2VudCB8fCAhYWdlbnQucGFzc3dvcmQpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFnZW50IG5vdCBmb3VuZC5cIiB9O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBpc1Bhc3N3b3JkVmFsaWQgPSBhd2FpdCB2ZXJpZnlQYXNzd29yZChjdXJyZW50UGFzc3dvcmRfdW51c2VkLCBhZ2VudC5wYXNzd29yZCk7XG4gICAgICAgIGlmICghaXNQYXNzd29yZFZhbGlkKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJJbmNvcnJlY3QgY3VycmVudCBwYXNzd29yZC5cIiB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbmV3SGFzaGVkUGFzc3dvcmQgPSBhd2FpdCBoYXNoUGFzc3dvcmQobmV3UGFzc3dvcmRfdW51c2VkKTtcbiAgICAgICAgYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi51cGRhdGVPbmUoXG4gICAgICAgICAgICB7IF9pZDogbmV3IE9iamVjdElkKGFnZW50SWQpIH0sXG4gICAgICAgICAgICB7ICRzZXQ6IHsgcGFzc3dvcmQ6IG5ld0hhc2hlZFBhc3N3b3JkIH0gfVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgYXdhaXQgbG9nQWN0aXZpdHkoY29tcGFueUlkLCBhZ2VudC5uYW1lLCAnVXBkYXRlIFBhc3N3b3JkJywgYENoYW5nZWQgcGFzc3dvcmRgKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgbWVzc2FnZTogXCJQYXNzd29yZCB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5cIiB9O1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlVwZGF0ZSBwYXNzd29yZCBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkLlwiIH07XG4gICAgfVxufVxuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBoYW5kbGVMb2dpbihlbWFpbDogc3RyaW5nLCBwYXNzd29yZF91bnVzZWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBtZXNzYWdlPzogc3RyaW5nOyBhZ2VudD86IEFnZW50IH0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgIGNvbnN0IGFnZW50RG9jID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5maW5kT25lKHsgZW1haWw6IGVtYWlsLnRvTG93ZXJDYXNlKCkgfSk7XG5cbiAgICAgIGlmIChhZ2VudERvYyAmJiBhZ2VudERvYy5wYXNzd29yZCkge1xuICAgICAgICBjb25zdCBpc1Bhc3N3b3JkVmFsaWQgPSBhd2FpdCB2ZXJpZnlQYXNzd29yZChwYXNzd29yZF91bnVzZWQsIGFnZW50RG9jLnBhc3N3b3JkKTtcbiAgICAgICAgaWYgKGlzUGFzc3dvcmRWYWxpZCkge1xuICAgICAgICAgIGNvbnN0IHsgcGFzc3dvcmQsIC4uLmFnZW50RGF0YSB9ID0gYWdlbnREb2M7XG4gICAgICAgICAgY29uc3QgYWdlbnQ6IEFnZW50ID0ge1xuICAgICAgICAgICAgLi4uYWdlbnREYXRhLFxuICAgICAgICAgICAgX2lkOiBhZ2VudERvYy5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGlkOiBhZ2VudERvYy5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGNvbXBhbnlJZDogYWdlbnREb2MuY29tcGFueUlkPy50b1N0cmluZygpLFxuICAgICAgICAgIH07XG4gICAgICAgICAgYXdhaXQgbG9nQWN0aXZpdHkoYWdlbnQuY29tcGFueUlkLCBhZ2VudC5uYW1lLCAnTG9naW4nLCBgTG9nZ2VkIGluIHN1Y2Nlc3NmdWxseWApO1xuICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGFnZW50OiBhZ2VudCB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJJbnZhbGlkIGVtYWlsIG9yIHBhc3N3b3JkLlwiIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJMb2dpbiBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRGF0YWJhc2UgY29ubmVjdGlvbiBlcnJvci5cIiB9O1xuICAgIH1cbn07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVBZ2VudChuYW1lOiBzdHJpbmcsIGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkX3VudXNlZDogc3RyaW5nLCByb2xlOiBBZ2VudFJvbGUsIGNvbXBhbnlJZDogc3RyaW5nLCBjcmVhdGVkQnk6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBtZXNzYWdlPzogc3RyaW5nOyBhZ2VudD86IEFnZW50OyB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdBZ2VudCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IGVtYWlsOiBlbWFpbC50b0xvd2VyQ2FzZSgpIH0pO1xuXG4gICAgICAgIGlmIChleGlzdGluZ0FnZW50KSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiBhZ2VudCB3aXRoIHRoaXMgZW1haWwgYWxyZWFkeSBleGlzdHMuXCIgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGhhc2hlZFBhc3N3b3JkID0gYXdhaXQgaGFzaFBhc3N3b3JkKHBhc3N3b3JkX3VudXNlZCk7XG4gICAgICAgIGNvbnN0IGF2YXRhciA9IGBodHRwczovL3BpY3N1bS5waG90b3Mvc2VlZC8ke25hbWUucmVwbGFjZSgvXFxzL2csICcnKX0vMTAwLzEwMGA7XG5cbiAgICAgICAgY29uc3QgYWdlbnRUb0luc2VydDogT21pdDxBZ2VudCwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBlbWFpbDogZW1haWwudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgIHBhc3N3b3JkOiBoYXNoZWRQYXNzd29yZCxcbiAgICAgICAgICAgIHJvbGUsXG4gICAgICAgICAgICBhdmF0YXIsXG4gICAgICAgICAgICBwaG9uZTogJycsIFxuICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uaW5zZXJ0T25lKGFnZW50VG9JbnNlcnQgYXMgYW55KTtcblxuICAgICAgICBpZiAocmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGFnZW50c1dpdGhTdGF0cyA9IGF3YWl0IGdldEFnZW50c0J5Q29tcGFueShjb21wYW55SWQpO1xuICAgICAgICAgICAgY29uc3QgbmV3QWdlbnQgPSBhZ2VudHNXaXRoU3RhdHMuZmluZChhID0+IGEuaWQgPT09IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCkpO1xuXG4gICAgICAgICAgICBpZiAobmV3QWdlbnQpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBsb2dBY3Rpdml0eShjb21wYW55SWQsIGNyZWF0ZWRCeSwgJ0NyZWF0ZSBBZ2VudCcsIGBDcmVhdGVkIGFnZW50OiAke25hbWV9YCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgYWdlbnQ6IG5ld0FnZW50IH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIGNyZWF0ZSBhZ2VudC5cIiB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDcmVhdGUgYWdlbnQgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZCB3aGlsZSBjcmVhdGluZyB0aGUgYWdlbnQuXCIgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWxldGVBZ2VudChhZ2VudElkOiBzdHJpbmcsIGNvbXBhbnlJZD86IHN0cmluZywgZGVsZXRlZEJ5Pzogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW4sIG1lc3NhZ2U/OiBzdHJpbmcgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFnZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBZ2VudHNDb2xsZWN0aW9uKCk7XG5cbiAgICAgICAgaWYgKCFhZ2VudElkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGFnZW50SWQpKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJJbnZhbGlkIGFnZW50IElELlwiIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBhZ2VudFRvRGVsZXRlID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5maW5kT25lKHsgX2lkOiBuZXcgT2JqZWN0SWQoYWdlbnRJZCkgfSk7XG4gICAgICAgIGlmICghYWdlbnRUb0RlbGV0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQWdlbnQgbm90IGZvdW5kLlwiIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQcmV2ZW50IGRlbGV0aW5nIHRoZSBsYXN0IGFkbWluXG4gICAgICAgIGlmIChhZ2VudFRvRGVsZXRlLnJvbGUgPT09ICdhZG1pbicpIHtcbiAgICAgICAgICAgIGNvbnN0IGFkbWluQ291bnQgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmNvdW50RG9jdW1lbnRzKHsgY29tcGFueUlkOiBhZ2VudFRvRGVsZXRlLmNvbXBhbnlJZCwgcm9sZTogJ2FkbWluJyB9KTtcbiAgICAgICAgICAgIGlmIChhZG1pbkNvdW50IDw9IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJDYW5ub3QgcmVtb3ZlIHRoZSBsYXN0IGFkbWluaXN0cmF0b3IuXCIgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5kZWxldGVPbmUoeyBfaWQ6IG5ldyBPYmplY3RJZChhZ2VudElkKSB9KTtcblxuICAgICAgICBpZiAocmVzdWx0LmRlbGV0ZWRDb3VudCA9PT0gMSkge1xuICAgICAgICAgICAgaWYgKGNvbXBhbnlJZCAmJiBkZWxldGVkQnkpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBsb2dBY3Rpdml0eShjb21wYW55SWQsIGRlbGV0ZWRCeSwgJ0RlbGV0ZSBBZ2VudCcsIGBSZW1vdmVkIGFnZW50OiAke2FnZW50VG9EZWxldGUubmFtZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkZhaWxlZCB0byByZW1vdmUgYWdlbnQuXCIgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRGVsZXRlIGFnZW50IGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQuXCIgfTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZVNpZ25VcChuYW1lOiBzdHJpbmcsIGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkX3VudXNlZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U/OiBzdHJpbmc7IGFnZW50PzogQWdlbnQ7IH0+IHtcbiAgICBjb25zdCBkYiA9IGF3YWl0IGdldERiKCk7XG4gICAgY29uc3Qgc2Vzc2lvbiA9IGRiLmNsaWVudC5zdGFydFNlc3Npb24oKTtcbiAgICB0cnkge1xuICAgICAgICBsZXQgbmV3QWdlbnRSZXN1bHQ6IEFnZW50IHwgdW5kZWZpbmVkO1xuICAgICAgICBhd2FpdCBzZXNzaW9uLndpdGhUcmFuc2FjdGlvbihhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb21wYW5pZXNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q29tcGFuaWVzQ29sbGVjdGlvbigpO1xuICAgICAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nQWdlbnQgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBlbWFpbDogZW1haWwudG9Mb3dlckNhc2UoKSB9LCB7IHNlc3Npb24gfSk7XG5cbiAgICAgICAgICAgIGlmIChleGlzdGluZ0FnZW50KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQW4gYWdlbnQgd2l0aCB0aGlzIGVtYWlsIGFscmVhZHkgZXhpc3RzLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgY29tcGFueVJlc3VsdCA9IGF3YWl0IGNvbXBhbmllc0NvbGxlY3Rpb24uaW5zZXJ0T25lKHtcbiAgICAgICAgICAgICAgICBuYW1lOiBgJHtuYW1lfSdzIENvbXBhbnlgLFxuICAgICAgICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgICAgICAgIH0sIHsgc2Vzc2lvbiB9KTtcblxuICAgICAgICAgICAgaWYgKCFjb21wYW55UmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gY3JlYXRlIGNvbXBhbnkuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY29tcGFueUlkID0gY29tcGFueVJlc3VsdC5pbnNlcnRlZElkO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBoYXNoZWRQYXNzd29yZCA9IGF3YWl0IGhhc2hQYXNzd29yZChwYXNzd29yZF91bnVzZWQpO1xuICAgICAgICAgICAgY29uc3QgYXZhdGFyID0gYGh0dHBzOi8vcGljc3VtLnBob3Rvcy9zZWVkLyR7bmFtZS5yZXBsYWNlKC9cXHMvZywgJycpfS8xMDAvMTAwYDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgYWdlbnRUb0luc2VydDogT21pdDxBZ2VudCwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgIGVtYWlsOiBlbWFpbC50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBoYXNoZWRQYXNzd29yZCxcbiAgICAgICAgICAgICAgICByb2xlOiAnYWRtaW4nLFxuICAgICAgICAgICAgICAgIGF2YXRhcixcbiAgICAgICAgICAgICAgICBwaG9uZTogJycsXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBjb21wYW55SWQsXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCBhZ2VudFJlc3VsdCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uaW5zZXJ0T25lKGFnZW50VG9JbnNlcnQgYXMgYW55LCB7IHNlc3Npb24gfSk7XG5cbiAgICAgICAgICAgICBpZiAoIWFnZW50UmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gY3JlYXRlIGFkbWluIGFnZW50LlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgYXdhaXQgbG9nQWN0aXZpdHkoY29tcGFueUlkLCBuYW1lLCAnU2lnbiBVcCcsIGBDcmVhdGVkIG5ldyBjb21wYW55IGFuZCBhZG1pbiBhY2NvdW50LmApO1xuXG4gICAgICAgICAgICBjb25zdCBuZXdBZ2VudERvYyA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IF9pZDogYWdlbnRSZXN1bHQuaW5zZXJ0ZWRJZCB9LCB7IHNlc3Npb24gfSk7XG4gICAgICAgICAgICBpZiAobmV3QWdlbnREb2MpIHtcbiAgICAgICAgICAgICAgICAgY29uc3QgeyBwYXNzd29yZCwgLi4uYWdlbnREYXRhIH0gPSBuZXdBZ2VudERvYztcbiAgICAgICAgICAgICAgICAgbmV3QWdlbnRSZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgICAgIC4uLmFnZW50RGF0YSxcbiAgICAgICAgICAgICAgICAgICAgX2lkOiBuZXdBZ2VudERvYy5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IG5ld0FnZW50RG9jLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBjb21wYW55SWQ6IG5ld0FnZW50RG9jLmNvbXBhbnlJZD8udG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFuZXdBZ2VudFJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIHJldHJpZXZlIHRoZSBjcmVhdGVkIGFnZW50LlwiIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGFnZW50OiBuZXdBZ2VudFJlc3VsdCB9O1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlNpZ24gdXAgdHJhbnNhY3Rpb24gZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgLy8gQWJvcnQgdHJhbnNhY3Rpb24gb24gZXJyb3IgaWYgaXQgd2FzIHN0YXJ0ZWRcbiAgICAgICAgaWYgKHNlc3Npb24uaW5UcmFuc2FjdGlvbigpKSB7XG4gICAgICAgICAgICBhd2FpdCBzZXNzaW9uLmFib3J0VHJhbnNhY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB8fCBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHNpZ24gdXAuXCIgfTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgICBhd2FpdCBzZXNzaW9uLmVuZFNlc3Npb24oKTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFjdGl2aXR5TG9ncyhjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8QWN0aXZpdHlMb2dbXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghY29tcGFueUlkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNvbXBhbnlJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsb2dzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFjdGl2aXR5TG9nc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgbG9ncyA9IGF3YWl0IGxvZ3NDb2xsZWN0aW9uLmZpbmQoeyBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpIH0pLnNvcnQoeyB0aW1lc3RhbXA6IC0xIH0pLmxpbWl0KDUwKS50b0FycmF5KCk7XG5cbiAgICAgICAgcmV0dXJuIGxvZ3MubWFwKGxvZyA9PiAoe1xuICAgICAgICAgICAgLi4ubG9nLFxuICAgICAgICAgICAgX2lkOiBsb2cuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBpZDogbG9nLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgY29tcGFueUlkOiBsb2cuY29tcGFueUlkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICB0aW1lc3RhbXA6IGxvZy50aW1lc3RhbXAudG9JU09TdHJpbmcoKSxcbiAgICAgICAgfSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBhY3Rpdml0eSBsb2dzOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDb250YWN0c0J5Q29tcGFueShjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8VXNlcltdPiB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKCFjb21wYW55SWQgfHwgIU9iamVjdElkLmlzVmFsaWQoY29tcGFueUlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzQ29sbGVjdGlvbiA9IGF3YWl0IGdldENvbnRhY3RzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBjb250YWN0cyA9IGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi5maW5kKHsgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSB9KS50b0FycmF5KCk7XG5cbiAgICAgICAgcmV0dXJuIGNvbnRhY3RzLm1hcChjb250YWN0ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgX2lkLCBjb21wYW55SWQsIC4uLnJlc3QgfSA9IGNvbnRhY3QgYXMgYW55O1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5yZXN0LFxuICAgICAgICAgICAgICAgIF9pZDogX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgaWQ6IF9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogY29tcGFueUlkPy50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIG5vdGVzOiAoY29udGFjdC5ub3RlcyB8fCBbXSkubWFwKChub3RlOiBOb3RlKSA9PiAoe1xuICAgICAgICAgICAgICAgICAgICAuLi5ub3RlLFxuICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKG5vdGUudGltZXN0YW1wKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBjb250YWN0czpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlQ29udGFjdChuYW1lOiBzdHJpbmcsIGVtYWlsOiBzdHJpbmcsIHBob25lOiBzdHJpbmcsIGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U/OiBzdHJpbmc7IGNvbnRhY3Q/OiBVc2VyIH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjb250YWN0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRDb250YWN0c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nQ29udGFjdCA9IGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi5maW5kT25lKHsgZW1haWw6IGVtYWlsLnRvTG93ZXJDYXNlKCksIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkgfSk7XG4gICAgICAgIGlmIChleGlzdGluZ0NvbnRhY3QpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkEgY29udGFjdCB3aXRoIHRoaXMgZW1haWwgYWxyZWFkeSBleGlzdHMuXCIgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGF2YXRhciA9IGBodHRwczovL3BpY3N1bS5waG90b3Mvc2VlZC8ke25hbWUucmVwbGFjZSgvXFxzL2csICcnKX0vMTAwLzEwMGA7XG5cbiAgICAgICAgY29uc3QgY29udGFjdFRvSW5zZXJ0OiBPbWl0PFVzZXIsICdpZCcgfCAnX2lkJz4gPSB7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgZW1haWw6IGVtYWlsLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICBwaG9uZSxcbiAgICAgICAgICAgIGF2YXRhcixcbiAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCksXG4gICAgICAgICAgICBub3RlczogW10sXG4gICAgICAgICAgICBvbmxpbmU6IGZhbHNlLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi5pbnNlcnRPbmUoY29udGFjdFRvSW5zZXJ0IGFzIGFueSk7XG4gICAgICAgIFxuICAgICAgICBpZiAocmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0NvbnRhY3Q6IFVzZXIgPSB7XG4gICAgICAgICAgICAgICAgLi4uKGNvbnRhY3RUb0luc2VydCBhcyBPbWl0PFVzZXIsICdfaWQnfCdpZCc+KSxcbiAgICAgICAgICAgICAgICBfaWQ6IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgaWQ6IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKS50b1N0cmluZygpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGNvbnRhY3Q6IG5ld0NvbnRhY3QgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkZhaWxlZCB0byBjcmVhdGUgY29udGFjdC5cIiB9O1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkNyZWF0ZSBjb250YWN0IGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQuXCIgfTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFzc2lnbkFnZW50VG9Db250YWN0KGNvbnRhY3RJZDogc3RyaW5nLCBhZ2VudElkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbiB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY29udGFjdHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q29udGFjdHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi51cGRhdGVPbmUoXG4gICAgICAgICAgICB7IF9pZDogbmV3IE9iamVjdElkKGNvbnRhY3RJZCkgfSxcbiAgICAgICAgICAgIHsgJHNldDogeyBhc3NpZ25lZEFnZW50SWQ6IGFnZW50SWQgfSB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYXNzaWduaW5nIGFnZW50OlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWRkTm90ZVRvQ29udGFjdChjb250YWN0SWQ6IHN0cmluZywgYWdlbnRJZDogc3RyaW5nLCBhZ2VudE5hbWU6IHN0cmluZywgdGV4dDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG5vdGU/OiBOb3RlIH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjb250YWN0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRDb250YWN0c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IG5ld05vdGU6IE5vdGUgPSB7XG4gICAgICAgICAgICBpZDogbmV3IE9iamVjdElkKCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGFnZW50SWQsXG4gICAgICAgICAgICBhZ2VudE5hbWUsXG4gICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb250YWN0c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChjb250YWN0SWQpIH0sXG4gICAgICAgICAgICB7ICRwdXNoOiB7IG5vdGVzOiB7ICRlYWNoOiBbbmV3Tm90ZV0sICRwb3NpdGlvbjogMCB9IH0gfVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgaWYgKHJlc3VsdC5tb2RpZmllZENvdW50ID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgbm90ZTogbmV3Tm90ZSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFkZGluZyBub3RlOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Tm90ZXNGb3JDb250YWN0KGNvbnRhY3RJZDogc3RyaW5nKTogUHJvbWlzZTxOb3RlW10+IHtcbiAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFjb250YWN0SWQgfHwgIU9iamVjdElkLmlzVmFsaWQoY29udGFjdElkKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzQ29sbGVjdGlvbiA9IGF3YWl0IGdldENvbnRhY3RzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBjb250YWN0ID0gYXdhaXQgY29udGFjdHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBfaWQ6IG5ldyBPYmplY3RJZChjb250YWN0SWQpIH0pO1xuICAgICAgICByZXR1cm4gKGNvbnRhY3Q/Lm5vdGVzIHx8IFtdKS5tYXAoKG5vdGU6IE5vdGUpID0+ICh7XG4gICAgICAgICAgICAuLi5ub3RlLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZShub3RlLnRpbWVzdGFtcCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgfSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBub3RlczpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Q2hhdHNCeUNvbXBhbnkoY29tcGFueUlkOiBzdHJpbmcpOiBQcm9taXNlPENoYXRbXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghY29tcGFueUlkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNvbXBhbnlJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGF0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRDaGF0c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgY2hhdHMgPSBhd2FpdCBjaGF0c0NvbGxlY3Rpb24uYWdncmVnYXRlKFtcbiAgICAgICAgICAgIHsgJG1hdGNoOiB7IGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkgfSB9LFxuICAgICAgICAgICAgeyAkc29ydDogeyB0aW1lc3RhbXA6IC0xIH0gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAkbG9va3VwOiB7XG4gICAgICAgICAgICAgICAgICAgIGZyb206ICdjb250YWN0cycsXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsRmllbGQ6ICd1c2VySWQnLFxuICAgICAgICAgICAgICAgICAgICBmb3JlaWduRmllbGQ6ICdfaWQnLFxuICAgICAgICAgICAgICAgICAgICBhczogJ3VzZXInXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHsgJHVud2luZDogJyR1c2VyJyB9XG4gICAgICAgIF0pLnRvQXJyYXkoKTtcblxuICAgICAgICByZXR1cm4gY2hhdHMubWFwKGNoYXQgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBfaWQsIGNvbXBhbnlJZCwgdXNlcklkLCAuLi5yZXN0IH0gPSBjaGF0IGFzIGFueTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgICAgICAgICBfaWQ6IF9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiBfaWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IGNvbXBhbnlJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIHVzZXJJZDogdXNlcklkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgbWVzc2FnZXM6IFtdLCAvLyBNZXNzYWdlcyB3aWxsIGJlIGxhenktbG9hZGVkXG4gICAgICAgICAgICAgICAgdXNlcjoge1xuICAgICAgICAgICAgICAgICAgICAuLi5jaGF0LnVzZXIsXG4gICAgICAgICAgICAgICAgICAgIF9pZDogY2hhdC51c2VyLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBpZDogY2hhdC51c2VyLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBjb21wYW55SWQ6IGNoYXQudXNlci5jb21wYW55SWQgPyBjaGF0LnVzZXIuY29tcGFueUlkLnRvU3RyaW5nKCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIGNoYXRzIGJ5IGNvbXBhbnk6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldE1lc3NhZ2VzRm9yQ2hhdChjaGF0SWQ6IHN0cmluZyk6IFByb21pc2U8TWVzc2FnZVtdPiB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKCFjaGF0SWQgfHwgIU9iamVjdElkLmlzVmFsaWQoY2hhdElkKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzQ29sbGVjdGlvbiA9IGF3YWl0IGdldE1lc3NhZ2VzQ29sbGVjdGlvbigpO1xuICAgICAgICAvLyBBbHNvIGZldGNoIHNlbmRlciBkZXRhaWxzIGlmIGl0J3MgYSB1c2VyLCBub3QgYW4gYWdlbnQgKCdtZScpXG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gYXdhaXQgbWVzc2FnZXNDb2xsZWN0aW9uLmFnZ3JlZ2F0ZShbXG4gICAgICAgICAgICB7ICRtYXRjaDogeyBjaGF0SWQ6IG5ldyBPYmplY3RJZChjaGF0SWQpIH0gfSxcbiAgICAgICAgICAgIHsgJHNvcnQ6IHsgdGltZXN0YW1wOiAxIH0gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAkbG9va3VwOiB7XG4gICAgICAgICAgICAgICAgICAgIGZyb206ICdjb250YWN0cycsXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsRmllbGQ6ICdzZW5kZXJJZCcsXG4gICAgICAgICAgICAgICAgICAgIGZvcmVpZ25GaWVsZDogJ19pZCcsXG4gICAgICAgICAgICAgICAgICAgIGFzOiAnc2VuZGVySW5mbydcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIF0pLnRvQXJyYXkoKTtcblxuICAgICAgICByZXR1cm4gbWVzc2FnZXMubWFwKG1zZyA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IF9pZCwgY2hhdElkLCBzZW5kZXJJZCwgc2VuZGVySW5mbywgLi4ucmVzdCB9ID0gbXNnIGFzIGFueTtcbiAgICAgICAgICAgIGNvbnN0IHNlbmRlciA9IG1zZy5zZW5kZXIgPT09ICdtZScgPyAnbWUnIDogKHNlbmRlckluZm9bMF0gfHwgbnVsbCk7XG5cbiAgICAgICAgICAgIGlmIChzZW5kZXIgJiYgc2VuZGVyICE9PSAnbWUnKSB7XG4gICAgICAgICAgICAgICAgc2VuZGVyLmlkID0gc2VuZGVyLl9pZC50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgICAgICAgICAgaWQ6IF9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIHNlbmRlcixcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBtZXNzYWdlczpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VuZE1lc3NhZ2UoY2hhdElkOiBzdHJpbmcsIHRleHQ6IHN0cmluZywgYWdlbnRJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG5ld01lc3NhZ2U/OiBNZXNzYWdlIH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBtZXNzYWdlc0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRNZXNzYWdlc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgY2hhdHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q2hhdHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBjb25zdCBuZXdNZXNzYWdlVG9JbnNlcnQ6IE9taXQ8TWVzc2FnZSwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgIGNoYXRJZDogbmV3IE9iamVjdElkKGNoYXRJZCksXG4gICAgICAgICAgICBzZW5kZXI6ICdtZScsIC8vICdtZScgZGVub3RlcyB0aGUgYWdlbnRcbiAgICAgICAgICAgIHNlbmRlcklkOiBuZXcgT2JqZWN0SWQoYWdlbnRJZCksXG4gICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgdGltZXN0YW1wOiB0aW1lc3RhbXAudG9JU09TdHJpbmcoKSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBtZXNzYWdlc0NvbGxlY3Rpb24uaW5zZXJ0T25lKG5ld01lc3NhZ2VUb0luc2VydCBhcyBhbnkpO1xuXG4gICAgICAgIGlmIChyZXN1bHQuaW5zZXJ0ZWRJZCkge1xuICAgICAgICAgICAgYXdhaXQgY2hhdHNDb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICAgICAgICAgICAgICB7IF9pZDogbmV3IE9iamVjdElkKGNoYXRJZCkgfSxcbiAgICAgICAgICAgICAgICB7ICRzZXQ6IHsgbGFzdE1lc3NhZ2U6IHRleHQsIHRpbWVzdGFtcDogdGltZXN0YW1wLnRvTG9jYWxlVGltZVN0cmluZyhbXSwgeyBob3VyOiAnMi1kaWdpdCcsIG1pbnV0ZTogJzItZGlnaXQnIH0pIH0gfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZmluYWxOZXdNZXNzYWdlOiBNZXNzYWdlID0ge1xuICAgICAgICAgICAgICAgIC4uLihuZXdNZXNzYWdlVG9JbnNlcnQgYXMgT21pdDxNZXNzYWdlLCAnX2lkJ3wnaWQnPiksXG4gICAgICAgICAgICAgICAgX2lkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGNoYXRJZDogbmV3TWVzc2FnZVRvSW5zZXJ0LmNoYXRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIHNlbmRlcklkOiBuZXdNZXNzYWdlVG9JbnNlcnQuc2VuZGVySWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiB7IFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsIFxuICAgICAgICAgICAgICAgIG5ld01lc3NhZ2U6IGZpbmFsTmV3TWVzc2FnZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBzZW5kaW5nIG1lc3NhZ2U6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZXRDaGF0Ym90U3RhdHVzKGNoYXRJZDogc3RyaW5nLCBpc0FjdGl2ZTogYm9vbGVhbik6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuIH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjaGF0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRDaGF0c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgYXdhaXQgY2hhdHNDb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICAgICAgICAgIHsgX2lkOiBuZXcgT2JqZWN0SWQoY2hhdElkKSB9LFxuICAgICAgICAgICAgeyAkc2V0OiB7IGlzQ2hhdGJvdEFjdGl2ZTogaXNBY3RpdmUgfSB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igc2V0dGluZyBjaGF0Ym90IHN0YXR1czpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN0YXJ0TmV3Q2hhdHModXNlcnM6IFVzZXJbXSwgbWVzc2FnZTogc3RyaW5nLCBjb21wYW55SWQ6IHN0cmluZywgYWdlbnRJZDogc3RyaW5nKTogUHJvbWlzZTxDaGF0W10+IHtcbiAgICBjb25zdCBjaGF0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRDaGF0c0NvbGxlY3Rpb24oKTtcbiAgICBjb25zdCBuZXdPclVwZGF0ZWRDaGF0czogQ2hhdFtdID0gW107XG5cbiAgICBmb3IgKGNvbnN0IHVzZXIgb2YgdXNlcnMpIHtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdDaGF0RG9jID0gYXdhaXQgY2hhdHNDb2xsZWN0aW9uLmZpbmRPbmUoe1xuICAgICAgICAgICAgdXNlcklkOiBuZXcgT2JqZWN0SWQodXNlci5pZCksXG4gICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChleGlzdGluZ0NoYXREb2MpIHtcbiAgICAgICAgICAgIGF3YWl0IHNlbmRNZXNzYWdlKGV4aXN0aW5nQ2hhdERvYy5faWQudG9TdHJpbmcoKSwgbWVzc2FnZSwgYWdlbnRJZCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRDaGF0OiBDaGF0ID0ge1xuICAgICAgICAgICAgICAgIC4uLihleGlzdGluZ0NoYXREb2MgYXMgYW55KSxcbiAgICAgICAgICAgICAgICBfaWQ6IGV4aXN0aW5nQ2hhdERvYy5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBpZDogZXhpc3RpbmdDaGF0RG9jLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIHVzZXJJZDogZXhpc3RpbmdDaGF0RG9jLnVzZXJJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogZXhpc3RpbmdDaGF0RG9jLmNvbXBhbnlJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGxhc3RNZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0xvY2FsZVRpbWVTdHJpbmcoW10sIHsgaG91cjogJzItZGlnaXQnLCBtaW51dGU6ICcyLWRpZ2l0JyB9KSxcbiAgICAgICAgICAgICAgICB1c2VyOiB1c2VyLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2VzOiBbXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBuZXdPclVwZGF0ZWRDaGF0cy5wdXNoKHVwZGF0ZWRDaGF0KTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld0NoYXREYXRhOiBPbWl0PENoYXQsICdpZCcgfCAnX2lkJz4gPSB7XG4gICAgICAgICAgICAgICAgdXNlcklkOiBuZXcgT2JqZWN0SWQodXNlci5pZCksXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSxcbiAgICAgICAgICAgICAgICBsYXN0TWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IHRpbWVzdGFtcC50b0xvY2FsZVRpbWVTdHJpbmcoW10sIHsgaG91cjogJzItZGlnaXQnLCBtaW51dGU6ICcyLWRpZ2l0JyB9KSxcbiAgICAgICAgICAgICAgICB1bnJlYWRDb3VudDogMCxcbiAgICAgICAgICAgICAgICBwcmlvcml0eTogJ25vcm1hbCcsXG4gICAgICAgICAgICAgICAgY2hhbm5lbDogJ1dlYmNoYXQnLFxuICAgICAgICAgICAgICAgIGlzQ2hhdGJvdEFjdGl2ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgbWVzc2FnZXM6IFtdXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgY2hhdFJlc3VsdCA9IGF3YWl0IGNoYXRzQ29sbGVjdGlvbi5pbnNlcnRPbmUobmV3Q2hhdERhdGEgYXMgYW55KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGNoYXRSZXN1bHQuaW5zZXJ0ZWRJZCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHNlbmRNZXNzYWdlKGNoYXRSZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLCBtZXNzYWdlLCBhZ2VudElkKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjcmVhdGVkQ2hhdDogQ2hhdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uKG5ld0NoYXREYXRhIGFzIGFueSksXG4gICAgICAgICAgICAgICAgICAgIF9pZDogY2hhdFJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIGlkOiBjaGF0UmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgdXNlcklkOiBuZXdDaGF0RGF0YS51c2VySWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGFueUlkOiBuZXdDaGF0RGF0YS5jb21wYW55SWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgdXNlcjogdXNlcixcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZXM6IFtdLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgbmV3T3JVcGRhdGVkQ2hhdHMucHVzaChjcmVhdGVkQ2hhdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ld09yVXBkYXRlZENoYXRzO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlQ2FtcGFpZ24oZGF0YTogUGFydGlhbDxDYW1wYWlnbj4gJiB7IHNjaGVkdWxlVHlwZT86ICdub3cnIHwgJ2xhdGVyJyB9LCBjb21wYW55SWQ6IHN0cmluZywgYWdlbnRJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U/OiBzdHJpbmc7IGNhbXBhaWduPzogQ2FtcGFpZ247IH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjYW1wYWlnbnNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q2FtcGFpZ25zQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBjb250YWN0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRDb250YWN0c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgXG4gICAgICAgIGxldCBzdGF0dXM6IENhbXBhaWduWydzdGF0dXMnXSA9ICdEcmFmdCc7XG4gICAgICAgIGxldCBzZW50QXQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IGRlbGl2ZXJ5ID0gMDtcbiAgICAgICAgbGV0IGVuZ2FnZW1lbnQgPSAwO1xuICAgICAgICBsZXQgY29udmVyc2lvbiA9IDA7XG5cbiAgICAgICAgaWYgKGRhdGEuc2NoZWR1bGVUeXBlID09PSAnbm93Jykge1xuICAgICAgICAgICAgc3RhdHVzID0gJ0NvbXBsZXRlZCc7XG4gICAgICAgICAgICBzZW50QXQgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICAvLyBHZW5lcmF0ZSBtb2NrIHBlcmZvcm1hbmNlIGRhdGEgZm9yIGltbWVkaWF0ZSBjYW1wYWlnbnNcbiAgICAgICAgICAgIGRlbGl2ZXJ5ID0gOTUgKyBNYXRoLnJhbmRvbSgpICogNTsgXG4gICAgICAgICAgICBlbmdhZ2VtZW50ID0gMTAgKyBNYXRoLnJhbmRvbSgpICogMTU7XG4gICAgICAgICAgICBjb252ZXJzaW9uID0gMiArIE1hdGgucmFuZG9tKCkgKiA4OyBcblxuICAgICAgICAgICAgLy8gQWN0dWFsbHkgc2VuZCB0aGUgbWVzc2FnZXNcbiAgICAgICAgICAgIGlmIChkYXRhLmF1ZGllbmNlICYmIGRhdGEubWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF1ZGllbmNlQ29udGFjdHMgPSBhd2FpdCBjb250YWN0c0NvbGxlY3Rpb24uZmluZCh7IF9pZDogeyAkaW46IGRhdGEuYXVkaWVuY2UubWFwKGlkID0+IG5ldyBPYmplY3RJZChpZCkpIH0gfSkudG9BcnJheSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJzID0gYXVkaWVuY2VDb250YWN0cy5tYXAoYyA9PiAoe1xuICAgICAgICAgICAgICAgICAgICAuLi5jLFxuICAgICAgICAgICAgICAgICAgICBpZDogYy5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgX2lkOiBjLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIH0pKSBhcyBVc2VyW107XG5cbiAgICAgICAgICAgICAgICBhd2FpdCBzdGFydE5ld0NoYXRzKHVzZXJzLCBkYXRhLm1lc3NhZ2UsIGNvbXBhbnlJZCwgYWdlbnRJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YS5zY2hlZHVsZVR5cGUgPT09ICdsYXRlcicpIHtcbiAgICAgICAgICAgIHN0YXR1cyA9ICdTY2hlZHVsZWQnO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbmV3Q2FtcGFpZ246IE9taXQ8Q2FtcGFpZ24sICdpZCcgfCAnX2lkJz4gPSB7XG4gICAgICAgICAgICB0aXRsZTogZGF0YS50aXRsZSEsXG4gICAgICAgICAgICB0eXBlOiBkYXRhLnR5cGUgfHwgJ0Jyb2FkY2FzdCcsXG4gICAgICAgICAgICBzdGF0dXM6IHN0YXR1cyxcbiAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCksXG4gICAgICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgIGF1ZGllbmNlOiBkYXRhLmF1ZGllbmNlIHx8IFtdLFxuICAgICAgICAgICAgbWVzc2FnZTogZGF0YS5tZXNzYWdlIHx8IFwiXCIsXG4gICAgICAgICAgICBzZW50QXQ6IHNlbnRBdCxcbiAgICAgICAgICAgIGRlbGl2ZXJ5LFxuICAgICAgICAgICAgZW5nYWdlbWVudCxcbiAgICAgICAgICAgIGNvbnZlcnNpb24sXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2FtcGFpZ25zQ29sbGVjdGlvbi5pbnNlcnRPbmUobmV3Q2FtcGFpZ24gYXMgYW55KTtcbiAgICAgICAgaWYgKHJlc3VsdC5pbnNlcnRlZElkKSB7XG4gICAgICAgICAgICBjb25zdCBjcmVhdGVkQ2FtcGFpZ246IENhbXBhaWduID0ge1xuICAgICAgICAgICAgICAgIC4uLm5ld0NhbXBhaWduLFxuICAgICAgICAgICAgICAgIF9pZDogcmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBpZDogcmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgY2FtcGFpZ246IGNyZWF0ZWRDYW1wYWlnbiB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkZhaWxlZCB0byBjcmVhdGUgY2FtcGFpZ24uXCIgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQ3JlYXRlIGNhbXBhaWduIGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQuXCIgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDYW1wYWlnbnNCeUNvbXBhbnkoY29tcGFueUlkOiBzdHJpbmcpOiBQcm9taXNlPENhbXBhaWduW10+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIWNvbXBhbnlJZCB8fCAhT2JqZWN0SWQuaXNWYWxpZChjb21wYW55SWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2FtcGFpZ25zQ29sbGVjdGlvbiA9IGF3YWl0IGdldENhbXBhaWduc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgY2FtcGFpZ25zID0gYXdhaXQgY2FtcGFpZ25zQ29sbGVjdGlvbi5maW5kKHsgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSB9KS5zb3J0KHsgY3JlYXRlZEF0OiAtMSB9KS50b0FycmF5KCk7XG5cbiAgICAgICAgcmV0dXJuIGNhbXBhaWducy5tYXAoY2FtcGFpZ24gPT4gKHtcbiAgICAgICAgICAgIC4uLmNhbXBhaWduLFxuICAgICAgICAgICAgX2lkOiBjYW1wYWlnbi5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGlkOiBjYW1wYWlnbi5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGNvbXBhbnlJZDogY2FtcGFpZ24uY29tcGFueUlkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKGNhbXBhaWduLmNyZWF0ZWRBdCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgIHNlbnRBdDogY2FtcGFpZ24uc2VudEF0ID8gbmV3IERhdGUoY2FtcGFpZ24uc2VudEF0KS50b0lTT1N0cmluZygpIDogdW5kZWZpbmVkLFxuICAgICAgICB9KSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIGNhbXBhaWduczpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuXG4gICAgIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI2UkF1bkJzQiJ9
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:e15b6e [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40534236dcc36f51af1a921f1d5dd985231fa0be2f":"getMessagesForChat"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getMessagesForChat": (()=>getMessagesForChat)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var getMessagesForChat = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("40534236dcc36f51af1a921f1d5dd985231fa0be2f", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getMessagesForChat"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:3c83fa [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"70550f3a06ff63d8c1c6555f235fca6dc7330a34c0":"sendMessage"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "sendMessage": (()=>sendMessage)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var sendMessage = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("70550f3a06ff63d8c1c6555f235fca6dc7330a34c0", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "sendMessage"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:aad781 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"609d4f76fb496a216c91066f2d4684c160f7fd02a4":"setChatbotStatus"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "setChatbotStatus": (()=>setChatbotStatus)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var setChatbotStatus = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("609d4f76fb496a216c91066f2d4684c160f7fd02a4", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "setChatbotStatus"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:bc4785 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"78e1313773a3e1763f3457daecfd448d9fb5a79106":"startNewChats"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "startNewChats": (()=>startNewChats)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var startNewChats = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("78e1313773a3e1763f3457daecfd448d9fb5a79106", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "startNewChats"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:a3d123 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40ddb22e27e4cef48e6f8b4f4548db5d5d7b59d98c":"getContactsByCompany"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getContactsByCompany": (()=>getContactsByCompany)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var getContactsByCompany = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("40ddb22e27e4cef48e6f8b4f4548db5d5d7b59d98c", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getContactsByCompany"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:932c45 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"780997e968e3cabe30367154f3b8d33efe060f51bd":"addNoteToContact"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "addNoteToContact": (()=>addNoteToContact)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var addNoteToContact = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("780997e968e3cabe30367154f3b8d33efe060f51bd", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "addNoteToContact"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:938738 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"60baf496c3062efe4fd326c7af2943c2196e029cce":"assignAgentToContact"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "assignAgentToContact": (()=>assignAgentToContact)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var assignAgentToContact = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("60baf496c3062efe4fd326c7af2943c2196e029cce", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "assignAgentToContact"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:756b07 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"4087786a1113f54129434f2a7816d4f589ebf1b846":"getAgentsByCompany"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getAgentsByCompany": (()=>getAgentsByCompany)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var getAgentsByCompany = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("4087786a1113f54129434f2a7816d4f589ebf1b846", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getAgentsByCompany"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:f058b1 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"783b92989339fb5b73f8cf537b1cd9811ad31c6bdf":"createContact"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "createContact": (()=>createContact)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var createContact = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("783b92989339fb5b73f8cf537b1cd9811ad31c6bdf", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "createContact"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:e4bc14 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"703df0e88d6b7f31da31805fe7c8d53353df7e0ee2":"deleteAgent"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "deleteAgent": (()=>deleteAgent)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var deleteAgent = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("703df0e88d6b7f31da31805fe7c8d53353df7e0ee2", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "deleteAgent"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:b1e80c [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"404d8f1b9c2cd44e439a3f4dba37f710171ff8f88b":"getActivityLogs"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getActivityLogs": (()=>getActivityLogs)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var getActivityLogs = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("404d8f1b9c2cd44e439a3f4dba37f710171ff8f88b", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getActivityLogs"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:986dd7 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"7c4c24e8dc61bef49f2c2f8a8acc71b5dd4ffb33e3":"updateAgentProfile"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "updateAgentProfile": (()=>updateAgentProfile)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var updateAgentProfile = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("7c4c24e8dc61bef49f2c2f8a8acc71b5dd4ffb33e3", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "updateAgentProfile"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:66619b [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40ff6278859af3f524ec2ac84e79db5390255a1668":"createAnnouncement"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "createAnnouncement": (()=>createAnnouncement)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var createAnnouncement = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("40ff6278859af3f524ec2ac84e79db5390255a1668", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "createAnnouncement"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:da1642 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"409b841e613ce80e5c40df0364f6df47d80421d363":"getAnnouncementsByCompany"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getAnnouncementsByCompany": (()=>getAnnouncementsByCompany)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var getAnnouncementsByCompany = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("409b841e613ce80e5c40df0364f6df47d80421d363", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getAnnouncementsByCompany"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:4789d6 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"60daecd654edd9aad0f66818f3643edb5b83926f6b":"markAnnouncementAsRead"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "markAnnouncementAsRead": (()=>markAnnouncementAsRead)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var markAnnouncementAsRead = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("60daecd654edd9aad0f66818f3643edb5b83926f6b", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "markAnnouncementAsRead"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:65e60a [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"70fcfed8bffc4caf060f93474e4a8996b303b4b0fc":"addCommentToAnnouncement"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "addCommentToAnnouncement": (()=>addCommentToAnnouncement)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var addCommentToAnnouncement = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("70fcfed8bffc4caf060f93474e4a8996b303b4b0fc", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "addCommentToAnnouncement"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:97e86b [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40038480f4f658c87505338e9dcd7c2a9a8544e267":"getCampaignsByCompany"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getCampaignsByCompany": (()=>getCampaignsByCompany)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var getCampaignsByCompany = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("40038480f4f658c87505338e9dcd7c2a9a8544e267", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getCampaignsByCompany"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:b4f204 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"70a879e7bd08c30d234a83e75003b58f7cb4bfd128":"createCampaign"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "createCampaign": (()=>createCampaign)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var createCampaign = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("70a879e7bd08c30d234a83e75003b58f7cb4bfd128", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "createCampaign"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:1c91c3 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"6049a27b16f34690f84c6af4f9a048cb3293c23e61":"handleLogin"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "handleLogin": (()=>handleLogin)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var handleLogin = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("6049a27b16f34690f84c6af4f9a048cb3293c23e61", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "handleLogin"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/data:46dcf9 [app-client] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"70780065eead8858964f97f44aaa44c48f608e84ba":"handleSignUp"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "handleSignUp": (()=>handleSignUp)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-client] (ecmascript)");
"use turbopack no side effects";
;
var handleSignUp = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createServerReference"])("70780065eead8858964f97f44aaa44c48f608e84ba", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findSourceMapURL"], "handleSignUp"); //# sourceMappingURL=data:application/json;base64,
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
"[project]/src/app/page.tsx [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, k: __turbopack_refresh__, m: module } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>Home)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/jsx-dev-runtime.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$chat$2d$layout$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/chat-layout.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$vertical$2d$nav$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/vertical-nav.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$contacts$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/contacts-view.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$agents$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/agents-view.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$dashboard$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/dashboard-view.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$announcements$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/announcements-view.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$settings$2d$dialog$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/settings-dialog.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$campaigns$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/campaigns-view.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$my$2d$performance$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/my-performance-view.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$auth$2d$form$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/auth-form.tsx [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$app$2f$data$3a$1c91c3__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$text$2f$javascript$3e$__ = __turbopack_context__.i("[project]/src/app/data:1c91c3 [app-client] (ecmascript) <text/javascript>");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$app$2f$data$3a$46dcf9__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$text$2f$javascript$3e$__ = __turbopack_context__.i("[project]/src/app/data:46dcf9 [app-client] (ecmascript) <text/javascript>");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$hooks$2f$use$2d$toast$2e$ts__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/hooks/use-toast.ts [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$loading$2d$screen$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/loading-screen.tsx [app-client] (ecmascript)");
;
var _s = __turbopack_context__.k.signature();
"use client";
;
;
;
;
;
;
;
;
;
;
;
;
;
;
function Home({ params, searchParams }) {
    _s();
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["use"])(params);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["use"])(searchParams);
    const [activeView, setActiveView] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])("Chat");
    const [isNavOpen, setIsNavOpen] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])(false);
    const [currentUser, setCurrentUser] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])(null);
    const [isSettingsOpen, setIsSettingsOpen] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])(false);
    const [initialContact, setInitialContact] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])(null);
    const [isLoading, setIsLoading] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])(true);
    const { toast } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$hooks$2f$use$2d$toast$2e$ts__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useToast"])();
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useEffect"])({
        "Home.useEffect": ()=>{
            const timer = setTimeout({
                "Home.useEffect.timer": ()=>{
                    setIsLoading(false);
                }
            }["Home.useEffect.timer"], 1500);
            return ({
                "Home.useEffect": ()=>clearTimeout(timer)
            })["Home.useEffect"];
        }
    }["Home.useEffect"], []);
    const onLogin = async (email, password_unused)=>{
        const result = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$app$2f$data$3a$1c91c3__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$text$2f$javascript$3e$__["handleLogin"])(email, password_unused);
        if (result.success && result.agent) {
            const agent = result.agent;
            setCurrentUser({
                id: agent.id,
                name: agent.name,
                avatar: agent.avatar,
                role: agent.role,
                email: agent.email,
                phone: agent.phone,
                companyId: agent.companyId
            });
            if (agent.role === 'admin') {
                setActiveView('Dashboard');
            } else {
                setActiveView('Chat');
            }
        }
        return {
            success: result.success,
            message: result.message
        };
    };
    const onSignUp = async (name, email, password_unused)=>{
        const result = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$app$2f$data$3a$46dcf9__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$text$2f$javascript$3e$__["handleSignUp"])(name, email, password_unused);
        if (result.success && result.agent) {
            toast({
                title: "Account Created!",
                description: "You can now sign in with your new credentials."
            });
            const agent = result.agent;
            setCurrentUser({
                id: agent.id,
                name: agent.name,
                avatar: agent.avatar,
                role: agent.role,
                email: agent.email,
                phone: agent.phone,
                companyId: agent.companyId
            });
            if (agent.role === 'admin') {
                setActiveView('Dashboard');
            } else {
                setActiveView('Chat');
            }
        }
        return result;
    };
    const handleLogout = ()=>{
        setCurrentUser(null);
        setActiveView('Chat');
    };
    const handleUpdateUser = (updatedUser)=>{
        setCurrentUser((prev)=>prev ? {
                ...prev,
                ...updatedUser
            } : null);
    };
    const handleNavigateToChat = (contact)=>{
        setInitialContact(contact);
        setActiveView("Chat");
        // Reset initialContact after a short delay to allow ChatLayout to pick it up
        setTimeout(()=>setInitialContact(null), 100);
    };
    const renderView = ()=>{
        const props = {
            onMenuClick: ()=>setIsNavOpen(true),
            user: currentUser
        };
        switch(activeView){
            case "Chat":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$chat$2d$layout$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ChatLayout"], {
                    ...props,
                    initialContact: initialContact
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 112,
                    columnNumber: 16
                }, this);
            case "Contacts":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$contacts$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ContactsView"], {
                    ...props,
                    onNavigateToChat: handleNavigateToChat
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 114,
                    columnNumber: 16
                }, this);
            case "Agents":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$agents$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AgentsView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 116,
                    columnNumber: 16
                }, this);
            case "Dashboard":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$dashboard$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DashboardView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 118,
                    columnNumber: 16
                }, this);
            case "Announcements":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$announcements$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AnnouncementsView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 120,
                    columnNumber: 16
                }, this);
            case "My Performance":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$my$2d$performance$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MyPerformanceView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 122,
                    columnNumber: 16
                }, this);
            case "Campaigns":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$campaigns$2d$view$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CampaignsView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 124,
                    columnNumber: 17
                }, this);
            default:
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$chat$2d$layout$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ChatLayout"], {
                    user: currentUser,
                    onMenuClick: ()=>setIsNavOpen(true),
                    initialContact: initialContact
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 126,
                    columnNumber: 16
                }, this);
        }
    };
    if (isLoading) {
        return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$loading$2d$screen$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["LoadingScreen"], {}, void 0, false, {
            fileName: "[project]/src/app/page.tsx",
            lineNumber: 131,
            columnNumber: 12
        }, this);
    }
    if (!currentUser) {
        return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])("main", {
            className: "flex h-screen w-full items-center justify-center bg-background p-4 overflow-hidden auth-page-background",
            children: /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$auth$2d$form$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AuthForm"], {
                onLogin: onLogin,
                onSignUp: onSignUp
            }, void 0, false, {
                fileName: "[project]/src/app/page.tsx",
                lineNumber: 137,
                columnNumber: 9
            }, this)
        }, void 0, false, {
            fileName: "[project]/src/app/page.tsx",
            lineNumber: 136,
            columnNumber: 7
        }, this);
    }
    return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])("main", {
        className: "flex h-screen bg-background",
        children: [
            /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$settings$2d$dialog$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SettingsDialog"], {
                open: isSettingsOpen,
                onOpenChange: setIsSettingsOpen,
                user: currentUser,
                onUserUpdate: handleUpdateUser
            }, void 0, false, {
                fileName: "[project]/src/app/page.tsx",
                lineNumber: 144,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$vertical$2d$nav$2e$tsx__$5b$app$2d$client$5d$__$28$ecmascript$29$__["VerticalNav"], {
                activeView: activeView,
                setActiveView: setActiveView,
                user: currentUser,
                onLogout: handleLogout,
                isOpen: isNavOpen,
                setIsOpen: setIsNavOpen,
                onSettingsClick: ()=>setIsSettingsOpen(true)
            }, void 0, false, {
                fileName: "[project]/src/app/page.tsx",
                lineNumber: 150,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxDEV"])("div", {
                className: "flex-1 md:pl-[70px] min-w-0",
                children: renderView()
            }, void 0, false, {
                fileName: "[project]/src/app/page.tsx",
                lineNumber: 159,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true, {
        fileName: "[project]/src/app/page.tsx",
        lineNumber: 143,
        columnNumber: 5
    }, this);
}
_s(Home, "/Fj3fHe8tPk+wz+vB/BQwaDYQQM=", false, function() {
    return [
        __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$hooks$2f$use$2d$toast$2e$ts__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useToast"]
    ];
});
_c = Home;
var _c;
__turbopack_context__.k.register(_c, "Home");
if (typeof globalThis.$RefreshHelpers$ === 'object' && globalThis.$RefreshHelpers !== null) {
    __turbopack_context__.k.registerExports(module, globalThis.$RefreshHelpers$);
}
}}),
}]);

//# sourceMappingURL=src_app_67426885._.js.map