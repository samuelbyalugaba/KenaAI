{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { getDb } from \"@/lib/db\";\nimport { hashPassword, verifyPassword } from \"@/lib/auth\";\nimport type { Agent, AgentRole, Announcement, Company, Comment, ActivityLog } from \"@/types\";\nimport { Collection, Db, ObjectId } from \"mongodb\";\n\nasync function getAgentsCollection(): Promise<Collection<Agent>> {\n    const db: Db = await getDb();\n    return db.collection<Agent>('agents');\n}\n\nasync function getCompaniesCollection(): Promise<Collection<Company>> {\n    const db: Db = await getDb();\n    return db.collection<Company>('companies');\n}\n\nasync function getAnnouncementsCollection(): Promise<Collection<Announcement>> {\n    const db: Db = await getDb();\n    return db.collection<Announcement>('announcements');\n}\n\nasync function getActivityLogsCollection(): Promise<Collection<ActivityLog>> {\n    const db: Db = await getDb();\n    return db.collection<ActivityLog>('activity_logs');\n}\n\nasync function logActivity(companyId: string | ObjectId, agentName: string, action: string, details: string) {\n    try {\n        const logsCollection = await getActivityLogsCollection();\n        await logsCollection.insertOne({\n            companyId: new ObjectId(companyId),\n            agentName,\n            action,\n            details,\n            timestamp: new Date(),\n        });\n    } catch (error) {\n        console.error(\"Failed to log activity:\", error);\n    }\n}\n\nexport async function getAgentsByCompany(companyId: string): Promise<Agent[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const agentsCollection = await getAgentsCollection();\n        const agents = await agentsCollection.find({ companyId: new ObjectId(companyId) }, { projection: { password: 0 } }).toArray();\n\n        return agents.map(agent => ({\n            ...agent,\n            _id: agent._id.toString(),\n            id: agent._id.toString(),\n            companyId: agent.companyId?.toString(),\n        }));\n    } catch (error) {\n        console.error(\"Error fetching agents by company:\", error);\n        return [];\n    }\n}\n\nexport async function createAnnouncement(data: { title: string; content: string; category: string; authorId: string; companyId: string }): Promise<{ success: boolean; message?: string; announcement?: Announcement }> {\n    try {\n        const announcementsCollection = await getAnnouncementsCollection();\n        const agentsCollection = await getAgentsCollection();\n\n        const author = await agentsCollection.findOne({ _id: new ObjectId(data.authorId) });\n        if (!author) {\n            return { success: false, message: \"Author not found.\" };\n        }\n\n        const newAnnouncement: Omit<Announcement, 'id' | '_id'> = {\n            title: data.title,\n            content: data.content,\n            category: data.category as any,\n            author: {\n                id: author._id.toString(),\n                name: author.name,\n                avatar: author.avatar\n            },\n            companyId: new ObjectId(data.companyId),\n            date: new Date().toISOString(),\n            readBy: [],\n            comments: [],\n        };\n\n        const result = await announcementsCollection.insertOne(newAnnouncement as any);\n        await logActivity(data.companyId, author.name, 'Create Announcement', `Published: \"${data.title}\"`);\n\n\n        if (result.insertedId) {\n            const createdAnnouncement: Announcement = {\n                ...(newAnnouncement as Announcement),\n                _id: result.insertedId,\n                id: result.insertedId.toString(),\n                companyId: data.companyId,\n            };\n            return { success: true, announcement: createdAnnouncement };\n        }\n\n        return { success: false, message: \"Failed to create announcement.\" };\n    } catch (error) {\n        console.error(\"Create announcement error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function getAnnouncementsByCompany(companyId: string): Promise<Announcement[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const announcementsCollection = await getAnnouncementsCollection();\n        const announcements = await announcementsCollection.find({ companyId: new ObjectId(companyId) }).sort({ date: -1 }).toArray();\n\n        return announcements.map(announcement => ({\n            ...announcement,\n            _id: announcement._id.toString(),\n            id: announcement._id.toString(),\n            companyId: announcement.companyId.toString(),\n            readBy: announcement.readBy || [],\n            comments: announcement.comments || [],\n        }));\n\n    } catch (error) {\n        console.error(\"Error fetching announcements by company:\", error);\n        return [];\n    }\n}\n\nexport async function markAnnouncementAsRead(announcementId: string, agentId: string): Promise<{ success: boolean }> {\n    try {\n        const announcementsCollection = await getAnnouncementsCollection();\n        await announcementsCollection.updateOne(\n            { _id: new ObjectId(announcementId) },\n            { $addToSet: { readBy: agentId } }\n        );\n        return { success: true };\n    } catch (error) {\n        console.error(\"Mark as read error:\", error);\n        return { success: false };\n    }\n}\n\nexport async function addCommentToAnnouncement(announcementId: string, authorId: string, content: string): Promise<{ success: boolean, comment?: Comment }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        const author = await agentsCollection.findOne({ _id: new ObjectId(authorId) });\n        if (!author) return { success: false };\n\n        const newComment: Comment = {\n            id: new ObjectId().toString(),\n            author: {\n                id: author._id.toString(),\n                name: author.name,\n                avatar: author.avatar\n            },\n            content,\n            timestamp: new Date().toISOString(),\n        };\n\n        const announcementsCollection = await getAnnouncementsCollection();\n        await announcementsCollection.updateOne(\n            { _id: new ObjectId(announcementId) },\n            { $push: { comments: newComment } }\n        );\n        \n        return { success: true, comment: newComment };\n\n    } catch (error) {\n        console.error(\"Add comment error:\", error);\n        return { success: false };\n    }\n}\n\n\nexport async function updateAgentProfile(agentId: string, name: string, email: string, phone: string, companyId: string): Promise<{ success: boolean; message?: string; agent?: Agent; }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        \n        const updateResult = await agentsCollection.updateOne(\n            { _id: new ObjectId(agentId) },\n            { $set: { name, email, phone } }\n        );\n\n        if (updateResult.modifiedCount === 0 && updateResult.matchedCount === 0) {\n            return { success: false, message: \"Agent not found.\" };\n        }\n        if (updateResult.modifiedCount === 0 && updateResult.matchedCount > 0) {\n            // No fields were actually changed\n            const updatedAgent = await agentsCollection.findOne({ _id: new ObjectId(agentId) });\n             if (updatedAgent) {\n                const { password, ...agentData } = updatedAgent;\n                const agentWithoutPassword: Agent = {\n                    ...agentData,\n                    _id: updatedAgent._id.toString(),\n                    id: updatedAgent._id.toString(),\n                    companyId: updatedAgent.companyId?.toString(),\n                };\n                 return { success: true, agent: agentWithoutPassword };\n            }\n        }\n        \n        const updatedAgent = await agentsCollection.findOne({ _id: new ObjectId(agentId) });\n\n        if (updatedAgent) {\n            const { password, ...agentData } = updatedAgent;\n            const agentWithoutPassword: Agent = {\n                ...agentData,\n                _id: updatedAgent._id.toString(),\n                id: updatedAgent._id.toString(),\n                companyId: updatedAgent.companyId?.toString(),\n            };\n            await logActivity(companyId, agentWithoutPassword.name, 'Update Profile', `Updated profile details`);\n            return { success: true, agent: agentWithoutPassword };\n        }\n\n        return { success: false, message: \"Failed to retrieve updated agent.\" };\n    } catch (error) {\n        console.error(\"Update agent profile error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function updateAgentPassword(agentId: string, currentPassword_unused: string, newPassword_unused: string, companyId: string): Promise<{ success: boolean; message: string }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        const agent = await agentsCollection.findOne({ _id: new ObjectId(agentId) });\n\n        if (!agent || !agent.password) {\n            return { success: false, message: \"Agent not found.\" };\n        }\n        \n        const isPasswordValid = await verifyPassword(currentPassword_unused, agent.password);\n        if (!isPasswordValid) {\n            return { success: false, message: \"Incorrect current password.\" };\n        }\n\n        const newHashedPassword = await hashPassword(newPassword_unused);\n        await agentsCollection.updateOne(\n            { _id: new ObjectId(agentId) },\n            { $set: { password: newHashedPassword } }\n        );\n        \n        await logActivity(companyId, agent.name, 'Update Password', `Changed password`);\n        return { success: true, message: \"Password updated successfully.\" };\n\n    } catch (error) {\n        console.error(\"Update password error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\n\nexport async function handleLogin(email: string, password_unused: string): Promise<{ success: boolean; message?: string; agent?: Agent }> {\n    try {\n      const agentsCollection = await getAgentsCollection();\n      const agent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n      if (agent && agent.password) {\n        const isPasswordValid = await verifyPassword(password_unused, agent.password);\n        if (isPasswordValid) {\n          const { password, ...agentData } = agent;\n          const agentWithoutPassword: Agent = {\n            ...agentData,\n            _id: agent._id.toString(),\n            id: agent._id.toString(),\n            companyId: agent.companyId?.toString(),\n          };\n          await logActivity(agent.companyId, agent.name, 'Login', `Logged in successfully`);\n          return { success: true, agent: agentWithoutPassword };\n        }\n      }\n      return { success: false, message: \"Invalid email or password.\" };\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return { success: false, message: \"Database connection error.\" };\n    }\n};\n\nexport async function createAgent(name: string, email: string, password_unused: string, role: AgentRole, companyId: string, createdBy: string): Promise<{ success: boolean; message?: string; agent?: Agent; }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n        if (existingAgent) {\n            return { success: false, message: \"An agent with this email already exists.\" };\n        }\n\n        const hashedPassword = await hashPassword(password_unused);\n        const avatar = `https://picsum.photos/seed/${name.replace(/\\s/g, '')}/100/100`;\n\n        const agentToInsert: Omit<Agent, 'id' | '_id'> = {\n            name,\n            email: email.toLowerCase(),\n            password: hashedPassword,\n            role,\n            avatar,\n            phone: '', \n            companyId: new ObjectId(companyId)\n        };\n\n        const result = await agentsCollection.insertOne(agentToInsert as any);\n\n        if (result.insertedId) {\n            const newAgent = await agentsCollection.findOne({ _id: result.insertedId });\n            if (newAgent) {\n                const { password, ...agentData } = newAgent;\n                const agentWithoutPassword: Agent = {\n                  ...agentData,\n                  _id: newAgent._id.toString(),\n                  id: newAgent._id.toString(),\n                  companyId: newAgent.companyId?.toString(),\n                };\n                await logActivity(companyId, createdBy, 'Create Agent', `Created agent: ${name}`);\n                return { success: true, agent: agentWithoutPassword };\n            }\n        }\n        return { success: false, message: \"Failed to create agent.\" };\n    } catch (error) {\n        console.error(\"Create agent error:\", error);\n        return { success: false, message: \"An unexpected error occurred while creating the agent.\" };\n    }\n}\n\nexport async function handleSignUp(name: string, email: string, password_unused: string): Promise<{ success: boolean; message?: string; agent?: Agent; }> {\n    const db = await getDb();\n    const session = db.client.startSession();\n    try {\n        let newAgentResult: Agent | undefined;\n        await session.withTransaction(async () => {\n            const companiesCollection = await getCompaniesCollection();\n            const agentsCollection = await getAgentsCollection();\n            const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() }, { session });\n\n            if (existingAgent) {\n                throw new Error(\"An agent with this email already exists.\");\n            }\n            \n            const companyResult = await companiesCollection.insertOne({\n                name: `${name}'s Company`,\n                createdAt: new Date(),\n            }, { session });\n\n            if (!companyResult.insertedId) {\n                throw new Error(\"Failed to create company.\");\n            }\n            const companyId = companyResult.insertedId;\n            \n            const hashedPassword = await hashPassword(password_unused);\n            const avatar = `https://picsum.photos/seed/${name.replace(/\\s/g, '')}/100/100`;\n            \n            const agentToInsert: Omit<Agent, 'id' | '_id'> = {\n                name,\n                email: email.toLowerCase(),\n                password: hashedPassword,\n                role: 'admin',\n                avatar,\n                phone: '',\n                companyId: companyId,\n            };\n\n            const agentResult = await agentsCollection.insertOne(agentToInsert as any, { session });\n\n             if (!agentResult.insertedId) {\n                throw new Error(\"Failed to create admin agent.\");\n            }\n            \n            await logActivity(companyId, name, 'Sign Up', `Created new company and admin account.`);\n\n            const newAgent = await agentsCollection.findOne({ _id: agentResult.insertedId }, { session });\n            if (newAgent) {\n                 const { password, ...agentData } = newAgent;\n                 newAgentResult = {\n                    ...agentData,\n                    _id: newAgent._id.toString(),\n                    id: newAgent._id.toString(),\n                    companyId: newAgent.companyId?.toString()\n                };\n            }\n        });\n        \n        if (!newAgentResult) {\n            return { success: false, message: \"Failed to retrieve the created agent.\" }\n        }\n\n        return { success: true, agent: newAgentResult };\n    } catch (error: any) {\n        console.error(\"Sign up transaction error:\", error);\n        // Abort transaction on error if it was started\n        if (session.inTransaction()) {\n            await session.abortTransaction();\n        }\n        return { success: false, message: error.message || \"An unexpected error occurred during sign up.\" };\n    } finally {\n        await session.endSession();\n    }\n}\n\n\nexport async function getActivityLogs(companyId: string): Promise<ActivityLog[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const logsCollection = await getActivityLogsCollection();\n        const logs = await logsCollection.find({ companyId: new ObjectId(companyId) }).sort({ timestamp: -1 }).limit(50).toArray();\n\n        return logs.map(log => ({\n            ...log,\n            _id: log._id.toString(),\n            id: log._id.toString(),\n            companyId: log.companyId.toString(),\n            timestamp: log.timestamp.toISOString(),\n        }));\n    } catch (error) {\n        console.error(\"Error fetching activity logs:\", error);\n        return [];\n    }\n}\n"],"names":[],"mappings":";;;;;;IA0RsB,cAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { getDb } from \"@/lib/db\";\nimport { hashPassword, verifyPassword } from \"@/lib/auth\";\nimport type { Agent, AgentRole, Announcement, Company, Comment, ActivityLog } from \"@/types\";\nimport { Collection, Db, ObjectId } from \"mongodb\";\n\nasync function getAgentsCollection(): Promise<Collection<Agent>> {\n    const db: Db = await getDb();\n    return db.collection<Agent>('agents');\n}\n\nasync function getCompaniesCollection(): Promise<Collection<Company>> {\n    const db: Db = await getDb();\n    return db.collection<Company>('companies');\n}\n\nasync function getAnnouncementsCollection(): Promise<Collection<Announcement>> {\n    const db: Db = await getDb();\n    return db.collection<Announcement>('announcements');\n}\n\nasync function getActivityLogsCollection(): Promise<Collection<ActivityLog>> {\n    const db: Db = await getDb();\n    return db.collection<ActivityLog>('activity_logs');\n}\n\nasync function logActivity(companyId: string | ObjectId, agentName: string, action: string, details: string) {\n    try {\n        const logsCollection = await getActivityLogsCollection();\n        await logsCollection.insertOne({\n            companyId: new ObjectId(companyId),\n            agentName,\n            action,\n            details,\n            timestamp: new Date(),\n        });\n    } catch (error) {\n        console.error(\"Failed to log activity:\", error);\n    }\n}\n\nexport async function getAgentsByCompany(companyId: string): Promise<Agent[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const agentsCollection = await getAgentsCollection();\n        const agents = await agentsCollection.find({ companyId: new ObjectId(companyId) }, { projection: { password: 0 } }).toArray();\n\n        return agents.map(agent => ({\n            ...agent,\n            _id: agent._id.toString(),\n            id: agent._id.toString(),\n            companyId: agent.companyId?.toString(),\n        }));\n    } catch (error) {\n        console.error(\"Error fetching agents by company:\", error);\n        return [];\n    }\n}\n\nexport async function createAnnouncement(data: { title: string; content: string; category: string; authorId: string; companyId: string }): Promise<{ success: boolean; message?: string; announcement?: Announcement }> {\n    try {\n        const announcementsCollection = await getAnnouncementsCollection();\n        const agentsCollection = await getAgentsCollection();\n\n        const author = await agentsCollection.findOne({ _id: new ObjectId(data.authorId) });\n        if (!author) {\n            return { success: false, message: \"Author not found.\" };\n        }\n\n        const newAnnouncement: Omit<Announcement, 'id' | '_id'> = {\n            title: data.title,\n            content: data.content,\n            category: data.category as any,\n            author: {\n                id: author._id.toString(),\n                name: author.name,\n                avatar: author.avatar\n            },\n            companyId: new ObjectId(data.companyId),\n            date: new Date().toISOString(),\n            readBy: [],\n            comments: [],\n        };\n\n        const result = await announcementsCollection.insertOne(newAnnouncement as any);\n        await logActivity(data.companyId, author.name, 'Create Announcement', `Published: \"${data.title}\"`);\n\n\n        if (result.insertedId) {\n            const createdAnnouncement: Announcement = {\n                ...(newAnnouncement as Announcement),\n                _id: result.insertedId,\n                id: result.insertedId.toString(),\n                companyId: data.companyId,\n            };\n            return { success: true, announcement: createdAnnouncement };\n        }\n\n        return { success: false, message: \"Failed to create announcement.\" };\n    } catch (error) {\n        console.error(\"Create announcement error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function getAnnouncementsByCompany(companyId: string): Promise<Announcement[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const announcementsCollection = await getAnnouncementsCollection();\n        const announcements = await announcementsCollection.find({ companyId: new ObjectId(companyId) }).sort({ date: -1 }).toArray();\n\n        return announcements.map(announcement => ({\n            ...announcement,\n            _id: announcement._id.toString(),\n            id: announcement._id.toString(),\n            companyId: announcement.companyId.toString(),\n            readBy: announcement.readBy || [],\n            comments: announcement.comments || [],\n        }));\n\n    } catch (error) {\n        console.error(\"Error fetching announcements by company:\", error);\n        return [];\n    }\n}\n\nexport async function markAnnouncementAsRead(announcementId: string, agentId: string): Promise<{ success: boolean }> {\n    try {\n        const announcementsCollection = await getAnnouncementsCollection();\n        await announcementsCollection.updateOne(\n            { _id: new ObjectId(announcementId) },\n            { $addToSet: { readBy: agentId } }\n        );\n        return { success: true };\n    } catch (error) {\n        console.error(\"Mark as read error:\", error);\n        return { success: false };\n    }\n}\n\nexport async function addCommentToAnnouncement(announcementId: string, authorId: string, content: string): Promise<{ success: boolean, comment?: Comment }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        const author = await agentsCollection.findOne({ _id: new ObjectId(authorId) });\n        if (!author) return { success: false };\n\n        const newComment: Comment = {\n            id: new ObjectId().toString(),\n            author: {\n                id: author._id.toString(),\n                name: author.name,\n                avatar: author.avatar\n            },\n            content,\n            timestamp: new Date().toISOString(),\n        };\n\n        const announcementsCollection = await getAnnouncementsCollection();\n        await announcementsCollection.updateOne(\n            { _id: new ObjectId(announcementId) },\n            { $push: { comments: newComment } }\n        );\n        \n        return { success: true, comment: newComment };\n\n    } catch (error) {\n        console.error(\"Add comment error:\", error);\n        return { success: false };\n    }\n}\n\n\nexport async function updateAgentProfile(agentId: string, name: string, email: string, phone: string, companyId: string): Promise<{ success: boolean; message?: string; agent?: Agent; }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        \n        const updateResult = await agentsCollection.updateOne(\n            { _id: new ObjectId(agentId) },\n            { $set: { name, email, phone } }\n        );\n\n        if (updateResult.modifiedCount === 0 && updateResult.matchedCount === 0) {\n            return { success: false, message: \"Agent not found.\" };\n        }\n        if (updateResult.modifiedCount === 0 && updateResult.matchedCount > 0) {\n            // No fields were actually changed\n            const updatedAgent = await agentsCollection.findOne({ _id: new ObjectId(agentId) });\n             if (updatedAgent) {\n                const { password, ...agentData } = updatedAgent;\n                const agentWithoutPassword: Agent = {\n                    ...agentData,\n                    _id: updatedAgent._id.toString(),\n                    id: updatedAgent._id.toString(),\n                    companyId: updatedAgent.companyId?.toString(),\n                };\n                 return { success: true, agent: agentWithoutPassword };\n            }\n        }\n        \n        const updatedAgent = await agentsCollection.findOne({ _id: new ObjectId(agentId) });\n\n        if (updatedAgent) {\n            const { password, ...agentData } = updatedAgent;\n            const agentWithoutPassword: Agent = {\n                ...agentData,\n                _id: updatedAgent._id.toString(),\n                id: updatedAgent._id.toString(),\n                companyId: updatedAgent.companyId?.toString(),\n            };\n            await logActivity(companyId, agentWithoutPassword.name, 'Update Profile', `Updated profile details`);\n            return { success: true, agent: agentWithoutPassword };\n        }\n\n        return { success: false, message: \"Failed to retrieve updated agent.\" };\n    } catch (error) {\n        console.error(\"Update agent profile error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function updateAgentPassword(agentId: string, currentPassword_unused: string, newPassword_unused: string, companyId: string): Promise<{ success: boolean; message: string }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        const agent = await agentsCollection.findOne({ _id: new ObjectId(agentId) });\n\n        if (!agent || !agent.password) {\n            return { success: false, message: \"Agent not found.\" };\n        }\n        \n        const isPasswordValid = await verifyPassword(currentPassword_unused, agent.password);\n        if (!isPasswordValid) {\n            return { success: false, message: \"Incorrect current password.\" };\n        }\n\n        const newHashedPassword = await hashPassword(newPassword_unused);\n        await agentsCollection.updateOne(\n            { _id: new ObjectId(agentId) },\n            { $set: { password: newHashedPassword } }\n        );\n        \n        await logActivity(companyId, agent.name, 'Update Password', `Changed password`);\n        return { success: true, message: \"Password updated successfully.\" };\n\n    } catch (error) {\n        console.error(\"Update password error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\n\nexport async function handleLogin(email: string, password_unused: string): Promise<{ success: boolean; message?: string; agent?: Agent }> {\n    try {\n      const agentsCollection = await getAgentsCollection();\n      const agent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n      if (agent && agent.password) {\n        const isPasswordValid = await verifyPassword(password_unused, agent.password);\n        if (isPasswordValid) {\n          const { password, ...agentData } = agent;\n          const agentWithoutPassword: Agent = {\n            ...agentData,\n            _id: agent._id.toString(),\n            id: agent._id.toString(),\n            companyId: agent.companyId?.toString(),\n          };\n          await logActivity(agent.companyId, agent.name, 'Login', `Logged in successfully`);\n          return { success: true, agent: agentWithoutPassword };\n        }\n      }\n      return { success: false, message: \"Invalid email or password.\" };\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return { success: false, message: \"Database connection error.\" };\n    }\n};\n\nexport async function createAgent(name: string, email: string, password_unused: string, role: AgentRole, companyId: string, createdBy: string): Promise<{ success: boolean; message?: string; agent?: Agent; }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n        if (existingAgent) {\n            return { success: false, message: \"An agent with this email already exists.\" };\n        }\n\n        const hashedPassword = await hashPassword(password_unused);\n        const avatar = `https://picsum.photos/seed/${name.replace(/\\s/g, '')}/100/100`;\n\n        const agentToInsert: Omit<Agent, 'id' | '_id'> = {\n            name,\n            email: email.toLowerCase(),\n            password: hashedPassword,\n            role,\n            avatar,\n            phone: '', \n            companyId: new ObjectId(companyId)\n        };\n\n        const result = await agentsCollection.insertOne(agentToInsert as any);\n\n        if (result.insertedId) {\n            const newAgent = await agentsCollection.findOne({ _id: result.insertedId });\n            if (newAgent) {\n                const { password, ...agentData } = newAgent;\n                const agentWithoutPassword: Agent = {\n                  ...agentData,\n                  _id: newAgent._id.toString(),\n                  id: newAgent._id.toString(),\n                  companyId: newAgent.companyId?.toString(),\n                };\n                await logActivity(companyId, createdBy, 'Create Agent', `Created agent: ${name}`);\n                return { success: true, agent: agentWithoutPassword };\n            }\n        }\n        return { success: false, message: \"Failed to create agent.\" };\n    } catch (error) {\n        console.error(\"Create agent error:\", error);\n        return { success: false, message: \"An unexpected error occurred while creating the agent.\" };\n    }\n}\n\nexport async function handleSignUp(name: string, email: string, password_unused: string): Promise<{ success: boolean; message?: string; agent?: Agent; }> {\n    const db = await getDb();\n    const session = db.client.startSession();\n    try {\n        let newAgentResult: Agent | undefined;\n        await session.withTransaction(async () => {\n            const companiesCollection = await getCompaniesCollection();\n            const agentsCollection = await getAgentsCollection();\n            const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() }, { session });\n\n            if (existingAgent) {\n                throw new Error(\"An agent with this email already exists.\");\n            }\n            \n            const companyResult = await companiesCollection.insertOne({\n                name: `${name}'s Company`,\n                createdAt: new Date(),\n            }, { session });\n\n            if (!companyResult.insertedId) {\n                throw new Error(\"Failed to create company.\");\n            }\n            const companyId = companyResult.insertedId;\n            \n            const hashedPassword = await hashPassword(password_unused);\n            const avatar = `https://picsum.photos/seed/${name.replace(/\\s/g, '')}/100/100`;\n            \n            const agentToInsert: Omit<Agent, 'id' | '_id'> = {\n                name,\n                email: email.toLowerCase(),\n                password: hashedPassword,\n                role: 'admin',\n                avatar,\n                phone: '',\n                companyId: companyId,\n            };\n\n            const agentResult = await agentsCollection.insertOne(agentToInsert as any, { session });\n\n             if (!agentResult.insertedId) {\n                throw new Error(\"Failed to create admin agent.\");\n            }\n            \n            await logActivity(companyId, name, 'Sign Up', `Created new company and admin account.`);\n\n            const newAgent = await agentsCollection.findOne({ _id: agentResult.insertedId }, { session });\n            if (newAgent) {\n                 const { password, ...agentData } = newAgent;\n                 newAgentResult = {\n                    ...agentData,\n                    _id: newAgent._id.toString(),\n                    id: newAgent._id.toString(),\n                    companyId: newAgent.companyId?.toString()\n                };\n            }\n        });\n        \n        if (!newAgentResult) {\n            return { success: false, message: \"Failed to retrieve the created agent.\" }\n        }\n\n        return { success: true, agent: newAgentResult };\n    } catch (error: any) {\n        console.error(\"Sign up transaction error:\", error);\n        // Abort transaction on error if it was started\n        if (session.inTransaction()) {\n            await session.abortTransaction();\n        }\n        return { success: false, message: error.message || \"An unexpected error occurred during sign up.\" };\n    } finally {\n        await session.endSession();\n    }\n}\n\n\nexport async function getActivityLogs(companyId: string): Promise<ActivityLog[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const logsCollection = await getActivityLogsCollection();\n        const logs = await logsCollection.find({ companyId: new ObjectId(companyId) }).sort({ timestamp: -1 }).limit(50).toArray();\n\n        return logs.map(log => ({\n            ...log,\n            _id: log._id.toString(),\n            id: log._id.toString(),\n            companyId: log.companyId.toString(),\n            timestamp: log.timestamp.toISOString(),\n        }));\n    } catch (error) {\n        console.error(\"Error fetching activity logs:\", error);\n        return [];\n    }\n}\n"],"names":[],"mappings":";;;;;;IA2CsB,qBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { getDb } from \"@/lib/db\";\nimport { hashPassword, verifyPassword } from \"@/lib/auth\";\nimport type { Agent, AgentRole, Announcement, Company, Comment, ActivityLog } from \"@/types\";\nimport { Collection, Db, ObjectId } from \"mongodb\";\n\nasync function getAgentsCollection(): Promise<Collection<Agent>> {\n    const db: Db = await getDb();\n    return db.collection<Agent>('agents');\n}\n\nasync function getCompaniesCollection(): Promise<Collection<Company>> {\n    const db: Db = await getDb();\n    return db.collection<Company>('companies');\n}\n\nasync function getAnnouncementsCollection(): Promise<Collection<Announcement>> {\n    const db: Db = await getDb();\n    return db.collection<Announcement>('announcements');\n}\n\nasync function getActivityLogsCollection(): Promise<Collection<ActivityLog>> {\n    const db: Db = await getDb();\n    return db.collection<ActivityLog>('activity_logs');\n}\n\nasync function logActivity(companyId: string | ObjectId, agentName: string, action: string, details: string) {\n    try {\n        const logsCollection = await getActivityLogsCollection();\n        await logsCollection.insertOne({\n            companyId: new ObjectId(companyId),\n            agentName,\n            action,\n            details,\n            timestamp: new Date(),\n        });\n    } catch (error) {\n        console.error(\"Failed to log activity:\", error);\n    }\n}\n\nexport async function getAgentsByCompany(companyId: string): Promise<Agent[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const agentsCollection = await getAgentsCollection();\n        const agents = await agentsCollection.find({ companyId: new ObjectId(companyId) }, { projection: { password: 0 } }).toArray();\n\n        return agents.map(agent => ({\n            ...agent,\n            _id: agent._id.toString(),\n            id: agent._id.toString(),\n            companyId: agent.companyId?.toString(),\n        }));\n    } catch (error) {\n        console.error(\"Error fetching agents by company:\", error);\n        return [];\n    }\n}\n\nexport async function createAnnouncement(data: { title: string; content: string; category: string; authorId: string; companyId: string }): Promise<{ success: boolean; message?: string; announcement?: Announcement }> {\n    try {\n        const announcementsCollection = await getAnnouncementsCollection();\n        const agentsCollection = await getAgentsCollection();\n\n        const author = await agentsCollection.findOne({ _id: new ObjectId(data.authorId) });\n        if (!author) {\n            return { success: false, message: \"Author not found.\" };\n        }\n\n        const newAnnouncement: Omit<Announcement, 'id' | '_id'> = {\n            title: data.title,\n            content: data.content,\n            category: data.category as any,\n            author: {\n                id: author._id.toString(),\n                name: author.name,\n                avatar: author.avatar\n            },\n            companyId: new ObjectId(data.companyId),\n            date: new Date().toISOString(),\n            readBy: [],\n            comments: [],\n        };\n\n        const result = await announcementsCollection.insertOne(newAnnouncement as any);\n        await logActivity(data.companyId, author.name, 'Create Announcement', `Published: \"${data.title}\"`);\n\n\n        if (result.insertedId) {\n            const createdAnnouncement: Announcement = {\n                ...(newAnnouncement as Announcement),\n                _id: result.insertedId,\n                id: result.insertedId.toString(),\n                companyId: data.companyId,\n            };\n            return { success: true, announcement: createdAnnouncement };\n        }\n\n        return { success: false, message: \"Failed to create announcement.\" };\n    } catch (error) {\n        console.error(\"Create announcement error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function getAnnouncementsByCompany(companyId: string): Promise<Announcement[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const announcementsCollection = await getAnnouncementsCollection();\n        const announcements = await announcementsCollection.find({ companyId: new ObjectId(companyId) }).sort({ date: -1 }).toArray();\n\n        return announcements.map(announcement => ({\n            ...announcement,\n            _id: announcement._id.toString(),\n            id: announcement._id.toString(),\n            companyId: announcement.companyId.toString(),\n            readBy: announcement.readBy || [],\n            comments: announcement.comments || [],\n        }));\n\n    } catch (error) {\n        console.error(\"Error fetching announcements by company:\", error);\n        return [];\n    }\n}\n\nexport async function markAnnouncementAsRead(announcementId: string, agentId: string): Promise<{ success: boolean }> {\n    try {\n        const announcementsCollection = await getAnnouncementsCollection();\n        await announcementsCollection.updateOne(\n            { _id: new ObjectId(announcementId) },\n            { $addToSet: { readBy: agentId } }\n        );\n        return { success: true };\n    } catch (error) {\n        console.error(\"Mark as read error:\", error);\n        return { success: false };\n    }\n}\n\nexport async function addCommentToAnnouncement(announcementId: string, authorId: string, content: string): Promise<{ success: boolean, comment?: Comment }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        const author = await agentsCollection.findOne({ _id: new ObjectId(authorId) });\n        if (!author) return { success: false };\n\n        const newComment: Comment = {\n            id: new ObjectId().toString(),\n            author: {\n                id: author._id.toString(),\n                name: author.name,\n                avatar: author.avatar\n            },\n            content,\n            timestamp: new Date().toISOString(),\n        };\n\n        const announcementsCollection = await getAnnouncementsCollection();\n        await announcementsCollection.updateOne(\n            { _id: new ObjectId(announcementId) },\n            { $push: { comments: newComment } }\n        );\n        \n        return { success: true, comment: newComment };\n\n    } catch (error) {\n        console.error(\"Add comment error:\", error);\n        return { success: false };\n    }\n}\n\n\nexport async function updateAgentProfile(agentId: string, name: string, email: string, phone: string, companyId: string): Promise<{ success: boolean; message?: string; agent?: Agent; }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        \n        const updateResult = await agentsCollection.updateOne(\n            { _id: new ObjectId(agentId) },\n            { $set: { name, email, phone } }\n        );\n\n        if (updateResult.modifiedCount === 0 && updateResult.matchedCount === 0) {\n            return { success: false, message: \"Agent not found.\" };\n        }\n        if (updateResult.modifiedCount === 0 && updateResult.matchedCount > 0) {\n            // No fields were actually changed\n            const updatedAgent = await agentsCollection.findOne({ _id: new ObjectId(agentId) });\n             if (updatedAgent) {\n                const { password, ...agentData } = updatedAgent;\n                const agentWithoutPassword: Agent = {\n                    ...agentData,\n                    _id: updatedAgent._id.toString(),\n                    id: updatedAgent._id.toString(),\n                    companyId: updatedAgent.companyId?.toString(),\n                };\n                 return { success: true, agent: agentWithoutPassword };\n            }\n        }\n        \n        const updatedAgent = await agentsCollection.findOne({ _id: new ObjectId(agentId) });\n\n        if (updatedAgent) {\n            const { password, ...agentData } = updatedAgent;\n            const agentWithoutPassword: Agent = {\n                ...agentData,\n                _id: updatedAgent._id.toString(),\n                id: updatedAgent._id.toString(),\n                companyId: updatedAgent.companyId?.toString(),\n            };\n            await logActivity(companyId, agentWithoutPassword.name, 'Update Profile', `Updated profile details`);\n            return { success: true, agent: agentWithoutPassword };\n        }\n\n        return { success: false, message: \"Failed to retrieve updated agent.\" };\n    } catch (error) {\n        console.error(\"Update agent profile error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function updateAgentPassword(agentId: string, currentPassword_unused: string, newPassword_unused: string, companyId: string): Promise<{ success: boolean; message: string }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        const agent = await agentsCollection.findOne({ _id: new ObjectId(agentId) });\n\n        if (!agent || !agent.password) {\n            return { success: false, message: \"Agent not found.\" };\n        }\n        \n        const isPasswordValid = await verifyPassword(currentPassword_unused, agent.password);\n        if (!isPasswordValid) {\n            return { success: false, message: \"Incorrect current password.\" };\n        }\n\n        const newHashedPassword = await hashPassword(newPassword_unused);\n        await agentsCollection.updateOne(\n            { _id: new ObjectId(agentId) },\n            { $set: { password: newHashedPassword } }\n        );\n        \n        await logActivity(companyId, agent.name, 'Update Password', `Changed password`);\n        return { success: true, message: \"Password updated successfully.\" };\n\n    } catch (error) {\n        console.error(\"Update password error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\n\nexport async function handleLogin(email: string, password_unused: string): Promise<{ success: boolean; message?: string; agent?: Agent }> {\n    try {\n      const agentsCollection = await getAgentsCollection();\n      const agent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n      if (agent && agent.password) {\n        const isPasswordValid = await verifyPassword(password_unused, agent.password);\n        if (isPasswordValid) {\n          const { password, ...agentData } = agent;\n          const agentWithoutPassword: Agent = {\n            ...agentData,\n            _id: agent._id.toString(),\n            id: agent._id.toString(),\n            companyId: agent.companyId?.toString(),\n          };\n          await logActivity(agent.companyId, agent.name, 'Login', `Logged in successfully`);\n          return { success: true, agent: agentWithoutPassword };\n        }\n      }\n      return { success: false, message: \"Invalid email or password.\" };\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return { success: false, message: \"Database connection error.\" };\n    }\n};\n\nexport async function createAgent(name: string, email: string, password_unused: string, role: AgentRole, companyId: string, createdBy: string): Promise<{ success: boolean; message?: string; agent?: Agent; }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n        if (existingAgent) {\n            return { success: false, message: \"An agent with this email already exists.\" };\n        }\n\n        const hashedPassword = await hashPassword(password_unused);\n        const avatar = `https://picsum.photos/seed/${name.replace(/\\s/g, '')}/100/100`;\n\n        const agentToInsert: Omit<Agent, 'id' | '_id'> = {\n            name,\n            email: email.toLowerCase(),\n            password: hashedPassword,\n            role,\n            avatar,\n            phone: '', \n            companyId: new ObjectId(companyId)\n        };\n\n        const result = await agentsCollection.insertOne(agentToInsert as any);\n\n        if (result.insertedId) {\n            const newAgent = await agentsCollection.findOne({ _id: result.insertedId });\n            if (newAgent) {\n                const { password, ...agentData } = newAgent;\n                const agentWithoutPassword: Agent = {\n                  ...agentData,\n                  _id: newAgent._id.toString(),\n                  id: newAgent._id.toString(),\n                  companyId: newAgent.companyId?.toString(),\n                };\n                await logActivity(companyId, createdBy, 'Create Agent', `Created agent: ${name}`);\n                return { success: true, agent: agentWithoutPassword };\n            }\n        }\n        return { success: false, message: \"Failed to create agent.\" };\n    } catch (error) {\n        console.error(\"Create agent error:\", error);\n        return { success: false, message: \"An unexpected error occurred while creating the agent.\" };\n    }\n}\n\nexport async function handleSignUp(name: string, email: string, password_unused: string): Promise<{ success: boolean; message?: string; agent?: Agent; }> {\n    const db = await getDb();\n    const session = db.client.startSession();\n    try {\n        let newAgentResult: Agent | undefined;\n        await session.withTransaction(async () => {\n            const companiesCollection = await getCompaniesCollection();\n            const agentsCollection = await getAgentsCollection();\n            const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() }, { session });\n\n            if (existingAgent) {\n                throw new Error(\"An agent with this email already exists.\");\n            }\n            \n            const companyResult = await companiesCollection.insertOne({\n                name: `${name}'s Company`,\n                createdAt: new Date(),\n            }, { session });\n\n            if (!companyResult.insertedId) {\n                throw new Error(\"Failed to create company.\");\n            }\n            const companyId = companyResult.insertedId;\n            \n            const hashedPassword = await hashPassword(password_unused);\n            const avatar = `https://picsum.photos/seed/${name.replace(/\\s/g, '')}/100/100`;\n            \n            const agentToInsert: Omit<Agent, 'id' | '_id'> = {\n                name,\n                email: email.toLowerCase(),\n                password: hashedPassword,\n                role: 'admin',\n                avatar,\n                phone: '',\n                companyId: companyId,\n            };\n\n            const agentResult = await agentsCollection.insertOne(agentToInsert as any, { session });\n\n             if (!agentResult.insertedId) {\n                throw new Error(\"Failed to create admin agent.\");\n            }\n            \n            await logActivity(companyId, name, 'Sign Up', `Created new company and admin account.`);\n\n            const newAgent = await agentsCollection.findOne({ _id: agentResult.insertedId }, { session });\n            if (newAgent) {\n                 const { password, ...agentData } = newAgent;\n                 newAgentResult = {\n                    ...agentData,\n                    _id: newAgent._id.toString(),\n                    id: newAgent._id.toString(),\n                    companyId: newAgent.companyId?.toString()\n                };\n            }\n        });\n        \n        if (!newAgentResult) {\n            return { success: false, message: \"Failed to retrieve the created agent.\" }\n        }\n\n        return { success: true, agent: newAgentResult };\n    } catch (error: any) {\n        console.error(\"Sign up transaction error:\", error);\n        // Abort transaction on error if it was started\n        if (session.inTransaction()) {\n            await session.abortTransaction();\n        }\n        return { success: false, message: error.message || \"An unexpected error occurred during sign up.\" };\n    } finally {\n        await session.endSession();\n    }\n}\n\n\nexport async function getActivityLogs(companyId: string): Promise<ActivityLog[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const logsCollection = await getActivityLogsCollection();\n        const logs = await logsCollection.find({ companyId: new ObjectId(companyId) }).sort({ timestamp: -1 }).limit(50).toArray();\n\n        return logs.map(log => ({\n            ...log,\n            _id: log._id.toString(),\n            id: log._id.toString(),\n            companyId: log.companyId.toString(),\n            timestamp: log.timestamp.toISOString(),\n        }));\n    } catch (error) {\n        console.error(\"Error fetching activity logs:\", error);\n        return [];\n    }\n}\n"],"names":[],"mappings":";;;;;;IA+DsB,qBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { getDb } from \"@/lib/db\";\nimport { hashPassword, verifyPassword } from \"@/lib/auth\";\nimport type { Agent, AgentRole, Announcement, Company, Comment, ActivityLog } from \"@/types\";\nimport { Collection, Db, ObjectId } from \"mongodb\";\n\nasync function getAgentsCollection(): Promise<Collection<Agent>> {\n    const db: Db = await getDb();\n    return db.collection<Agent>('agents');\n}\n\nasync function getCompaniesCollection(): Promise<Collection<Company>> {\n    const db: Db = await getDb();\n    return db.collection<Company>('companies');\n}\n\nasync function getAnnouncementsCollection(): Promise<Collection<Announcement>> {\n    const db: Db = await getDb();\n    return db.collection<Announcement>('announcements');\n}\n\nasync function getActivityLogsCollection(): Promise<Collection<ActivityLog>> {\n    const db: Db = await getDb();\n    return db.collection<ActivityLog>('activity_logs');\n}\n\nasync function logActivity(companyId: string | ObjectId, agentName: string, action: string, details: string) {\n    try {\n        const logsCollection = await getActivityLogsCollection();\n        await logsCollection.insertOne({\n            companyId: new ObjectId(companyId),\n            agentName,\n            action,\n            details,\n            timestamp: new Date(),\n        });\n    } catch (error) {\n        console.error(\"Failed to log activity:\", error);\n    }\n}\n\nexport async function getAgentsByCompany(companyId: string): Promise<Agent[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const agentsCollection = await getAgentsCollection();\n        const agents = await agentsCollection.find({ companyId: new ObjectId(companyId) }, { projection: { password: 0 } }).toArray();\n\n        return agents.map(agent => ({\n            ...agent,\n            _id: agent._id.toString(),\n            id: agent._id.toString(),\n            companyId: agent.companyId?.toString(),\n        }));\n    } catch (error) {\n        console.error(\"Error fetching agents by company:\", error);\n        return [];\n    }\n}\n\nexport async function createAnnouncement(data: { title: string; content: string; category: string; authorId: string; companyId: string }): Promise<{ success: boolean; message?: string; announcement?: Announcement }> {\n    try {\n        const announcementsCollection = await getAnnouncementsCollection();\n        const agentsCollection = await getAgentsCollection();\n\n        const author = await agentsCollection.findOne({ _id: new ObjectId(data.authorId) });\n        if (!author) {\n            return { success: false, message: \"Author not found.\" };\n        }\n\n        const newAnnouncement: Omit<Announcement, 'id' | '_id'> = {\n            title: data.title,\n            content: data.content,\n            category: data.category as any,\n            author: {\n                id: author._id.toString(),\n                name: author.name,\n                avatar: author.avatar\n            },\n            companyId: new ObjectId(data.companyId),\n            date: new Date().toISOString(),\n            readBy: [],\n            comments: [],\n        };\n\n        const result = await announcementsCollection.insertOne(newAnnouncement as any);\n        await logActivity(data.companyId, author.name, 'Create Announcement', `Published: \"${data.title}\"`);\n\n\n        if (result.insertedId) {\n            const createdAnnouncement: Announcement = {\n                ...(newAnnouncement as Announcement),\n                _id: result.insertedId,\n                id: result.insertedId.toString(),\n                companyId: data.companyId,\n            };\n            return { success: true, announcement: createdAnnouncement };\n        }\n\n        return { success: false, message: \"Failed to create announcement.\" };\n    } catch (error) {\n        console.error(\"Create announcement error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function getAnnouncementsByCompany(companyId: string): Promise<Announcement[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const announcementsCollection = await getAnnouncementsCollection();\n        const announcements = await announcementsCollection.find({ companyId: new ObjectId(companyId) }).sort({ date: -1 }).toArray();\n\n        return announcements.map(announcement => ({\n            ...announcement,\n            _id: announcement._id.toString(),\n            id: announcement._id.toString(),\n            companyId: announcement.companyId.toString(),\n            readBy: announcement.readBy || [],\n            comments: announcement.comments || [],\n        }));\n\n    } catch (error) {\n        console.error(\"Error fetching announcements by company:\", error);\n        return [];\n    }\n}\n\nexport async function markAnnouncementAsRead(announcementId: string, agentId: string): Promise<{ success: boolean }> {\n    try {\n        const announcementsCollection = await getAnnouncementsCollection();\n        await announcementsCollection.updateOne(\n            { _id: new ObjectId(announcementId) },\n            { $addToSet: { readBy: agentId } }\n        );\n        return { success: true };\n    } catch (error) {\n        console.error(\"Mark as read error:\", error);\n        return { success: false };\n    }\n}\n\nexport async function addCommentToAnnouncement(announcementId: string, authorId: string, content: string): Promise<{ success: boolean, comment?: Comment }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        const author = await agentsCollection.findOne({ _id: new ObjectId(authorId) });\n        if (!author) return { success: false };\n\n        const newComment: Comment = {\n            id: new ObjectId().toString(),\n            author: {\n                id: author._id.toString(),\n                name: author.name,\n                avatar: author.avatar\n            },\n            content,\n            timestamp: new Date().toISOString(),\n        };\n\n        const announcementsCollection = await getAnnouncementsCollection();\n        await announcementsCollection.updateOne(\n            { _id: new ObjectId(announcementId) },\n            { $push: { comments: newComment } }\n        );\n        \n        return { success: true, comment: newComment };\n\n    } catch (error) {\n        console.error(\"Add comment error:\", error);\n        return { success: false };\n    }\n}\n\n\nexport async function updateAgentProfile(agentId: string, name: string, email: string, phone: string, companyId: string): Promise<{ success: boolean; message?: string; agent?: Agent; }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        \n        const updateResult = await agentsCollection.updateOne(\n            { _id: new ObjectId(agentId) },\n            { $set: { name, email, phone } }\n        );\n\n        if (updateResult.modifiedCount === 0 && updateResult.matchedCount === 0) {\n            return { success: false, message: \"Agent not found.\" };\n        }\n        if (updateResult.modifiedCount === 0 && updateResult.matchedCount > 0) {\n            // No fields were actually changed\n            const updatedAgent = await agentsCollection.findOne({ _id: new ObjectId(agentId) });\n             if (updatedAgent) {\n                const { password, ...agentData } = updatedAgent;\n                const agentWithoutPassword: Agent = {\n                    ...agentData,\n                    _id: updatedAgent._id.toString(),\n                    id: updatedAgent._id.toString(),\n                    companyId: updatedAgent.companyId?.toString(),\n                };\n                 return { success: true, agent: agentWithoutPassword };\n            }\n        }\n        \n        const updatedAgent = await agentsCollection.findOne({ _id: new ObjectId(agentId) });\n\n        if (updatedAgent) {\n            const { password, ...agentData } = updatedAgent;\n            const agentWithoutPassword: Agent = {\n                ...agentData,\n                _id: updatedAgent._id.toString(),\n                id: updatedAgent._id.toString(),\n                companyId: updatedAgent.companyId?.toString(),\n            };\n            await logActivity(companyId, agentWithoutPassword.name, 'Update Profile', `Updated profile details`);\n            return { success: true, agent: agentWithoutPassword };\n        }\n\n        return { success: false, message: \"Failed to retrieve updated agent.\" };\n    } catch (error) {\n        console.error(\"Update agent profile error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function updateAgentPassword(agentId: string, currentPassword_unused: string, newPassword_unused: string, companyId: string): Promise<{ success: boolean; message: string }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        const agent = await agentsCollection.findOne({ _id: new ObjectId(agentId) });\n\n        if (!agent || !agent.password) {\n            return { success: false, message: \"Agent not found.\" };\n        }\n        \n        const isPasswordValid = await verifyPassword(currentPassword_unused, agent.password);\n        if (!isPasswordValid) {\n            return { success: false, message: \"Incorrect current password.\" };\n        }\n\n        const newHashedPassword = await hashPassword(newPassword_unused);\n        await agentsCollection.updateOne(\n            { _id: new ObjectId(agentId) },\n            { $set: { password: newHashedPassword } }\n        );\n        \n        await logActivity(companyId, agent.name, 'Update Password', `Changed password`);\n        return { success: true, message: \"Password updated successfully.\" };\n\n    } catch (error) {\n        console.error(\"Update password error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\n\nexport async function handleLogin(email: string, password_unused: string): Promise<{ success: boolean; message?: string; agent?: Agent }> {\n    try {\n      const agentsCollection = await getAgentsCollection();\n      const agent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n      if (agent && agent.password) {\n        const isPasswordValid = await verifyPassword(password_unused, agent.password);\n        if (isPasswordValid) {\n          const { password, ...agentData } = agent;\n          const agentWithoutPassword: Agent = {\n            ...agentData,\n            _id: agent._id.toString(),\n            id: agent._id.toString(),\n            companyId: agent.companyId?.toString(),\n          };\n          await logActivity(agent.companyId, agent.name, 'Login', `Logged in successfully`);\n          return { success: true, agent: agentWithoutPassword };\n        }\n      }\n      return { success: false, message: \"Invalid email or password.\" };\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return { success: false, message: \"Database connection error.\" };\n    }\n};\n\nexport async function createAgent(name: string, email: string, password_unused: string, role: AgentRole, companyId: string, createdBy: string): Promise<{ success: boolean; message?: string; agent?: Agent; }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n        if (existingAgent) {\n            return { success: false, message: \"An agent with this email already exists.\" };\n        }\n\n        const hashedPassword = await hashPassword(password_unused);\n        const avatar = `https://picsum.photos/seed/${name.replace(/\\s/g, '')}/100/100`;\n\n        const agentToInsert: Omit<Agent, 'id' | '_id'> = {\n            name,\n            email: email.toLowerCase(),\n            password: hashedPassword,\n            role,\n            avatar,\n            phone: '', \n            companyId: new ObjectId(companyId)\n        };\n\n        const result = await agentsCollection.insertOne(agentToInsert as any);\n\n        if (result.insertedId) {\n            const newAgent = await agentsCollection.findOne({ _id: result.insertedId });\n            if (newAgent) {\n                const { password, ...agentData } = newAgent;\n                const agentWithoutPassword: Agent = {\n                  ...agentData,\n                  _id: newAgent._id.toString(),\n                  id: newAgent._id.toString(),\n                  companyId: newAgent.companyId?.toString(),\n                };\n                await logActivity(companyId, createdBy, 'Create Agent', `Created agent: ${name}`);\n                return { success: true, agent: agentWithoutPassword };\n            }\n        }\n        return { success: false, message: \"Failed to create agent.\" };\n    } catch (error) {\n        console.error(\"Create agent error:\", error);\n        return { success: false, message: \"An unexpected error occurred while creating the agent.\" };\n    }\n}\n\nexport async function handleSignUp(name: string, email: string, password_unused: string): Promise<{ success: boolean; message?: string; agent?: Agent; }> {\n    const db = await getDb();\n    const session = db.client.startSession();\n    try {\n        let newAgentResult: Agent | undefined;\n        await session.withTransaction(async () => {\n            const companiesCollection = await getCompaniesCollection();\n            const agentsCollection = await getAgentsCollection();\n            const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() }, { session });\n\n            if (existingAgent) {\n                throw new Error(\"An agent with this email already exists.\");\n            }\n            \n            const companyResult = await companiesCollection.insertOne({\n                name: `${name}'s Company`,\n                createdAt: new Date(),\n            }, { session });\n\n            if (!companyResult.insertedId) {\n                throw new Error(\"Failed to create company.\");\n            }\n            const companyId = companyResult.insertedId;\n            \n            const hashedPassword = await hashPassword(password_unused);\n            const avatar = `https://picsum.photos/seed/${name.replace(/\\s/g, '')}/100/100`;\n            \n            const agentToInsert: Omit<Agent, 'id' | '_id'> = {\n                name,\n                email: email.toLowerCase(),\n                password: hashedPassword,\n                role: 'admin',\n                avatar,\n                phone: '',\n                companyId: companyId,\n            };\n\n            const agentResult = await agentsCollection.insertOne(agentToInsert as any, { session });\n\n             if (!agentResult.insertedId) {\n                throw new Error(\"Failed to create admin agent.\");\n            }\n            \n            await logActivity(companyId, name, 'Sign Up', `Created new company and admin account.`);\n\n            const newAgent = await agentsCollection.findOne({ _id: agentResult.insertedId }, { session });\n            if (newAgent) {\n                 const { password, ...agentData } = newAgent;\n                 newAgentResult = {\n                    ...agentData,\n                    _id: newAgent._id.toString(),\n                    id: newAgent._id.toString(),\n                    companyId: newAgent.companyId?.toString()\n                };\n            }\n        });\n        \n        if (!newAgentResult) {\n            return { success: false, message: \"Failed to retrieve the created agent.\" }\n        }\n\n        return { success: true, agent: newAgentResult };\n    } catch (error: any) {\n        console.error(\"Sign up transaction error:\", error);\n        // Abort transaction on error if it was started\n        if (session.inTransaction()) {\n            await session.abortTransaction();\n        }\n        return { success: false, message: error.message || \"An unexpected error occurred during sign up.\" };\n    } finally {\n        await session.endSession();\n    }\n}\n\n\nexport async function getActivityLogs(companyId: string): Promise<ActivityLog[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const logsCollection = await getActivityLogsCollection();\n        const logs = await logsCollection.find({ companyId: new ObjectId(companyId) }).sort({ timestamp: -1 }).limit(50).toArray();\n\n        return logs.map(log => ({\n            ...log,\n            _id: log._id.toString(),\n            id: log._id.toString(),\n            companyId: log.companyId.toString(),\n            timestamp: log.timestamp.toISOString(),\n        }));\n    } catch (error) {\n        console.error(\"Error fetching activity logs:\", error);\n        return [];\n    }\n}\n"],"names":[],"mappings":";;;;;;IA6GsB,4BAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { getDb } from \"@/lib/db\";\nimport { hashPassword, verifyPassword } from \"@/lib/auth\";\nimport type { Agent, AgentRole, Announcement, Company, Comment, ActivityLog } from \"@/types\";\nimport { Collection, Db, ObjectId } from \"mongodb\";\n\nasync function getAgentsCollection(): Promise<Collection<Agent>> {\n    const db: Db = await getDb();\n    return db.collection<Agent>('agents');\n}\n\nasync function getCompaniesCollection(): Promise<Collection<Company>> {\n    const db: Db = await getDb();\n    return db.collection<Company>('companies');\n}\n\nasync function getAnnouncementsCollection(): Promise<Collection<Announcement>> {\n    const db: Db = await getDb();\n    return db.collection<Announcement>('announcements');\n}\n\nasync function getActivityLogsCollection(): Promise<Collection<ActivityLog>> {\n    const db: Db = await getDb();\n    return db.collection<ActivityLog>('activity_logs');\n}\n\nasync function logActivity(companyId: string | ObjectId, agentName: string, action: string, details: string) {\n    try {\n        const logsCollection = await getActivityLogsCollection();\n        await logsCollection.insertOne({\n            companyId: new ObjectId(companyId),\n            agentName,\n            action,\n            details,\n            timestamp: new Date(),\n        });\n    } catch (error) {\n        console.error(\"Failed to log activity:\", error);\n    }\n}\n\nexport async function getAgentsByCompany(companyId: string): Promise<Agent[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const agentsCollection = await getAgentsCollection();\n        const agents = await agentsCollection.find({ companyId: new ObjectId(companyId) }, { projection: { password: 0 } }).toArray();\n\n        return agents.map(agent => ({\n            ...agent,\n            _id: agent._id.toString(),\n            id: agent._id.toString(),\n            companyId: agent.companyId?.toString(),\n        }));\n    } catch (error) {\n        console.error(\"Error fetching agents by company:\", error);\n        return [];\n    }\n}\n\nexport async function createAnnouncement(data: { title: string; content: string; category: string; authorId: string; companyId: string }): Promise<{ success: boolean; message?: string; announcement?: Announcement }> {\n    try {\n        const announcementsCollection = await getAnnouncementsCollection();\n        const agentsCollection = await getAgentsCollection();\n\n        const author = await agentsCollection.findOne({ _id: new ObjectId(data.authorId) });\n        if (!author) {\n            return { success: false, message: \"Author not found.\" };\n        }\n\n        const newAnnouncement: Omit<Announcement, 'id' | '_id'> = {\n            title: data.title,\n            content: data.content,\n            category: data.category as any,\n            author: {\n                id: author._id.toString(),\n                name: author.name,\n                avatar: author.avatar\n            },\n            companyId: new ObjectId(data.companyId),\n            date: new Date().toISOString(),\n            readBy: [],\n            comments: [],\n        };\n\n        const result = await announcementsCollection.insertOne(newAnnouncement as any);\n        await logActivity(data.companyId, author.name, 'Create Announcement', `Published: \"${data.title}\"`);\n\n\n        if (result.insertedId) {\n            const createdAnnouncement: Announcement = {\n                ...(newAnnouncement as Announcement),\n                _id: result.insertedId,\n                id: result.insertedId.toString(),\n                companyId: data.companyId,\n            };\n            return { success: true, announcement: createdAnnouncement };\n        }\n\n        return { success: false, message: \"Failed to create announcement.\" };\n    } catch (error) {\n        console.error(\"Create announcement error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function getAnnouncementsByCompany(companyId: string): Promise<Announcement[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const announcementsCollection = await getAnnouncementsCollection();\n        const announcements = await announcementsCollection.find({ companyId: new ObjectId(companyId) }).sort({ date: -1 }).toArray();\n\n        return announcements.map(announcement => ({\n            ...announcement,\n            _id: announcement._id.toString(),\n            id: announcement._id.toString(),\n            companyId: announcement.companyId.toString(),\n            readBy: announcement.readBy || [],\n            comments: announcement.comments || [],\n        }));\n\n    } catch (error) {\n        console.error(\"Error fetching announcements by company:\", error);\n        return [];\n    }\n}\n\nexport async function markAnnouncementAsRead(announcementId: string, agentId: string): Promise<{ success: boolean }> {\n    try {\n        const announcementsCollection = await getAnnouncementsCollection();\n        await announcementsCollection.updateOne(\n            { _id: new ObjectId(announcementId) },\n            { $addToSet: { readBy: agentId } }\n        );\n        return { success: true };\n    } catch (error) {\n        console.error(\"Mark as read error:\", error);\n        return { success: false };\n    }\n}\n\nexport async function addCommentToAnnouncement(announcementId: string, authorId: string, content: string): Promise<{ success: boolean, comment?: Comment }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        const author = await agentsCollection.findOne({ _id: new ObjectId(authorId) });\n        if (!author) return { success: false };\n\n        const newComment: Comment = {\n            id: new ObjectId().toString(),\n            author: {\n                id: author._id.toString(),\n                name: author.name,\n                avatar: author.avatar\n            },\n            content,\n            timestamp: new Date().toISOString(),\n        };\n\n        const announcementsCollection = await getAnnouncementsCollection();\n        await announcementsCollection.updateOne(\n            { _id: new ObjectId(announcementId) },\n            { $push: { comments: newComment } }\n        );\n        \n        return { success: true, comment: newComment };\n\n    } catch (error) {\n        console.error(\"Add comment error:\", error);\n        return { success: false };\n    }\n}\n\n\nexport async function updateAgentProfile(agentId: string, name: string, email: string, phone: string, companyId: string): Promise<{ success: boolean; message?: string; agent?: Agent; }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        \n        const updateResult = await agentsCollection.updateOne(\n            { _id: new ObjectId(agentId) },\n            { $set: { name, email, phone } }\n        );\n\n        if (updateResult.modifiedCount === 0 && updateResult.matchedCount === 0) {\n            return { success: false, message: \"Agent not found.\" };\n        }\n        if (updateResult.modifiedCount === 0 && updateResult.matchedCount > 0) {\n            // No fields were actually changed\n            const updatedAgent = await agentsCollection.findOne({ _id: new ObjectId(agentId) });\n             if (updatedAgent) {\n                const { password, ...agentData } = updatedAgent;\n                const agentWithoutPassword: Agent = {\n                    ...agentData,\n                    _id: updatedAgent._id.toString(),\n                    id: updatedAgent._id.toString(),\n                    companyId: updatedAgent.companyId?.toString(),\n                };\n                 return { success: true, agent: agentWithoutPassword };\n            }\n        }\n        \n        const updatedAgent = await agentsCollection.findOne({ _id: new ObjectId(agentId) });\n\n        if (updatedAgent) {\n            const { password, ...agentData } = updatedAgent;\n            const agentWithoutPassword: Agent = {\n                ...agentData,\n                _id: updatedAgent._id.toString(),\n                id: updatedAgent._id.toString(),\n                companyId: updatedAgent.companyId?.toString(),\n            };\n            await logActivity(companyId, agentWithoutPassword.name, 'Update Profile', `Updated profile details`);\n            return { success: true, agent: agentWithoutPassword };\n        }\n\n        return { success: false, message: \"Failed to retrieve updated agent.\" };\n    } catch (error) {\n        console.error(\"Update agent profile error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function updateAgentPassword(agentId: string, currentPassword_unused: string, newPassword_unused: string, companyId: string): Promise<{ success: boolean; message: string }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        const agent = await agentsCollection.findOne({ _id: new ObjectId(agentId) });\n\n        if (!agent || !agent.password) {\n            return { success: false, message: \"Agent not found.\" };\n        }\n        \n        const isPasswordValid = await verifyPassword(currentPassword_unused, agent.password);\n        if (!isPasswordValid) {\n            return { success: false, message: \"Incorrect current password.\" };\n        }\n\n        const newHashedPassword = await hashPassword(newPassword_unused);\n        await agentsCollection.updateOne(\n            { _id: new ObjectId(agentId) },\n            { $set: { password: newHashedPassword } }\n        );\n        \n        await logActivity(companyId, agent.name, 'Update Password', `Changed password`);\n        return { success: true, message: \"Password updated successfully.\" };\n\n    } catch (error) {\n        console.error(\"Update password error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\n\nexport async function handleLogin(email: string, password_unused: string): Promise<{ success: boolean; message?: string; agent?: Agent }> {\n    try {\n      const agentsCollection = await getAgentsCollection();\n      const agent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n      if (agent && agent.password) {\n        const isPasswordValid = await verifyPassword(password_unused, agent.password);\n        if (isPasswordValid) {\n          const { password, ...agentData } = agent;\n          const agentWithoutPassword: Agent = {\n            ...agentData,\n            _id: agent._id.toString(),\n            id: agent._id.toString(),\n            companyId: agent.companyId?.toString(),\n          };\n          await logActivity(agent.companyId, agent.name, 'Login', `Logged in successfully`);\n          return { success: true, agent: agentWithoutPassword };\n        }\n      }\n      return { success: false, message: \"Invalid email or password.\" };\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return { success: false, message: \"Database connection error.\" };\n    }\n};\n\nexport async function createAgent(name: string, email: string, password_unused: string, role: AgentRole, companyId: string, createdBy: string): Promise<{ success: boolean; message?: string; agent?: Agent; }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n        if (existingAgent) {\n            return { success: false, message: \"An agent with this email already exists.\" };\n        }\n\n        const hashedPassword = await hashPassword(password_unused);\n        const avatar = `https://picsum.photos/seed/${name.replace(/\\s/g, '')}/100/100`;\n\n        const agentToInsert: Omit<Agent, 'id' | '_id'> = {\n            name,\n            email: email.toLowerCase(),\n            password: hashedPassword,\n            role,\n            avatar,\n            phone: '', \n            companyId: new ObjectId(companyId)\n        };\n\n        const result = await agentsCollection.insertOne(agentToInsert as any);\n\n        if (result.insertedId) {\n            const newAgent = await agentsCollection.findOne({ _id: result.insertedId });\n            if (newAgent) {\n                const { password, ...agentData } = newAgent;\n                const agentWithoutPassword: Agent = {\n                  ...agentData,\n                  _id: newAgent._id.toString(),\n                  id: newAgent._id.toString(),\n                  companyId: newAgent.companyId?.toString(),\n                };\n                await logActivity(companyId, createdBy, 'Create Agent', `Created agent: ${name}`);\n                return { success: true, agent: agentWithoutPassword };\n            }\n        }\n        return { success: false, message: \"Failed to create agent.\" };\n    } catch (error) {\n        console.error(\"Create agent error:\", error);\n        return { success: false, message: \"An unexpected error occurred while creating the agent.\" };\n    }\n}\n\nexport async function handleSignUp(name: string, email: string, password_unused: string): Promise<{ success: boolean; message?: string; agent?: Agent; }> {\n    const db = await getDb();\n    const session = db.client.startSession();\n    try {\n        let newAgentResult: Agent | undefined;\n        await session.withTransaction(async () => {\n            const companiesCollection = await getCompaniesCollection();\n            const agentsCollection = await getAgentsCollection();\n            const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() }, { session });\n\n            if (existingAgent) {\n                throw new Error(\"An agent with this email already exists.\");\n            }\n            \n            const companyResult = await companiesCollection.insertOne({\n                name: `${name}'s Company`,\n                createdAt: new Date(),\n            }, { session });\n\n            if (!companyResult.insertedId) {\n                throw new Error(\"Failed to create company.\");\n            }\n            const companyId = companyResult.insertedId;\n            \n            const hashedPassword = await hashPassword(password_unused);\n            const avatar = `https://picsum.photos/seed/${name.replace(/\\s/g, '')}/100/100`;\n            \n            const agentToInsert: Omit<Agent, 'id' | '_id'> = {\n                name,\n                email: email.toLowerCase(),\n                password: hashedPassword,\n                role: 'admin',\n                avatar,\n                phone: '',\n                companyId: companyId,\n            };\n\n            const agentResult = await agentsCollection.insertOne(agentToInsert as any, { session });\n\n             if (!agentResult.insertedId) {\n                throw new Error(\"Failed to create admin agent.\");\n            }\n            \n            await logActivity(companyId, name, 'Sign Up', `Created new company and admin account.`);\n\n            const newAgent = await agentsCollection.findOne({ _id: agentResult.insertedId }, { session });\n            if (newAgent) {\n                 const { password, ...agentData } = newAgent;\n                 newAgentResult = {\n                    ...agentData,\n                    _id: newAgent._id.toString(),\n                    id: newAgent._id.toString(),\n                    companyId: newAgent.companyId?.toString()\n                };\n            }\n        });\n        \n        if (!newAgentResult) {\n            return { success: false, message: \"Failed to retrieve the created agent.\" }\n        }\n\n        return { success: true, agent: newAgentResult };\n    } catch (error: any) {\n        console.error(\"Sign up transaction error:\", error);\n        // Abort transaction on error if it was started\n        if (session.inTransaction()) {\n            await session.abortTransaction();\n        }\n        return { success: false, message: error.message || \"An unexpected error occurred during sign up.\" };\n    } finally {\n        await session.endSession();\n    }\n}\n\n\nexport async function getActivityLogs(companyId: string): Promise<ActivityLog[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const logsCollection = await getActivityLogsCollection();\n        const logs = await logsCollection.find({ companyId: new ObjectId(companyId) }).sort({ timestamp: -1 }).limit(50).toArray();\n\n        return logs.map(log => ({\n            ...log,\n            _id: log._id.toString(),\n            id: log._id.toString(),\n            companyId: log.companyId.toString(),\n            timestamp: log.timestamp.toISOString(),\n        }));\n    } catch (error) {\n        console.error(\"Error fetching activity logs:\", error);\n        return [];\n    }\n}\n"],"names":[],"mappings":";;;;;;IAoIsB,yBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { getDb } from \"@/lib/db\";\nimport { hashPassword, verifyPassword } from \"@/lib/auth\";\nimport type { Agent, AgentRole, Announcement, Company, Comment, ActivityLog } from \"@/types\";\nimport { Collection, Db, ObjectId } from \"mongodb\";\n\nasync function getAgentsCollection(): Promise<Collection<Agent>> {\n    const db: Db = await getDb();\n    return db.collection<Agent>('agents');\n}\n\nasync function getCompaniesCollection(): Promise<Collection<Company>> {\n    const db: Db = await getDb();\n    return db.collection<Company>('companies');\n}\n\nasync function getAnnouncementsCollection(): Promise<Collection<Announcement>> {\n    const db: Db = await getDb();\n    return db.collection<Announcement>('announcements');\n}\n\nasync function getActivityLogsCollection(): Promise<Collection<ActivityLog>> {\n    const db: Db = await getDb();\n    return db.collection<ActivityLog>('activity_logs');\n}\n\nasync function logActivity(companyId: string | ObjectId, agentName: string, action: string, details: string) {\n    try {\n        const logsCollection = await getActivityLogsCollection();\n        await logsCollection.insertOne({\n            companyId: new ObjectId(companyId),\n            agentName,\n            action,\n            details,\n            timestamp: new Date(),\n        });\n    } catch (error) {\n        console.error(\"Failed to log activity:\", error);\n    }\n}\n\nexport async function getAgentsByCompany(companyId: string): Promise<Agent[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const agentsCollection = await getAgentsCollection();\n        const agents = await agentsCollection.find({ companyId: new ObjectId(companyId) }, { projection: { password: 0 } }).toArray();\n\n        return agents.map(agent => ({\n            ...agent,\n            _id: agent._id.toString(),\n            id: agent._id.toString(),\n            companyId: agent.companyId?.toString(),\n        }));\n    } catch (error) {\n        console.error(\"Error fetching agents by company:\", error);\n        return [];\n    }\n}\n\nexport async function createAnnouncement(data: { title: string; content: string; category: string; authorId: string; companyId: string }): Promise<{ success: boolean; message?: string; announcement?: Announcement }> {\n    try {\n        const announcementsCollection = await getAnnouncementsCollection();\n        const agentsCollection = await getAgentsCollection();\n\n        const author = await agentsCollection.findOne({ _id: new ObjectId(data.authorId) });\n        if (!author) {\n            return { success: false, message: \"Author not found.\" };\n        }\n\n        const newAnnouncement: Omit<Announcement, 'id' | '_id'> = {\n            title: data.title,\n            content: data.content,\n            category: data.category as any,\n            author: {\n                id: author._id.toString(),\n                name: author.name,\n                avatar: author.avatar\n            },\n            companyId: new ObjectId(data.companyId),\n            date: new Date().toISOString(),\n            readBy: [],\n            comments: [],\n        };\n\n        const result = await announcementsCollection.insertOne(newAnnouncement as any);\n        await logActivity(data.companyId, author.name, 'Create Announcement', `Published: \"${data.title}\"`);\n\n\n        if (result.insertedId) {\n            const createdAnnouncement: Announcement = {\n                ...(newAnnouncement as Announcement),\n                _id: result.insertedId,\n                id: result.insertedId.toString(),\n                companyId: data.companyId,\n            };\n            return { success: true, announcement: createdAnnouncement };\n        }\n\n        return { success: false, message: \"Failed to create announcement.\" };\n    } catch (error) {\n        console.error(\"Create announcement error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function getAnnouncementsByCompany(companyId: string): Promise<Announcement[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const announcementsCollection = await getAnnouncementsCollection();\n        const announcements = await announcementsCollection.find({ companyId: new ObjectId(companyId) }).sort({ date: -1 }).toArray();\n\n        return announcements.map(announcement => ({\n            ...announcement,\n            _id: announcement._id.toString(),\n            id: announcement._id.toString(),\n            companyId: announcement.companyId.toString(),\n            readBy: announcement.readBy || [],\n            comments: announcement.comments || [],\n        }));\n\n    } catch (error) {\n        console.error(\"Error fetching announcements by company:\", error);\n        return [];\n    }\n}\n\nexport async function markAnnouncementAsRead(announcementId: string, agentId: string): Promise<{ success: boolean }> {\n    try {\n        const announcementsCollection = await getAnnouncementsCollection();\n        await announcementsCollection.updateOne(\n            { _id: new ObjectId(announcementId) },\n            { $addToSet: { readBy: agentId } }\n        );\n        return { success: true };\n    } catch (error) {\n        console.error(\"Mark as read error:\", error);\n        return { success: false };\n    }\n}\n\nexport async function addCommentToAnnouncement(announcementId: string, authorId: string, content: string): Promise<{ success: boolean, comment?: Comment }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        const author = await agentsCollection.findOne({ _id: new ObjectId(authorId) });\n        if (!author) return { success: false };\n\n        const newComment: Comment = {\n            id: new ObjectId().toString(),\n            author: {\n                id: author._id.toString(),\n                name: author.name,\n                avatar: author.avatar\n            },\n            content,\n            timestamp: new Date().toISOString(),\n        };\n\n        const announcementsCollection = await getAnnouncementsCollection();\n        await announcementsCollection.updateOne(\n            { _id: new ObjectId(announcementId) },\n            { $push: { comments: newComment } }\n        );\n        \n        return { success: true, comment: newComment };\n\n    } catch (error) {\n        console.error(\"Add comment error:\", error);\n        return { success: false };\n    }\n}\n\n\nexport async function updateAgentProfile(agentId: string, name: string, email: string, phone: string, companyId: string): Promise<{ success: boolean; message?: string; agent?: Agent; }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        \n        const updateResult = await agentsCollection.updateOne(\n            { _id: new ObjectId(agentId) },\n            { $set: { name, email, phone } }\n        );\n\n        if (updateResult.modifiedCount === 0 && updateResult.matchedCount === 0) {\n            return { success: false, message: \"Agent not found.\" };\n        }\n        if (updateResult.modifiedCount === 0 && updateResult.matchedCount > 0) {\n            // No fields were actually changed\n            const updatedAgent = await agentsCollection.findOne({ _id: new ObjectId(agentId) });\n             if (updatedAgent) {\n                const { password, ...agentData } = updatedAgent;\n                const agentWithoutPassword: Agent = {\n                    ...agentData,\n                    _id: updatedAgent._id.toString(),\n                    id: updatedAgent._id.toString(),\n                    companyId: updatedAgent.companyId?.toString(),\n                };\n                 return { success: true, agent: agentWithoutPassword };\n            }\n        }\n        \n        const updatedAgent = await agentsCollection.findOne({ _id: new ObjectId(agentId) });\n\n        if (updatedAgent) {\n            const { password, ...agentData } = updatedAgent;\n            const agentWithoutPassword: Agent = {\n                ...agentData,\n                _id: updatedAgent._id.toString(),\n                id: updatedAgent._id.toString(),\n                companyId: updatedAgent.companyId?.toString(),\n            };\n            await logActivity(companyId, agentWithoutPassword.name, 'Update Profile', `Updated profile details`);\n            return { success: true, agent: agentWithoutPassword };\n        }\n\n        return { success: false, message: \"Failed to retrieve updated agent.\" };\n    } catch (error) {\n        console.error(\"Update agent profile error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function updateAgentPassword(agentId: string, currentPassword_unused: string, newPassword_unused: string, companyId: string): Promise<{ success: boolean; message: string }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        const agent = await agentsCollection.findOne({ _id: new ObjectId(agentId) });\n\n        if (!agent || !agent.password) {\n            return { success: false, message: \"Agent not found.\" };\n        }\n        \n        const isPasswordValid = await verifyPassword(currentPassword_unused, agent.password);\n        if (!isPasswordValid) {\n            return { success: false, message: \"Incorrect current password.\" };\n        }\n\n        const newHashedPassword = await hashPassword(newPassword_unused);\n        await agentsCollection.updateOne(\n            { _id: new ObjectId(agentId) },\n            { $set: { password: newHashedPassword } }\n        );\n        \n        await logActivity(companyId, agent.name, 'Update Password', `Changed password`);\n        return { success: true, message: \"Password updated successfully.\" };\n\n    } catch (error) {\n        console.error(\"Update password error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\n\nexport async function handleLogin(email: string, password_unused: string): Promise<{ success: boolean; message?: string; agent?: Agent }> {\n    try {\n      const agentsCollection = await getAgentsCollection();\n      const agent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n      if (agent && agent.password) {\n        const isPasswordValid = await verifyPassword(password_unused, agent.password);\n        if (isPasswordValid) {\n          const { password, ...agentData } = agent;\n          const agentWithoutPassword: Agent = {\n            ...agentData,\n            _id: agent._id.toString(),\n            id: agent._id.toString(),\n            companyId: agent.companyId?.toString(),\n          };\n          await logActivity(agent.companyId, agent.name, 'Login', `Logged in successfully`);\n          return { success: true, agent: agentWithoutPassword };\n        }\n      }\n      return { success: false, message: \"Invalid email or password.\" };\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return { success: false, message: \"Database connection error.\" };\n    }\n};\n\nexport async function createAgent(name: string, email: string, password_unused: string, role: AgentRole, companyId: string, createdBy: string): Promise<{ success: boolean; message?: string; agent?: Agent; }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n        if (existingAgent) {\n            return { success: false, message: \"An agent with this email already exists.\" };\n        }\n\n        const hashedPassword = await hashPassword(password_unused);\n        const avatar = `https://picsum.photos/seed/${name.replace(/\\s/g, '')}/100/100`;\n\n        const agentToInsert: Omit<Agent, 'id' | '_id'> = {\n            name,\n            email: email.toLowerCase(),\n            password: hashedPassword,\n            role,\n            avatar,\n            phone: '', \n            companyId: new ObjectId(companyId)\n        };\n\n        const result = await agentsCollection.insertOne(agentToInsert as any);\n\n        if (result.insertedId) {\n            const newAgent = await agentsCollection.findOne({ _id: result.insertedId });\n            if (newAgent) {\n                const { password, ...agentData } = newAgent;\n                const agentWithoutPassword: Agent = {\n                  ...agentData,\n                  _id: newAgent._id.toString(),\n                  id: newAgent._id.toString(),\n                  companyId: newAgent.companyId?.toString(),\n                };\n                await logActivity(companyId, createdBy, 'Create Agent', `Created agent: ${name}`);\n                return { success: true, agent: agentWithoutPassword };\n            }\n        }\n        return { success: false, message: \"Failed to create agent.\" };\n    } catch (error) {\n        console.error(\"Create agent error:\", error);\n        return { success: false, message: \"An unexpected error occurred while creating the agent.\" };\n    }\n}\n\nexport async function handleSignUp(name: string, email: string, password_unused: string): Promise<{ success: boolean; message?: string; agent?: Agent; }> {\n    const db = await getDb();\n    const session = db.client.startSession();\n    try {\n        let newAgentResult: Agent | undefined;\n        await session.withTransaction(async () => {\n            const companiesCollection = await getCompaniesCollection();\n            const agentsCollection = await getAgentsCollection();\n            const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() }, { session });\n\n            if (existingAgent) {\n                throw new Error(\"An agent with this email already exists.\");\n            }\n            \n            const companyResult = await companiesCollection.insertOne({\n                name: `${name}'s Company`,\n                createdAt: new Date(),\n            }, { session });\n\n            if (!companyResult.insertedId) {\n                throw new Error(\"Failed to create company.\");\n            }\n            const companyId = companyResult.insertedId;\n            \n            const hashedPassword = await hashPassword(password_unused);\n            const avatar = `https://picsum.photos/seed/${name.replace(/\\s/g, '')}/100/100`;\n            \n            const agentToInsert: Omit<Agent, 'id' | '_id'> = {\n                name,\n                email: email.toLowerCase(),\n                password: hashedPassword,\n                role: 'admin',\n                avatar,\n                phone: '',\n                companyId: companyId,\n            };\n\n            const agentResult = await agentsCollection.insertOne(agentToInsert as any, { session });\n\n             if (!agentResult.insertedId) {\n                throw new Error(\"Failed to create admin agent.\");\n            }\n            \n            await logActivity(companyId, name, 'Sign Up', `Created new company and admin account.`);\n\n            const newAgent = await agentsCollection.findOne({ _id: agentResult.insertedId }, { session });\n            if (newAgent) {\n                 const { password, ...agentData } = newAgent;\n                 newAgentResult = {\n                    ...agentData,\n                    _id: newAgent._id.toString(),\n                    id: newAgent._id.toString(),\n                    companyId: newAgent.companyId?.toString()\n                };\n            }\n        });\n        \n        if (!newAgentResult) {\n            return { success: false, message: \"Failed to retrieve the created agent.\" }\n        }\n\n        return { success: true, agent: newAgentResult };\n    } catch (error: any) {\n        console.error(\"Sign up transaction error:\", error);\n        // Abort transaction on error if it was started\n        if (session.inTransaction()) {\n            await session.abortTransaction();\n        }\n        return { success: false, message: error.message || \"An unexpected error occurred during sign up.\" };\n    } finally {\n        await session.endSession();\n    }\n}\n\n\nexport async function getActivityLogs(companyId: string): Promise<ActivityLog[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const logsCollection = await getActivityLogsCollection();\n        const logs = await logsCollection.find({ companyId: new ObjectId(companyId) }).sort({ timestamp: -1 }).limit(50).toArray();\n\n        return logs.map(log => ({\n            ...log,\n            _id: log._id.toString(),\n            id: log._id.toString(),\n            companyId: log.companyId.toString(),\n            timestamp: log.timestamp.toISOString(),\n        }));\n    } catch (error) {\n        console.error(\"Error fetching activity logs:\", error);\n        return [];\n    }\n}\n"],"names":[],"mappings":";;;;;;IAkJsB,2BAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { getDb } from \"@/lib/db\";\nimport { hashPassword, verifyPassword } from \"@/lib/auth\";\nimport type { Agent, AgentRole, Announcement, Company, Comment, ActivityLog } from \"@/types\";\nimport { Collection, Db, ObjectId } from \"mongodb\";\n\nasync function getAgentsCollection(): Promise<Collection<Agent>> {\n    const db: Db = await getDb();\n    return db.collection<Agent>('agents');\n}\n\nasync function getCompaniesCollection(): Promise<Collection<Company>> {\n    const db: Db = await getDb();\n    return db.collection<Company>('companies');\n}\n\nasync function getAnnouncementsCollection(): Promise<Collection<Announcement>> {\n    const db: Db = await getDb();\n    return db.collection<Announcement>('announcements');\n}\n\nasync function getActivityLogsCollection(): Promise<Collection<ActivityLog>> {\n    const db: Db = await getDb();\n    return db.collection<ActivityLog>('activity_logs');\n}\n\nasync function logActivity(companyId: string | ObjectId, agentName: string, action: string, details: string) {\n    try {\n        const logsCollection = await getActivityLogsCollection();\n        await logsCollection.insertOne({\n            companyId: new ObjectId(companyId),\n            agentName,\n            action,\n            details,\n            timestamp: new Date(),\n        });\n    } catch (error) {\n        console.error(\"Failed to log activity:\", error);\n    }\n}\n\nexport async function getAgentsByCompany(companyId: string): Promise<Agent[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const agentsCollection = await getAgentsCollection();\n        const agents = await agentsCollection.find({ companyId: new ObjectId(companyId) }, { projection: { password: 0 } }).toArray();\n\n        return agents.map(agent => ({\n            ...agent,\n            _id: agent._id.toString(),\n            id: agent._id.toString(),\n            companyId: agent.companyId?.toString(),\n        }));\n    } catch (error) {\n        console.error(\"Error fetching agents by company:\", error);\n        return [];\n    }\n}\n\nexport async function createAnnouncement(data: { title: string; content: string; category: string; authorId: string; companyId: string }): Promise<{ success: boolean; message?: string; announcement?: Announcement }> {\n    try {\n        const announcementsCollection = await getAnnouncementsCollection();\n        const agentsCollection = await getAgentsCollection();\n\n        const author = await agentsCollection.findOne({ _id: new ObjectId(data.authorId) });\n        if (!author) {\n            return { success: false, message: \"Author not found.\" };\n        }\n\n        const newAnnouncement: Omit<Announcement, 'id' | '_id'> = {\n            title: data.title,\n            content: data.content,\n            category: data.category as any,\n            author: {\n                id: author._id.toString(),\n                name: author.name,\n                avatar: author.avatar\n            },\n            companyId: new ObjectId(data.companyId),\n            date: new Date().toISOString(),\n            readBy: [],\n            comments: [],\n        };\n\n        const result = await announcementsCollection.insertOne(newAnnouncement as any);\n        await logActivity(data.companyId, author.name, 'Create Announcement', `Published: \"${data.title}\"`);\n\n\n        if (result.insertedId) {\n            const createdAnnouncement: Announcement = {\n                ...(newAnnouncement as Announcement),\n                _id: result.insertedId,\n                id: result.insertedId.toString(),\n                companyId: data.companyId,\n            };\n            return { success: true, announcement: createdAnnouncement };\n        }\n\n        return { success: false, message: \"Failed to create announcement.\" };\n    } catch (error) {\n        console.error(\"Create announcement error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function getAnnouncementsByCompany(companyId: string): Promise<Announcement[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const announcementsCollection = await getAnnouncementsCollection();\n        const announcements = await announcementsCollection.find({ companyId: new ObjectId(companyId) }).sort({ date: -1 }).toArray();\n\n        return announcements.map(announcement => ({\n            ...announcement,\n            _id: announcement._id.toString(),\n            id: announcement._id.toString(),\n            companyId: announcement.companyId.toString(),\n            readBy: announcement.readBy || [],\n            comments: announcement.comments || [],\n        }));\n\n    } catch (error) {\n        console.error(\"Error fetching announcements by company:\", error);\n        return [];\n    }\n}\n\nexport async function markAnnouncementAsRead(announcementId: string, agentId: string): Promise<{ success: boolean }> {\n    try {\n        const announcementsCollection = await getAnnouncementsCollection();\n        await announcementsCollection.updateOne(\n            { _id: new ObjectId(announcementId) },\n            { $addToSet: { readBy: agentId } }\n        );\n        return { success: true };\n    } catch (error) {\n        console.error(\"Mark as read error:\", error);\n        return { success: false };\n    }\n}\n\nexport async function addCommentToAnnouncement(announcementId: string, authorId: string, content: string): Promise<{ success: boolean, comment?: Comment }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        const author = await agentsCollection.findOne({ _id: new ObjectId(authorId) });\n        if (!author) return { success: false };\n\n        const newComment: Comment = {\n            id: new ObjectId().toString(),\n            author: {\n                id: author._id.toString(),\n                name: author.name,\n                avatar: author.avatar\n            },\n            content,\n            timestamp: new Date().toISOString(),\n        };\n\n        const announcementsCollection = await getAnnouncementsCollection();\n        await announcementsCollection.updateOne(\n            { _id: new ObjectId(announcementId) },\n            { $push: { comments: newComment } }\n        );\n        \n        return { success: true, comment: newComment };\n\n    } catch (error) {\n        console.error(\"Add comment error:\", error);\n        return { success: false };\n    }\n}\n\n\nexport async function updateAgentProfile(agentId: string, name: string, email: string, phone: string, companyId: string): Promise<{ success: boolean; message?: string; agent?: Agent; }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        \n        const updateResult = await agentsCollection.updateOne(\n            { _id: new ObjectId(agentId) },\n            { $set: { name, email, phone } }\n        );\n\n        if (updateResult.modifiedCount === 0 && updateResult.matchedCount === 0) {\n            return { success: false, message: \"Agent not found.\" };\n        }\n        if (updateResult.modifiedCount === 0 && updateResult.matchedCount > 0) {\n            // No fields were actually changed\n            const updatedAgent = await agentsCollection.findOne({ _id: new ObjectId(agentId) });\n             if (updatedAgent) {\n                const { password, ...agentData } = updatedAgent;\n                const agentWithoutPassword: Agent = {\n                    ...agentData,\n                    _id: updatedAgent._id.toString(),\n                    id: updatedAgent._id.toString(),\n                    companyId: updatedAgent.companyId?.toString(),\n                };\n                 return { success: true, agent: agentWithoutPassword };\n            }\n        }\n        \n        const updatedAgent = await agentsCollection.findOne({ _id: new ObjectId(agentId) });\n\n        if (updatedAgent) {\n            const { password, ...agentData } = updatedAgent;\n            const agentWithoutPassword: Agent = {\n                ...agentData,\n                _id: updatedAgent._id.toString(),\n                id: updatedAgent._id.toString(),\n                companyId: updatedAgent.companyId?.toString(),\n            };\n            await logActivity(companyId, agentWithoutPassword.name, 'Update Profile', `Updated profile details`);\n            return { success: true, agent: agentWithoutPassword };\n        }\n\n        return { success: false, message: \"Failed to retrieve updated agent.\" };\n    } catch (error) {\n        console.error(\"Update agent profile error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function updateAgentPassword(agentId: string, currentPassword_unused: string, newPassword_unused: string, companyId: string): Promise<{ success: boolean; message: string }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        const agent = await agentsCollection.findOne({ _id: new ObjectId(agentId) });\n\n        if (!agent || !agent.password) {\n            return { success: false, message: \"Agent not found.\" };\n        }\n        \n        const isPasswordValid = await verifyPassword(currentPassword_unused, agent.password);\n        if (!isPasswordValid) {\n            return { success: false, message: \"Incorrect current password.\" };\n        }\n\n        const newHashedPassword = await hashPassword(newPassword_unused);\n        await agentsCollection.updateOne(\n            { _id: new ObjectId(agentId) },\n            { $set: { password: newHashedPassword } }\n        );\n        \n        await logActivity(companyId, agent.name, 'Update Password', `Changed password`);\n        return { success: true, message: \"Password updated successfully.\" };\n\n    } catch (error) {\n        console.error(\"Update password error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\n\nexport async function handleLogin(email: string, password_unused: string): Promise<{ success: boolean; message?: string; agent?: Agent }> {\n    try {\n      const agentsCollection = await getAgentsCollection();\n      const agent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n      if (agent && agent.password) {\n        const isPasswordValid = await verifyPassword(password_unused, agent.password);\n        if (isPasswordValid) {\n          const { password, ...agentData } = agent;\n          const agentWithoutPassword: Agent = {\n            ...agentData,\n            _id: agent._id.toString(),\n            id: agent._id.toString(),\n            companyId: agent.companyId?.toString(),\n          };\n          await logActivity(agent.companyId, agent.name, 'Login', `Logged in successfully`);\n          return { success: true, agent: agentWithoutPassword };\n        }\n      }\n      return { success: false, message: \"Invalid email or password.\" };\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return { success: false, message: \"Database connection error.\" };\n    }\n};\n\nexport async function createAgent(name: string, email: string, password_unused: string, role: AgentRole, companyId: string, createdBy: string): Promise<{ success: boolean; message?: string; agent?: Agent; }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n        if (existingAgent) {\n            return { success: false, message: \"An agent with this email already exists.\" };\n        }\n\n        const hashedPassword = await hashPassword(password_unused);\n        const avatar = `https://picsum.photos/seed/${name.replace(/\\s/g, '')}/100/100`;\n\n        const agentToInsert: Omit<Agent, 'id' | '_id'> = {\n            name,\n            email: email.toLowerCase(),\n            password: hashedPassword,\n            role,\n            avatar,\n            phone: '', \n            companyId: new ObjectId(companyId)\n        };\n\n        const result = await agentsCollection.insertOne(agentToInsert as any);\n\n        if (result.insertedId) {\n            const newAgent = await agentsCollection.findOne({ _id: result.insertedId });\n            if (newAgent) {\n                const { password, ...agentData } = newAgent;\n                const agentWithoutPassword: Agent = {\n                  ...agentData,\n                  _id: newAgent._id.toString(),\n                  id: newAgent._id.toString(),\n                  companyId: newAgent.companyId?.toString(),\n                };\n                await logActivity(companyId, createdBy, 'Create Agent', `Created agent: ${name}`);\n                return { success: true, agent: agentWithoutPassword };\n            }\n        }\n        return { success: false, message: \"Failed to create agent.\" };\n    } catch (error) {\n        console.error(\"Create agent error:\", error);\n        return { success: false, message: \"An unexpected error occurred while creating the agent.\" };\n    }\n}\n\nexport async function handleSignUp(name: string, email: string, password_unused: string): Promise<{ success: boolean; message?: string; agent?: Agent; }> {\n    const db = await getDb();\n    const session = db.client.startSession();\n    try {\n        let newAgentResult: Agent | undefined;\n        await session.withTransaction(async () => {\n            const companiesCollection = await getCompaniesCollection();\n            const agentsCollection = await getAgentsCollection();\n            const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() }, { session });\n\n            if (existingAgent) {\n                throw new Error(\"An agent with this email already exists.\");\n            }\n            \n            const companyResult = await companiesCollection.insertOne({\n                name: `${name}'s Company`,\n                createdAt: new Date(),\n            }, { session });\n\n            if (!companyResult.insertedId) {\n                throw new Error(\"Failed to create company.\");\n            }\n            const companyId = companyResult.insertedId;\n            \n            const hashedPassword = await hashPassword(password_unused);\n            const avatar = `https://picsum.photos/seed/${name.replace(/\\s/g, '')}/100/100`;\n            \n            const agentToInsert: Omit<Agent, 'id' | '_id'> = {\n                name,\n                email: email.toLowerCase(),\n                password: hashedPassword,\n                role: 'admin',\n                avatar,\n                phone: '',\n                companyId: companyId,\n            };\n\n            const agentResult = await agentsCollection.insertOne(agentToInsert as any, { session });\n\n             if (!agentResult.insertedId) {\n                throw new Error(\"Failed to create admin agent.\");\n            }\n            \n            await logActivity(companyId, name, 'Sign Up', `Created new company and admin account.`);\n\n            const newAgent = await agentsCollection.findOne({ _id: agentResult.insertedId }, { session });\n            if (newAgent) {\n                 const { password, ...agentData } = newAgent;\n                 newAgentResult = {\n                    ...agentData,\n                    _id: newAgent._id.toString(),\n                    id: newAgent._id.toString(),\n                    companyId: newAgent.companyId?.toString()\n                };\n            }\n        });\n        \n        if (!newAgentResult) {\n            return { success: false, message: \"Failed to retrieve the created agent.\" }\n        }\n\n        return { success: true, agent: newAgentResult };\n    } catch (error: any) {\n        console.error(\"Sign up transaction error:\", error);\n        // Abort transaction on error if it was started\n        if (session.inTransaction()) {\n            await session.abortTransaction();\n        }\n        return { success: false, message: error.message || \"An unexpected error occurred during sign up.\" };\n    } finally {\n        await session.endSession();\n    }\n}\n\n\nexport async function getActivityLogs(companyId: string): Promise<ActivityLog[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const logsCollection = await getActivityLogsCollection();\n        const logs = await logsCollection.find({ companyId: new ObjectId(companyId) }).sort({ timestamp: -1 }).limit(50).toArray();\n\n        return logs.map(log => ({\n            ...log,\n            _id: log._id.toString(),\n            id: log._id.toString(),\n            companyId: log.companyId.toString(),\n            timestamp: log.timestamp.toISOString(),\n        }));\n    } catch (error) {\n        console.error(\"Error fetching activity logs:\", error);\n        return [];\n    }\n}\n"],"names":[],"mappings":";;;;;;IAgQsB,cAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { getDb } from \"@/lib/db\";\nimport { hashPassword, verifyPassword } from \"@/lib/auth\";\nimport type { Agent, AgentRole, Announcement, Company, Comment, ActivityLog } from \"@/types\";\nimport { Collection, Db, ObjectId } from \"mongodb\";\n\nasync function getAgentsCollection(): Promise<Collection<Agent>> {\n    const db: Db = await getDb();\n    return db.collection<Agent>('agents');\n}\n\nasync function getCompaniesCollection(): Promise<Collection<Company>> {\n    const db: Db = await getDb();\n    return db.collection<Company>('companies');\n}\n\nasync function getAnnouncementsCollection(): Promise<Collection<Announcement>> {\n    const db: Db = await getDb();\n    return db.collection<Announcement>('announcements');\n}\n\nasync function getActivityLogsCollection(): Promise<Collection<ActivityLog>> {\n    const db: Db = await getDb();\n    return db.collection<ActivityLog>('activity_logs');\n}\n\nasync function logActivity(companyId: string | ObjectId, agentName: string, action: string, details: string) {\n    try {\n        const logsCollection = await getActivityLogsCollection();\n        await logsCollection.insertOne({\n            companyId: new ObjectId(companyId),\n            agentName,\n            action,\n            details,\n            timestamp: new Date(),\n        });\n    } catch (error) {\n        console.error(\"Failed to log activity:\", error);\n    }\n}\n\nexport async function getAgentsByCompany(companyId: string): Promise<Agent[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const agentsCollection = await getAgentsCollection();\n        const agents = await agentsCollection.find({ companyId: new ObjectId(companyId) }, { projection: { password: 0 } }).toArray();\n\n        return agents.map(agent => ({\n            ...agent,\n            _id: agent._id.toString(),\n            id: agent._id.toString(),\n            companyId: agent.companyId?.toString(),\n        }));\n    } catch (error) {\n        console.error(\"Error fetching agents by company:\", error);\n        return [];\n    }\n}\n\nexport async function createAnnouncement(data: { title: string; content: string; category: string; authorId: string; companyId: string }): Promise<{ success: boolean; message?: string; announcement?: Announcement }> {\n    try {\n        const announcementsCollection = await getAnnouncementsCollection();\n        const agentsCollection = await getAgentsCollection();\n\n        const author = await agentsCollection.findOne({ _id: new ObjectId(data.authorId) });\n        if (!author) {\n            return { success: false, message: \"Author not found.\" };\n        }\n\n        const newAnnouncement: Omit<Announcement, 'id' | '_id'> = {\n            title: data.title,\n            content: data.content,\n            category: data.category as any,\n            author: {\n                id: author._id.toString(),\n                name: author.name,\n                avatar: author.avatar\n            },\n            companyId: new ObjectId(data.companyId),\n            date: new Date().toISOString(),\n            readBy: [],\n            comments: [],\n        };\n\n        const result = await announcementsCollection.insertOne(newAnnouncement as any);\n        await logActivity(data.companyId, author.name, 'Create Announcement', `Published: \"${data.title}\"`);\n\n\n        if (result.insertedId) {\n            const createdAnnouncement: Announcement = {\n                ...(newAnnouncement as Announcement),\n                _id: result.insertedId,\n                id: result.insertedId.toString(),\n                companyId: data.companyId,\n            };\n            return { success: true, announcement: createdAnnouncement };\n        }\n\n        return { success: false, message: \"Failed to create announcement.\" };\n    } catch (error) {\n        console.error(\"Create announcement error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function getAnnouncementsByCompany(companyId: string): Promise<Announcement[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const announcementsCollection = await getAnnouncementsCollection();\n        const announcements = await announcementsCollection.find({ companyId: new ObjectId(companyId) }).sort({ date: -1 }).toArray();\n\n        return announcements.map(announcement => ({\n            ...announcement,\n            _id: announcement._id.toString(),\n            id: announcement._id.toString(),\n            companyId: announcement.companyId.toString(),\n            readBy: announcement.readBy || [],\n            comments: announcement.comments || [],\n        }));\n\n    } catch (error) {\n        console.error(\"Error fetching announcements by company:\", error);\n        return [];\n    }\n}\n\nexport async function markAnnouncementAsRead(announcementId: string, agentId: string): Promise<{ success: boolean }> {\n    try {\n        const announcementsCollection = await getAnnouncementsCollection();\n        await announcementsCollection.updateOne(\n            { _id: new ObjectId(announcementId) },\n            { $addToSet: { readBy: agentId } }\n        );\n        return { success: true };\n    } catch (error) {\n        console.error(\"Mark as read error:\", error);\n        return { success: false };\n    }\n}\n\nexport async function addCommentToAnnouncement(announcementId: string, authorId: string, content: string): Promise<{ success: boolean, comment?: Comment }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        const author = await agentsCollection.findOne({ _id: new ObjectId(authorId) });\n        if (!author) return { success: false };\n\n        const newComment: Comment = {\n            id: new ObjectId().toString(),\n            author: {\n                id: author._id.toString(),\n                name: author.name,\n                avatar: author.avatar\n            },\n            content,\n            timestamp: new Date().toISOString(),\n        };\n\n        const announcementsCollection = await getAnnouncementsCollection();\n        await announcementsCollection.updateOne(\n            { _id: new ObjectId(announcementId) },\n            { $push: { comments: newComment } }\n        );\n        \n        return { success: true, comment: newComment };\n\n    } catch (error) {\n        console.error(\"Add comment error:\", error);\n        return { success: false };\n    }\n}\n\n\nexport async function updateAgentProfile(agentId: string, name: string, email: string, phone: string, companyId: string): Promise<{ success: boolean; message?: string; agent?: Agent; }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        \n        const updateResult = await agentsCollection.updateOne(\n            { _id: new ObjectId(agentId) },\n            { $set: { name, email, phone } }\n        );\n\n        if (updateResult.modifiedCount === 0 && updateResult.matchedCount === 0) {\n            return { success: false, message: \"Agent not found.\" };\n        }\n        if (updateResult.modifiedCount === 0 && updateResult.matchedCount > 0) {\n            // No fields were actually changed\n            const updatedAgent = await agentsCollection.findOne({ _id: new ObjectId(agentId) });\n             if (updatedAgent) {\n                const { password, ...agentData } = updatedAgent;\n                const agentWithoutPassword: Agent = {\n                    ...agentData,\n                    _id: updatedAgent._id.toString(),\n                    id: updatedAgent._id.toString(),\n                    companyId: updatedAgent.companyId?.toString(),\n                };\n                 return { success: true, agent: agentWithoutPassword };\n            }\n        }\n        \n        const updatedAgent = await agentsCollection.findOne({ _id: new ObjectId(agentId) });\n\n        if (updatedAgent) {\n            const { password, ...agentData } = updatedAgent;\n            const agentWithoutPassword: Agent = {\n                ...agentData,\n                _id: updatedAgent._id.toString(),\n                id: updatedAgent._id.toString(),\n                companyId: updatedAgent.companyId?.toString(),\n            };\n            await logActivity(companyId, agentWithoutPassword.name, 'Update Profile', `Updated profile details`);\n            return { success: true, agent: agentWithoutPassword };\n        }\n\n        return { success: false, message: \"Failed to retrieve updated agent.\" };\n    } catch (error) {\n        console.error(\"Update agent profile error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function updateAgentPassword(agentId: string, currentPassword_unused: string, newPassword_unused: string, companyId: string): Promise<{ success: boolean; message: string }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        const agent = await agentsCollection.findOne({ _id: new ObjectId(agentId) });\n\n        if (!agent || !agent.password) {\n            return { success: false, message: \"Agent not found.\" };\n        }\n        \n        const isPasswordValid = await verifyPassword(currentPassword_unused, agent.password);\n        if (!isPasswordValid) {\n            return { success: false, message: \"Incorrect current password.\" };\n        }\n\n        const newHashedPassword = await hashPassword(newPassword_unused);\n        await agentsCollection.updateOne(\n            { _id: new ObjectId(agentId) },\n            { $set: { password: newHashedPassword } }\n        );\n        \n        await logActivity(companyId, agent.name, 'Update Password', `Changed password`);\n        return { success: true, message: \"Password updated successfully.\" };\n\n    } catch (error) {\n        console.error(\"Update password error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\n\nexport async function handleLogin(email: string, password_unused: string): Promise<{ success: boolean; message?: string; agent?: Agent }> {\n    try {\n      const agentsCollection = await getAgentsCollection();\n      const agent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n      if (agent && agent.password) {\n        const isPasswordValid = await verifyPassword(password_unused, agent.password);\n        if (isPasswordValid) {\n          const { password, ...agentData } = agent;\n          const agentWithoutPassword: Agent = {\n            ...agentData,\n            _id: agent._id.toString(),\n            id: agent._id.toString(),\n            companyId: agent.companyId?.toString(),\n          };\n          await logActivity(agent.companyId, agent.name, 'Login', `Logged in successfully`);\n          return { success: true, agent: agentWithoutPassword };\n        }\n      }\n      return { success: false, message: \"Invalid email or password.\" };\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return { success: false, message: \"Database connection error.\" };\n    }\n};\n\nexport async function createAgent(name: string, email: string, password_unused: string, role: AgentRole, companyId: string, createdBy: string): Promise<{ success: boolean; message?: string; agent?: Agent; }> {\n    try {\n        const agentsCollection = await getAgentsCollection();\n        const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n        if (existingAgent) {\n            return { success: false, message: \"An agent with this email already exists.\" };\n        }\n\n        const hashedPassword = await hashPassword(password_unused);\n        const avatar = `https://picsum.photos/seed/${name.replace(/\\s/g, '')}/100/100`;\n\n        const agentToInsert: Omit<Agent, 'id' | '_id'> = {\n            name,\n            email: email.toLowerCase(),\n            password: hashedPassword,\n            role,\n            avatar,\n            phone: '', \n            companyId: new ObjectId(companyId)\n        };\n\n        const result = await agentsCollection.insertOne(agentToInsert as any);\n\n        if (result.insertedId) {\n            const newAgent = await agentsCollection.findOne({ _id: result.insertedId });\n            if (newAgent) {\n                const { password, ...agentData } = newAgent;\n                const agentWithoutPassword: Agent = {\n                  ...agentData,\n                  _id: newAgent._id.toString(),\n                  id: newAgent._id.toString(),\n                  companyId: newAgent.companyId?.toString(),\n                };\n                await logActivity(companyId, createdBy, 'Create Agent', `Created agent: ${name}`);\n                return { success: true, agent: agentWithoutPassword };\n            }\n        }\n        return { success: false, message: \"Failed to create agent.\" };\n    } catch (error) {\n        console.error(\"Create agent error:\", error);\n        return { success: false, message: \"An unexpected error occurred while creating the agent.\" };\n    }\n}\n\nexport async function handleSignUp(name: string, email: string, password_unused: string): Promise<{ success: boolean; message?: string; agent?: Agent; }> {\n    const db = await getDb();\n    const session = db.client.startSession();\n    try {\n        let newAgentResult: Agent | undefined;\n        await session.withTransaction(async () => {\n            const companiesCollection = await getCompaniesCollection();\n            const agentsCollection = await getAgentsCollection();\n            const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() }, { session });\n\n            if (existingAgent) {\n                throw new Error(\"An agent with this email already exists.\");\n            }\n            \n            const companyResult = await companiesCollection.insertOne({\n                name: `${name}'s Company`,\n                createdAt: new Date(),\n            }, { session });\n\n            if (!companyResult.insertedId) {\n                throw new Error(\"Failed to create company.\");\n            }\n            const companyId = companyResult.insertedId;\n            \n            const hashedPassword = await hashPassword(password_unused);\n            const avatar = `https://picsum.photos/seed/${name.replace(/\\s/g, '')}/100/100`;\n            \n            const agentToInsert: Omit<Agent, 'id' | '_id'> = {\n                name,\n                email: email.toLowerCase(),\n                password: hashedPassword,\n                role: 'admin',\n                avatar,\n                phone: '',\n                companyId: companyId,\n            };\n\n            const agentResult = await agentsCollection.insertOne(agentToInsert as any, { session });\n\n             if (!agentResult.insertedId) {\n                throw new Error(\"Failed to create admin agent.\");\n            }\n            \n            await logActivity(companyId, name, 'Sign Up', `Created new company and admin account.`);\n\n            const newAgent = await agentsCollection.findOne({ _id: agentResult.insertedId }, { session });\n            if (newAgent) {\n                 const { password, ...agentData } = newAgent;\n                 newAgentResult = {\n                    ...agentData,\n                    _id: newAgent._id.toString(),\n                    id: newAgent._id.toString(),\n                    companyId: newAgent.companyId?.toString()\n                };\n            }\n        });\n        \n        if (!newAgentResult) {\n            return { success: false, message: \"Failed to retrieve the created agent.\" }\n        }\n\n        return { success: true, agent: newAgentResult };\n    } catch (error: any) {\n        console.error(\"Sign up transaction error:\", error);\n        // Abort transaction on error if it was started\n        if (session.inTransaction()) {\n            await session.abortTransaction();\n        }\n        return { success: false, message: error.message || \"An unexpected error occurred during sign up.\" };\n    } finally {\n        await session.endSession();\n    }\n}\n\n\nexport async function getActivityLogs(companyId: string): Promise<ActivityLog[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const logsCollection = await getActivityLogsCollection();\n        const logs = await logsCollection.find({ companyId: new ObjectId(companyId) }).sort({ timestamp: -1 }).limit(50).toArray();\n\n        return logs.map(log => ({\n            ...log,\n            _id: log._id.toString(),\n            id: log._id.toString(),\n            companyId: log.companyId.toString(),\n            timestamp: log.timestamp.toISOString(),\n        }));\n    } catch (error) {\n        console.error(\"Error fetching activity logs:\", error);\n        return [];\n    }\n}\n"],"names":[],"mappings":";;;;;;IAuUsB,eAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["\n\"use client\";\n\nimport * as React from \"react\";\nimport { ChatLayout } from \"@/components/dashboard/chat-layout\";\nimport { VerticalNav } from \"@/components/dashboard/vertical-nav\";\nimport { ContactsView } from \"@/components/dashboard/contacts-view\";\nimport { AgentsView } from \"@/components/dashboard/agents-view\";\nimport { DashboardView } from \"@/components/dashboard/dashboard-view\";\nimport type { Agent, UserProfile } from \"@/types\";\nimport { AnnouncementsView } from \"@/components/dashboard/announcements-view\";\nimport { SettingsDialog } from \"@/components/dashboard/settings-dialog\";\nimport { CampaignsView } from \"@/components/dashboard/campaigns-view\";\nimport { MyPerformanceView } from \"@/components/dashboard/my-performance-view\";\nimport { AuthForm } from \"@/components/dashboard/auth-form\";\nimport { handleLogin, handleSignUp } from \"@/app/actions\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n\nexport type View = \"Chat\" | \"Contacts\" | \"Agents\" | \"Dashboard\" | \"Announcements\" | \"History\" | \"Payments\" | \"Settings\" | \"System Settings\" | \"Campaigns\" | \"My Performance\";\n\nexport default function Home({ params, searchParams }: { params: {}; searchParams: {} }) {\n  React.use(params);\n  React.use(searchParams);\n  \n  const [activeView, setActiveView] = React.useState<View>(\"Chat\");\n  const [isNavOpen, setIsNavOpen] = React.useState(false);\n  const [currentUser, setCurrentUser] = React.useState<UserProfile | null>(null);\n  const [isSettingsOpen, setIsSettingsOpen] = React.useState(false);\n  const { toast } = useToast();\n\n  const onLogin = async (email: string, password_unused: string) => {\n    const result = await handleLogin(email, password_unused);\n    if (result.success && result.agent) {\n      const agent = result.agent as Agent;\n       setCurrentUser({\n        id: agent.id,\n        name: agent.name,\n        avatar: agent.avatar,\n        role: agent.role,\n        email: agent.email,\n        phone: agent.phone,\n        companyId: agent.companyId,\n      } as UserProfile);\n\n      if (agent.role === 'admin') {\n        setActiveView('Dashboard');\n      } else {\n        setActiveView('Chat');\n      }\n    }\n    return { success: result.success, message: result.message };\n  }\n  \n  const onSignUp = async (name: string, email: string, password_unused: string) => {\n    const result = await handleSignUp(name, email, password_unused);\n    if (result.success && result.agent) {\n        toast({\n            title: \"Account Created!\",\n            description: \"You can now sign in with your new credentials.\",\n        });\n        const agent = result.agent as Agent;\n         setCurrentUser({\n          id: agent.id,\n          name: agent.name,\n          avatar: agent.avatar,\n          role: agent.role,\n          email: agent.email,\n          phone: agent.phone,\n          companyId: agent.companyId,\n        } as UserProfile);\n\n        if (agent.role === 'admin') {\n          setActiveView('Dashboard');\n        } else {\n          setActiveView('Chat');\n        }\n    }\n    return result;\n  }\n\n  const handleLogout = () => {\n    setCurrentUser(null);\n    setActiveView('Chat');\n  };\n  \n  const handleUpdateUser = (updatedUser: Partial<UserProfile>) => {\n    setCurrentUser(prev => prev ? { ...prev, ...updatedUser } : null);\n  }\n\n  const renderView = () => {\n    const props = { onMenuClick: () => setIsNavOpen(true), user: currentUser };\n    switch (activeView) {\n      case \"Chat\":\n        return <ChatLayout user={currentUser} onMenuClick={() => setIsNavOpen(true)} />;\n      case \"Contacts\":\n        return <ContactsView {...props} />;\n      case \"Agents\":\n        return <AgentsView {...props} />;\n      case \"Dashboard\":\n        return <DashboardView {...props} />;\n      case \"Announcements\":\n        return <AnnouncementsView {...props} />;\n      case \"My Performance\":\n        return <MyPerformanceView {...props} />;\n      case \"Campaigns\":\n         return <CampaignsView {...props} />;\n      default:\n        return <ChatLayout user={currentUser} onMenuClick={() => setIsNavOpen(true)} />;\n    }\n  };\n\n  if (!currentUser) {\n    return (\n      <main className=\"flex h-screen w-full items-center justify-center bg-background p-4 overflow-hidden auth-page-background\">\n        <AuthForm onLogin={onLogin} onSignUp={onSignUp} />\n      </main>\n    );\n  }\n\n  return (\n    <main className=\"flex h-screen bg-background\">\n      <SettingsDialog \n        open={isSettingsOpen} \n        onOpenChange={setIsSettingsOpen} \n        user={currentUser}\n        onUserUpdate={handleUpdateUser}\n      />\n      <VerticalNav \n          activeView={activeView} \n          setActiveView={setActiveView} \n          user={currentUser}\n          onLogout={handleLogout}\n          isOpen={isNavOpen}\n          setIsOpen={setIsNavOpen}\n          onSettingsClick={() => setIsSettingsOpen(true)}\n      />\n      <div className=\"flex-1 md:pl-[70px] min-w-0\">\n          {renderView()}\n      </div>\n    </main>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAfA;;;;;;;;;;;;;;AAoBe,SAAS,KAAK,EAAE,MAAM,EAAE,YAAY,EAAoC;;IACrF,CAAA,GAAA,6JAAA,CAAA,MAAS,AAAD,EAAE;IACV,CAAA,GAAA,6JAAA,CAAA,MAAS,AAAD,EAAE;IAEV,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAc,AAAD,EAAQ;IACzD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAc,AAAD,EAAE;IACjD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAc,AAAD,EAAsB;IACzE,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAc,AAAD,EAAE;IAC3D,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,+HAAA,CAAA,WAAQ,AAAD;IAEzB,MAAM,UAAU,OAAO,OAAe;QACpC,MAAM,SAAS,MAAM,CAAA,GAAA,qJAAA,CAAA,cAAW,AAAD,EAAE,OAAO;QACxC,IAAI,OAAO,OAAO,IAAI,OAAO,KAAK,EAAE;YAClC,MAAM,QAAQ,OAAO,KAAK;YACzB,eAAe;gBACd,IAAI,MAAM,EAAE;gBACZ,MAAM,MAAM,IAAI;gBAChB,QAAQ,MAAM,MAAM;gBACpB,MAAM,MAAM,IAAI;gBAChB,OAAO,MAAM,KAAK;gBAClB,OAAO,MAAM,KAAK;gBAClB,WAAW,MAAM,SAAS;YAC5B;YAEA,IAAI,MAAM,IAAI,KAAK,SAAS;gBAC1B,cAAc;YAChB,OAAO;gBACL,cAAc;YAChB;QACF;QACA,OAAO;YAAE,SAAS,OAAO,OAAO;YAAE,SAAS,OAAO,OAAO;QAAC;IAC5D;IAEA,MAAM,WAAW,OAAO,MAAc,OAAe;QACnD,MAAM,SAAS,MAAM,CAAA,GAAA,qJAAA,CAAA,eAAY,AAAD,EAAE,MAAM,OAAO;QAC/C,IAAI,OAAO,OAAO,IAAI,OAAO,KAAK,EAAE;YAChC,MAAM;gBACF,OAAO;gBACP,aAAa;YACjB;YACA,MAAM,QAAQ,OAAO,KAAK;YACzB,eAAe;gBACd,IAAI,MAAM,EAAE;gBACZ,MAAM,MAAM,IAAI;gBAChB,QAAQ,MAAM,MAAM;gBACpB,MAAM,MAAM,IAAI;gBAChB,OAAO,MAAM,KAAK;gBAClB,OAAO,MAAM,KAAK;gBAClB,WAAW,MAAM,SAAS;YAC5B;YAEA,IAAI,MAAM,IAAI,KAAK,SAAS;gBAC1B,cAAc;YAChB,OAAO;gBACL,cAAc;YAChB;QACJ;QACA,OAAO;IACT;IAEA,MAAM,eAAe;QACnB,eAAe;QACf,cAAc;IAChB;IAEA,MAAM,mBAAmB,CAAC;QACxB,eAAe,CAAA,OAAQ,OAAO;gBAAE,GAAG,IAAI;gBAAE,GAAG,WAAW;YAAC,IAAI;IAC9D;IAEA,MAAM,aAAa;QACjB,MAAM,QAAQ;YAAE,aAAa,IAAM,aAAa;YAAO,MAAM;QAAY;QACzE,OAAQ;YACN,KAAK;gBACH,qBAAO,6LAAC,oJAAA,CAAA,aAAU;oBAAC,MAAM;oBAAa,aAAa,IAAM,aAAa;;;;;;YACxE,KAAK;gBACH,qBAAO,6LAAC,sJAAA,CAAA,eAAY;oBAAE,GAAG,KAAK;;;;;;YAChC,KAAK;gBACH,qBAAO,6LAAC,oJAAA,CAAA,aAAU;oBAAE,GAAG,KAAK;;;;;;YAC9B,KAAK;gBACH,qBAAO,6LAAC,uJAAA,CAAA,gBAAa;oBAAE,GAAG,KAAK;;;;;;YACjC,KAAK;gBACH,qBAAO,6LAAC,2JAAA,CAAA,oBAAiB;oBAAE,GAAG,KAAK;;;;;;YACrC,KAAK;gBACH,qBAAO,6LAAC,+JAAA,CAAA,oBAAiB;oBAAE,GAAG,KAAK;;;;;;YACrC,KAAK;gBACF,qBAAO,6LAAC,uJAAA,CAAA,gBAAa;oBAAE,GAAG,KAAK;;;;;;YAClC;gBACE,qBAAO,6LAAC,oJAAA,CAAA,aAAU;oBAAC,MAAM;oBAAa,aAAa,IAAM,aAAa;;;;;;QAC1E;IACF;IAEA,IAAI,CAAC,aAAa;QAChB,qBACE,6LAAC;YAAK,WAAU;sBACd,cAAA,6LAAC,kJAAA,CAAA,WAAQ;gBAAC,SAAS;gBAAS,UAAU;;;;;;;;;;;IAG5C;IAEA,qBACE,6LAAC;QAAK,WAAU;;0BACd,6LAAC,wJAAA,CAAA,iBAAc;gBACb,MAAM;gBACN,cAAc;gBACd,MAAM;gBACN,cAAc;;;;;;0BAEhB,6LAAC,qJAAA,CAAA,cAAW;gBACR,YAAY;gBACZ,eAAe;gBACf,MAAM;gBACN,UAAU;gBACV,QAAQ;gBACR,WAAW;gBACX,iBAAiB,IAAM,kBAAkB;;;;;;0BAE7C,6LAAC;gBAAI,WAAU;0BACV;;;;;;;;;;;;AAIX;GAzHwB;;QAQJ,+HAAA,CAAA,WAAQ;;;KARJ","debugId":null}}]
}