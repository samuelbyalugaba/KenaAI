{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/intelligent-chat-summary.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview This file defines a Genkit flow for summarizing long chat threads using AI.\n *\n * The flow takes a chat thread as input and returns a concise summary of the conversation's key points.\n *\n * @interface IntelligentChatSummaryInput - Defines the input schema for the intelligentChatSummary function.\n * @interface IntelligentChatSummaryOutput - Defines the output schema for the intelligentChatSummary function.\n * @function intelligentChatSummary - A wrapper function that calls the intelligentChatSummaryFlow with the input and returns the output.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst IntelligentChatSummaryInputSchema = z.object({\n  chatThread: z\n    .string()\n    .describe('The complete chat thread to be summarized.'),\n});\n\nexport type IntelligentChatSummaryInput = z.infer<\n  typeof IntelligentChatSummaryInputSchema\n>;\n\nconst IntelligentChatSummaryOutputSchema = z.object({\n  summary: z.string().describe('A concise summary of the chat thread.'),\n});\n\nexport type IntelligentChatSummaryOutput = z.infer<\n  typeof IntelligentChatSummaryOutputSchema\n>;\n\nexport async function intelligentChatSummary(\n  input: IntelligentChatSummaryInput\n): Promise<IntelligentChatSummaryOutput> {\n  return intelligentChatSummaryFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'intelligentChatSummaryPrompt',\n  input: {schema: IntelligentChatSummaryInputSchema},\n  output: {schema: IntelligentChatSummaryOutputSchema},\n  prompt: `You are an AI expert specializing in summarizing chat threads.\n\n  Please provide a concise summary of the key points in the following chat thread:\n  \\\"{{{chatThread}}}\\\".\n  The summary should be no more than 200 words.\n  `,\n});\n\nconst intelligentChatSummaryFlow = ai.defineFlow(\n  {\n    name: 'intelligentChatSummaryFlow',\n    inputSchema: IntelligentChatSummaryInputSchema,\n    outputSchema: IntelligentChatSummaryOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;;IAiCsB,yBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-campaign-message.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview A Genkit flow for generating marketing campaign messages.\n *\n * - generateCampaignMessage - A function that generates a campaign message based on a title.\n * - GenerateCampaignMessageInput - The input type for the generateCampaignMessage function.\n * - GenerateCampaignMessageOutput - The return type for the generateCampaignMessage function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateCampaignMessageInputSchema = z.object({\n  campaignTitle: z.string().describe('The title of the marketing campaign.'),\n});\nexport type GenerateCampaignMessageInput = z.infer<typeof GenerateCampaignMessageInputSchema>;\n\nconst GenerateCampaignMessageOutputSchema = z.object({\n  message: z\n    .string()\n    .describe('The generated marketing message for the campaign.'),\n});\nexport type GenerateCampaignMessageOutput = z.infer<typeof GenerateCampaignMessageOutputSchema>;\n\nexport async function generateCampaignMessage(input: GenerateCampaignMessageInput): Promise<GenerateCampaignMessageOutput> {\n  return generateCampaignMessageFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateCampaignMessagePrompt',\n  input: {schema: GenerateCampaignMessageInputSchema},\n  output: {schema: GenerateCampaignMessageOutputSchema},\n  prompt: `You are a marketing expert. Write a concise and compelling message for a marketing campaign with the following title:\n\"{{{campaignTitle}}}\"\n\nKeep the message under 160 characters. Include a clear call to action.\n`,\n});\n\nconst generateCampaignMessageFlow = ai.defineFlow(\n  {\n    name: 'generateCampaignMessageFlow',\n    inputSchema: GenerateCampaignMessageInputSchema,\n    outputSchema: GenerateCampaignMessageOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;;IAyBsB,0BAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/hooks/use-mobile.tsx"],"sourcesContent":["import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n"],"names":[],"mappings":";;;AAAA;;;AAEA,MAAM,oBAAoB;AAEnB,SAAS;;IACd,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAc,AAAD,EAAuB;IAEpE,CAAA,GAAA,6JAAA,CAAA,YAAe,AAAD;iCAAE;YACd,MAAM,MAAM,OAAO,UAAU,CAAC,CAAC,YAAY,EAAE,oBAAoB,EAAE,GAAG,CAAC;YACvE,MAAM;kDAAW;oBACf,YAAY,OAAO,UAAU,GAAG;gBAClC;;YACA,IAAI,gBAAgB,CAAC,UAAU;YAC/B,YAAY,OAAO,UAAU,GAAG;YAChC;yCAAO,IAAM,IAAI,mBAAmB,CAAC,UAAU;;QACjD;gCAAG,EAAE;IAEL,OAAO,CAAC,CAAC;AACX;GAdgB","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/hooks/use-theme.ts"],"sourcesContent":["\n\"use client\"\n\nimport { useTheme as useNextTheme } from \"next-themes\"\n\n// This custom hook is now a simple re-export of the hook from next-themes.\n// This maintains the existing `useTheme` import paths throughout the app\n// while using the more robust library.\nexport const useTheme = useNextTheme\n"],"names":[],"mappings":";;;AAGA;AAFA;;AAOO,MAAM,WAAW,mJAAA,CAAA,WAAY","debugId":null}}]
}