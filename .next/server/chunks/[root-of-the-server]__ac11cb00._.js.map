{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/db.ts"],"sourcesContent":["\nimport { MongoClient, Db } from 'mongodb';\n\nconst uri = process.env.MONGODB_URI;\nif (!uri) {\n    throw new Error('Please define the MONGODB_URI environment variable inside .env');\n}\n\nlet client: MongoClient;\nlet clientPromise: Promise<MongoClient>;\n\ndeclare global {\n    var _mongoClientPromise: Promise<MongoClient>;\n}\n\nif (process.env.NODE_ENV === 'development') {\n    // In development mode, use a global variable so that the value\n    // is preserved across module reloads caused by HMR (Hot Module Replacement).\n    if (!global._mongoClientPromise) {\n        client = new MongoClient(uri, {});\n        global._mongoClientPromise = client.connect();\n    }\n    clientPromise = global._mongoClientPromise;\n} else {\n    // In production mode, it's best to not use a global variable.\n    client = new MongoClient(uri, {});\n    clientPromise = client.connect();\n}\n\nlet db: Db;\n\nexport async function getDb(): Promise<Db> {\n    if (db) {\n        return db;\n    }\n    const mongoClient = await clientPromise;\n    const dbName = new URL(uri).pathname.substring(1) || 'kena-ai';\n    db = mongoClient.db(dbName);\n    console.log(`Connected to database: ${db.databaseName}`);\n    return db;\n}\n"],"names":[],"mappings":";;;AACA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AACnC,IAAI,CAAC,KAAK;IACN,MAAM,IAAI,MAAM;AACpB;AAEA,IAAI;AACJ,IAAI;AAMJ,wCAA4C;IACxC,+DAA+D;IAC/D,6EAA6E;IAC7E,IAAI,CAAC,OAAO,mBAAmB,EAAE;QAC7B,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK,CAAC;QAC/B,OAAO,mBAAmB,GAAG,OAAO,OAAO;IAC/C;IACA,gBAAgB,OAAO,mBAAmB;AAC9C,OAAO;;AAIP;AAEA,IAAI;AAEG,eAAe;IAClB,IAAI,IAAI;QACJ,OAAO;IACX;IACA,MAAM,cAAc,MAAM;IAC1B,MAAM,SAAS,IAAI,IAAI,KAAK,QAAQ,CAAC,SAAS,CAAC,MAAM;IACrD,KAAK,YAAY,EAAE,CAAC;IACpB,QAAQ,GAAG,CAAC,CAAC,uBAAuB,EAAE,GAAG,YAAY,EAAE;IACvD,OAAO;AACX","debugId":null}},
    {"offset": {"line": 195, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/auth.ts"],"sourcesContent":["\n'use server';\n\nimport bcrypt from 'bcrypt';\n\nconst saltRounds = 10;\n\nexport async function hashPassword(password: string): Promise<string> {\n  const salt = await bcrypt.genSalt(saltRounds);\n  const hash = await bcrypt.hash(password, salt);\n  return hash;\n}\n\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return await bcrypt.compare(password, hash);\n}\n"],"names":[],"mappings":";;;;;;AAGA;;;;;AAEA,MAAM,aAAa;AAEZ,eAAe,aAAa,QAAgB;IACjD,MAAM,OAAO,MAAM,qGAAA,CAAA,UAAM,CAAC,OAAO,CAAC;IAClC,MAAM,OAAO,MAAM,qGAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;IACzC,OAAO;AACT;AAEO,eAAe,eAAe,QAAgB,EAAE,IAAY;IACjE,OAAO,MAAM,qGAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU;AACxC;;;IARsB;IAMA;;AANA,iPAAA;AAMA,iPAAA","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["\nimport NextAuth, { type NextAuthOptions } from 'next-auth';\nimport GoogleProvider from 'next-auth/providers/google';\nimport CredentialsProvider from 'next-auth/providers/credentials';\nimport { getDb } from '@/lib/db';\nimport { verifyPassword, hashPassword } from '@/lib/auth';\nimport type { Agent, Company } from '@/types';\nimport { Collection, ObjectId } from 'mongodb';\n\nasync function getAgentsCollection(): Promise<Collection<Agent>> {\n    const db = await getDb();\n    return db.collection<Agent>('agents');\n}\n\nasync function getCompaniesCollection(): Promise<Collection<Company>> {\n    const db = await getDb();\n    return db.collection<Company>('companies');\n}\n\n\nexport const authOptions: NextAuthOptions = {\n    providers: [\n        GoogleProvider({\n            clientId: process.env.GOOGLE_CLIENT_ID!,\n            clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n        }),\n        CredentialsProvider({\n            name: 'Credentials',\n            credentials: {\n                email: { label: \"Email\", type: \"email\" },\n                password: { label: \"Password\", type: \"password\" }\n            },\n            async authorize(credentials) {\n                if (!credentials) {\n                    return null;\n                }\n                try {\n                    const agentsCollection = await getAgentsCollection();\n                    const agent = await agentsCollection.findOne({ email: credentials.email.toLowerCase() });\n\n                    if (agent && agent.password) {\n                        const isPasswordValid = await verifyPassword(credentials.password, agent.password);\n                        if (isPasswordValid) {\n                            return {\n                                id: agent._id.toString(),\n                                name: agent.name,\n                                email: agent.email,\n                                image: agent.avatar,\n                                role: agent.role,\n                                companyId: agent.companyId?.toString(),\n                            };\n                        }\n                    }\n                } catch (error) {\n                    console.error(\"Authorize error:\", error);\n                    return null;\n                }\n\n                return null;\n            }\n        })\n    ],\n    session: {\n        strategy: 'jwt',\n    },\n    callbacks: {\n        async signIn({ user, account, profile }) {\n            if (account?.provider === 'google') {\n                const agentsCollection = await getAgentsCollection();\n                let agent = await agentsCollection.findOne({ email: user.email! });\n\n                if (!agent) {\n                    // This is a new Google user, create a company and an agent profile for them.\n                    const db = await getDb();\n                    const session = db.client.startSession();\n                    try {\n                        await session.withTransaction(async () => {\n                            const companiesCollection = await getCompaniesCollection();\n                            \n                            const companyResult = await companiesCollection.insertOne({\n                                name: `${user.name!}'s Company`,\n                                createdAt: new Date(),\n                            }, { session });\n                            const companyId = companyResult.insertedId;\n\n                            const newAgentData: Omit<Agent, 'id' | '_id'> = {\n                                name: user.name!,\n                                email: user.email!.toLowerCase(),\n                                role: 'admin',\n                                avatar: user.image!,\n                                phone: '',\n                                companyId: companyId,\n                            };\n                            \n                            const agentResult = await agentsCollection.insertOne(newAgentData as any, { session });\n                            \n                            // Attach new IDs to the user object for the JWT callback\n                            user.id = agentResult.insertedId.toString();\n                            (user as any).companyId = companyId.toString();\n                            (user as any).role = 'admin';\n                        });\n                    } catch (error) {\n                        console.error(\"Google sign-in transaction error:\", error);\n                         if (session.inTransaction()) {\n                            await session.abortTransaction();\n                        }\n                        return false; // Prevent sign-in on error\n                    } finally {\n                        await session.endSession();\n                    }\n                } else {\n                    // Existing user, attach their info\n                    user.id = agent._id.toString();\n                    (user as any).companyId = agent.companyId?.toString();\n                    (user as any).role = agent.role;\n                }\n            }\n            return true;\n        },\n        async jwt({ token, user, trigger, session }) {\n             if (trigger === \"update\" && session) {\n                // Handle session updates from client\n                return { ...token, ...session };\n            }\n            if (user) {\n                token.id = user.id;\n                token.role = (user as any).role;\n                token.companyId = (user as any).companyId;\n                token.name = user.name;\n                token.picture = user.image;\n            }\n            return token;\n        },\n        async session({ session, token }) {\n            if (session.user) {\n                session.user.id = token.id as string;\n                session.user.role = token.role as any;\n                session.user.companyId = token.companyId as string;\n                session.user.name = token.name as string;\n                session.user.image = token.picture as string;\n            }\n            return session;\n        }\n    },\n    secret: process.env.NEXTAUTH_SECRET,\n};\n\nconst handler = NextAuth(authOptions);\n\nexport { handler as GET, handler as POST };\n\ndeclare module 'next-auth' {\n  interface Session {\n    user: {\n      id: string;\n      name: string;\n      email: string;\n      image: string;\n      role: AgentRole;\n      companyId: string;\n    };\n  }\n}\n\ndeclare module 'next-auth/jwt' {\n  interface JWT {\n    id?: string;\n    role?: AgentRole;\n    companyId?: string;\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}