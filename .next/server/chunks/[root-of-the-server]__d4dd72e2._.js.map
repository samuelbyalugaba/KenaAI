{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/db.ts"],"sourcesContent":["\nimport { MongoClient, Db } from 'mongodb';\n\nconst uri = process.env.MONGODB_URI;\nif (!uri) {\n    throw new Error('Please define the MONGODB_URI environment variable inside .env');\n}\n\nlet client: MongoClient;\nlet clientPromise: Promise<MongoClient>;\n\ndeclare global {\n    var _mongoClientPromise: Promise<MongoClient>;\n}\n\nif (process.env.NODE_ENV === 'development') {\n    // In development mode, use a global variable so that the value\n    // is preserved across module reloads caused by HMR (Hot Module Replacement).\n    if (!global._mongoClientPromise) {\n        client = new MongoClient(uri, {});\n        global._mongoClientPromise = client.connect();\n    }\n    clientPromise = global._mongoClientPromise;\n} else {\n    // In production mode, it's best to not use a global variable.\n    client = new MongoClient(uri, {});\n    clientPromise = client.connect();\n}\n\nlet db: Db;\n\nexport async function getDb(): Promise<Db> {\n    if (db) {\n        return db;\n    }\n    const mongoClient = await clientPromise;\n    const dbName = new URL(uri).pathname.substring(1) || 'kena-ai';\n    db = mongoClient.db(dbName);\n    console.log(`Connected to database: ${db.databaseName}`);\n    return db;\n}\n"],"names":[],"mappings":";;;AACA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AACnC,IAAI,CAAC,KAAK;IACN,MAAM,IAAI,MAAM;AACpB;AAEA,IAAI;AACJ,IAAI;AAMJ,wCAA4C;IACxC,+DAA+D;IAC/D,6EAA6E;IAC7E,IAAI,CAAC,OAAO,mBAAmB,EAAE;QAC7B,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK,CAAC;QAC/B,OAAO,mBAAmB,GAAG,OAAO,OAAO;IAC/C;IACA,gBAAgB,OAAO,mBAAmB;AAC9C,OAAO;;AAIP;AAEA,IAAI;AAEG,eAAe;IAClB,IAAI,IAAI;QACJ,OAAO;IACX;IACA,MAAM,cAAc,MAAM;IAC1B,MAAM,SAAS,IAAI,IAAI,KAAK,QAAQ,CAAC,SAAS,CAAC,MAAM;IACrD,KAAK,YAAY,EAAE,CAAC;IACpB,QAAQ,GAAG,CAAC,CAAC,uBAAuB,EAAE,GAAG,YAAY,EAAE;IACvD,OAAO;AACX","debugId":null}},
    {"offset": {"line": 107, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/botpress-webhook/route.ts"],"sourcesContent":["\nimport { NextRequest, NextResponse } from 'next/server';\nimport { getDb } from '@/lib/db';\nimport type { User, Chat, Message, Company } from '@/types';\nimport { Collection, ObjectId } from 'mongodb';\n\n// Helper function to get database collections\nasync function getCompaniesCollection(): Promise<Collection<Company>> {\n    const db = await getDb();\n    return db.collection<Company>('companies');\n}\n\nasync function getUsersCollection(): Promise<Collection<User>> {\n    const db = await getDb();\n    return db.collection<User>('contacts');\n}\n\nasync function getChatsCollection(): Promise<Collection<Chat>> {\n    const db = await getDb();\n    return db.collection<Chat>('chats');\n}\n\nasync function getMessagesCollection(): Promise<Collection<Message>> {\n    const db = await getDb();\n    return db.collection<Message>('messages');\n}\n\n\n// This is the main webhook handler\nexport async function POST(req: NextRequest) {\n    try {\n        const body = await req.json();\n\n        // Basic validation for incoming Botpress payload\n        if (body.type !== 'message.created') {\n            return NextResponse.json({ message: 'Ignoring non-message event' }, { status: 200 });\n        }\n\n        const { data: messageData } = body;\n        const { botId, conversationId, userId: botpressUserId, payload, direction } = messageData;\n        \n        // Ignore messages sent FROM the bot to prevent loops\n        if (direction === 'outgoing') {\n             return NextResponse.json({ message: 'Ignoring outgoing bot message' }, { status: 200 });\n        }\n\n        // 1. Find the company associated with this bot\n        const companiesCollection = await getCompaniesCollection();\n        const company = await companiesCollection.findOne({ botpressBotId: botId });\n\n        if (!company) {\n            console.error(`Webhook Error: Company not found for botId: ${botId}`);\n            return NextResponse.json({ error: 'Company not found for this bot.' }, { status: 404 });\n        }\n        const companyId = company._id;\n\n        // 2. Find or create the user (contact)\n        const usersCollection = await getUsersCollection();\n        let user = await usersCollection.findOne({ email: `${botpressUserId}@botpress.io` });\n\n        if (!user) {\n            const newUserToInsert: Omit<User, 'id' | '_id'> = {\n                name: `Botpress User ${botpressUserId.substring(0, 5)}`,\n                email: `${botpressUserId}@botpress.io`, // Create a unique email\n                avatar: '',\n                phone: '',\n                companyId: companyId,\n                notes: [],\n                online: true,\n            };\n            const result = await usersCollection.insertOne(newUserToInsert as any);\n            user = { ...newUserToInsert, _id: result.insertedId, id: result.insertedId.toString() };\n        }\n\n\n        // 3. Find or create the chat\n        const chatsCollection = await getChatsCollection();\n        let chat = await chatsCollection.findOne({ 'user.id': user.id, companyId: companyId });\n\n        if (!chat) {\n            const newChatToInsert: Omit<Chat, 'id' | '_id'> = {\n                userId: user._id,\n                companyId: companyId,\n                lastMessage: payload.text,\n                timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),\n                unreadCount: 1,\n                priority: 'normal',\n                channel: (messageData.channel || 'Webchat') as any,\n                isChatbotActive: true, // It came from the bot, so it's active\n                messages: [],\n                user: user, // Embedding user for easier access\n            };\n            const result = await chatsCollection.insertOne(newChatToInsert as any);\n            chat = { ...newChatToInsert, _id: result.insertedId, id: result.insertedId.toString() };\n        } else {\n             // Update existing chat\n            await chatsCollection.updateOne(\n                { _id: chat._id },\n                { \n                    $set: { \n                        lastMessage: payload.text, \n                        timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) \n                    },\n                    $inc: { unreadCount: 1 }\n                }\n            );\n        }\n\n        // 4. Save the new message\n        const messagesCollection = await getMessagesCollection();\n        const newMessage: Omit<Message, 'id' | '_id'> = {\n            chatId: chat._id,\n            sender: user, // The sender is the user object\n            senderId: user._id,\n            text: payload.text,\n            timestamp: new Date(messageData.createdAt).toISOString(),\n        };\n\n        await messagesCollection.insertOne(newMessage as any);\n\n        console.log(`Successfully processed message for conversation ${conversationId}`);\n        return NextResponse.json({ success: true, message: \"Message processed\" }, { status: 200 });\n\n    } catch (error) {\n        console.error('Error processing Botpress webhook:', error);\n        if (error instanceof Error) {\n            return NextResponse.json({ error: 'Failed to process webhook.', details: error.message }, { status: 500 });\n        }\n        return NextResponse.json({ error: 'An unknown error occurred.' }, { status: 500 });\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}