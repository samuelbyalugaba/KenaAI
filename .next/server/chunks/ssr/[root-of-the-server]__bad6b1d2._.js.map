{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 17, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/db.ts"],"sourcesContent":["import { Pool } from 'pg';\n\nlet pool: Pool;\n\n// Check if the environment is production to apply SSL configuration\nif (process.env.NODE_ENV === 'production') {\n  pool = new Pool({\n    connectionString: process.env.POSTGRES_URL,\n    ssl: {\n      rejectUnauthorized: false,\n    },\n  });\n} else {\n  // Use a global object to preserve the pool across hot reloads in development\n  if (!global._pgPool) {\n    global._pgPool = new Pool({\n      connectionString: process.env.POSTGRES_URL,\n    });\n  }\n  pool = global._pgPool;\n}\n\nexport async function query(text: string, params?: any[]) {\n  const start = Date.now();\n  try {\n    const res = await pool.query(text, params);\n    const duration = Date.now() - start;\n    console.log('executed query', { text, duration, rows: res.rowCount });\n    return res;\n  } catch (error) {\n    console.error('Error executing query', { text, error });\n    throw error;\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;;;;;AAEA,IAAI;AAEJ,oEAAoE;AACpE,uCAA2C;;AAO3C,OAAO;IACL,6EAA6E;IAC7E,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,OAAO,OAAO,GAAG,IAAI,oGAAA,CAAA,OAAI,CAAC;YACxB,kBAAkB,QAAQ,GAAG,CAAC,YAAY;QAC5C;IACF;IACA,OAAO,OAAO,OAAO;AACvB;AAEO,eAAe,MAAM,IAAY,EAAE,MAAc;IACtD,MAAM,QAAQ,KAAK,GAAG;IACtB,IAAI;QACF,MAAM,MAAM,MAAM,KAAK,KAAK,CAAC,MAAM;QACnC,MAAM,WAAW,KAAK,GAAG,KAAK;QAC9B,QAAQ,GAAG,CAAC,kBAAkB;YAAE;YAAM;YAAU,MAAM,IAAI,QAAQ;QAAC;QACnE,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;YAAE;YAAM;QAAM;QACrD,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/auth.ts"],"sourcesContent":["\n'use server';\n\nimport bcrypt from 'bcrypt';\n\nconst saltRounds = 10;\n\nexport async function hashPassword(password: string): Promise<string> {\n  const salt = await bcrypt.genSalt(saltRounds);\n  const hash = await bcrypt.hash(password, salt);\n  return hash;\n}\n\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return await bcrypt.compare(password, hash);\n}\n"],"names":[],"mappings":";;;;;;AAGA;;;;;AAEA,MAAM,aAAa;AAEZ,eAAe,aAAa,QAAgB;IACjD,MAAM,OAAO,MAAM,qGAAA,CAAA,UAAM,CAAC,OAAO,CAAC;IAClC,MAAM,OAAO,MAAM,qGAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;IACzC,OAAO;AACT;AAEO,eAAe,eAAe,QAAgB,EAAE,IAAY;IACjE,OAAO,MAAM,qGAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU;AACxC;;;IARsB;IAMA;;AANA,+OAAA;AAMA,+OAAA","debugId":null}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { query } from \"@/lib/db\";\nimport { hashPassword, verifyPassword } from \"@/lib/auth\";\nimport type { Agent, AgentRole } from \"@/types\";\n\nexport async function handleLogin(email: string, password_unused: string) {\n    try {\n      const result = await query('SELECT * FROM agents WHERE email = $1', [email.toLowerCase()]);\n      const agent: Agent | undefined = result.rows[0];\n\n      if (agent && agent.password) {\n        const isPasswordValid = await verifyPassword(password_unused, agent.password);\n        if (isPasswordValid) {\n          // Omit password from the object returned to the client\n          const { password, ...agentWithoutPassword } = agent;\n          return { success: true, agent: agentWithoutPassword };\n        }\n      }\n      return { success: false, message: \"Invalid email or password.\" };\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return { success: false, message: \"Database connection error. Please check server logs and ensure the POSTGRES_URL is correctly configured in your .env file.\" };\n    }\n  };\n\nexport async function createAgent(name: string, email: string, password_unused: string, role: AgentRole) {\n    try {\n        const existingAgentResult = await query('SELECT * FROM agents WHERE email = $1', [email.toLowerCase()]);\n        if (existingAgentResult.rows.length > 0) {\n            return { success: false, message: \"An agent with this email already exists.\" };\n        }\n\n        const hashedPassword = await hashPassword(password_unused);\n        const avatar = `https://picsum.photos/seed/${name}/100/100`;\n\n        const result = await query(\n            'INSERT INTO agents (name, email, password, role, avatar) VALUES ($1, $2, $3, $4, $5) RETURNING *',\n            [name, email.toLowerCase(), hashedPassword, role, avatar]\n        );\n        const newAgent: Agent | undefined = result.rows[0];\n\n        if (newAgent) {\n            const { password, ...agentWithoutPassword } = newAgent;\n            return { success: true, agent: agentWithoutPassword };\n        }\n        return { success: false, message: \"Failed to create agent.\" };\n    } catch (error) {\n        console.error(\"Create agent error:\", error);\n        return { success: false, message: \"An unexpected error occurred while creating the agent.\" };\n    }\n}\n\nexport async function handleSignUp(name: string, email: string, password_unused: string) {\n    return createAgent(name, email, password_unused, \"agent\");\n}\n"],"names":[],"mappings":";;;;;;;AAGA;AACA;;;;;;;;;;AAGO,eAAe,YAAY,KAAa,EAAE,eAAuB;IACpE,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,gHAAA,CAAA,QAAK,AAAD,EAAE,yCAAyC;YAAC,MAAM,WAAW;SAAG;QACzF,MAAM,QAA2B,OAAO,IAAI,CAAC,EAAE;QAE/C,IAAI,SAAS,MAAM,QAAQ,EAAE;YAC3B,MAAM,kBAAkB,MAAM,CAAA,GAAA,kHAAA,CAAA,iBAAc,AAAD,EAAE,iBAAiB,MAAM,QAAQ;YAC5E,IAAI,iBAAiB;gBACnB,uDAAuD;gBACvD,MAAM,EAAE,QAAQ,EAAE,GAAG,sBAAsB,GAAG;gBAC9C,OAAO;oBAAE,SAAS;oBAAM,OAAO;gBAAqB;YACtD;QACF;QACA,OAAO;YAAE,SAAS;YAAO,SAAS;QAA6B;IACjE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,OAAO;YAAE,SAAS;YAAO,SAAS;QAA6H;IACjK;AACF;AAEK,eAAe,YAAY,IAAY,EAAE,KAAa,EAAE,eAAuB,EAAE,IAAe;IACnG,IAAI;QACA,MAAM,sBAAsB,MAAM,CAAA,GAAA,gHAAA,CAAA,QAAK,AAAD,EAAE,yCAAyC;YAAC,MAAM,WAAW;SAAG;QACtG,IAAI,oBAAoB,IAAI,CAAC,MAAM,GAAG,GAAG;YACrC,OAAO;gBAAE,SAAS;gBAAO,SAAS;YAA2C;QACjF;QAEA,MAAM,iBAAiB,MAAM,CAAA,GAAA,kHAAA,CAAA,eAAY,AAAD,EAAE;QAC1C,MAAM,SAAS,CAAC,2BAA2B,EAAE,KAAK,QAAQ,CAAC;QAE3D,MAAM,SAAS,MAAM,CAAA,GAAA,gHAAA,CAAA,QAAK,AAAD,EACrB,oGACA;YAAC;YAAM,MAAM,WAAW;YAAI;YAAgB;YAAM;SAAO;QAE7D,MAAM,WAA8B,OAAO,IAAI,CAAC,EAAE;QAElD,IAAI,UAAU;YACV,MAAM,EAAE,QAAQ,EAAE,GAAG,sBAAsB,GAAG;YAC9C,OAAO;gBAAE,SAAS;gBAAM,OAAO;YAAqB;QACxD;QACA,OAAO;YAAE,SAAS;YAAO,SAAS;QAA0B;IAChE,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO;YAAE,SAAS;YAAO,SAAS;QAAyD;IAC/F;AACJ;AAEO,eAAe,aAAa,IAAY,EAAE,KAAa,EAAE,eAAuB;IACnF,OAAO,YAAY,MAAM,OAAO,iBAAiB;AACrD;;;IAjDsB;IAoBA;IA2BA;;AA/CA,+OAAA;AAoBA,+OAAA;AA2BA,+OAAA","debugId":null}},
    {"offset": {"line": 428, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 449, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/intelligent-chat-summary.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview This file defines a Genkit flow for summarizing long chat threads using AI.\n *\n * The flow takes a chat thread as input and returns a concise summary of the conversation's key points.\n *\n * @interface IntelligentChatSummaryInput - Defines the input schema for the intelligentChatSummary function.\n * @interface IntelligentChatSummaryOutput - Defines the output schema for the intelligentChatSummary function.\n * @function intelligentChatSummary - A wrapper function that calls the intelligentChatSummaryFlow with the input and returns the output.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst IntelligentChatSummaryInputSchema = z.object({\n  chatThread: z\n    .string()\n    .describe('The complete chat thread to be summarized.'),\n});\n\nexport type IntelligentChatSummaryInput = z.infer<\n  typeof IntelligentChatSummaryInputSchema\n>;\n\nconst IntelligentChatSummaryOutputSchema = z.object({\n  summary: z.string().describe('A concise summary of the chat thread.'),\n});\n\nexport type IntelligentChatSummaryOutput = z.infer<\n  typeof IntelligentChatSummaryOutputSchema\n>;\n\nexport async function intelligentChatSummary(\n  input: IntelligentChatSummaryInput\n): Promise<IntelligentChatSummaryOutput> {\n  return intelligentChatSummaryFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'intelligentChatSummaryPrompt',\n  input: {schema: IntelligentChatSummaryInputSchema},\n  output: {schema: IntelligentChatSummaryOutputSchema},\n  prompt: `You are an AI expert specializing in summarizing chat threads.\n\n  Please provide a concise summary of the key points in the following chat thread:\n  \\\"{{{chatThread}}}\\\".\n  The summary should be no more than 200 words.\n  `,\n});\n\nconst intelligentChatSummaryFlow = ai.defineFlow(\n  {\n    name: 'intelligentChatSummaryFlow',\n    inputSchema: IntelligentChatSummaryInputSchema,\n    outputSchema: IntelligentChatSummaryOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;;;CAQC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,YAAY,uIAAA,CAAA,IAAC,CACV,MAAM,GACN,QAAQ,CAAC;AACd;AAMA,MAAM,qCAAqC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClD,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC/B;AAMO,eAAe,uBACpB,KAAkC;IAElC,OAAO,2BAA2B;AACpC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAiC;IACjD,QAAQ;QAAC,QAAQ;IAAkC;IACnD,QAAQ,CAAC;;;;;EAKT,CAAC;AACH;AAEA,MAAM,6BAA6B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC9C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA3BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 513, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {handleLogin as '6049a27b16f34690f84c6af4f9a048cb3293c23e61'} from 'ACTIONS_MODULE0'\nexport {intelligentChatSummary as '401584ba643ed7e5c544243d17d29b0fd409ded3b0'} from 'ACTIONS_MODULE1'\nexport {handleSignUp as '70780065eead8858964f97f44aaa44c48f608e84ba'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 597, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 611, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 625, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}