{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { getDb } from \"@/lib/db\";\nimport { hashPassword, verifyPassword } from \"@/lib/auth\";\nimport type { Agent, AgentRole, ActivityLog } from \"@/types\";\nimport { Collection, Db, ObjectId } from \"mongodb\";\n\nasync function getAgentsCollection(): Promise<Collection<Agent>> {\n    const db: Db = await getDb();\n    return db.collection<Agent>('agents');\n}\n\nasync function getCompaniesCollection(): Promise<Collection> {\n    const db: Db = await getDb();\n    return db.collection('companies');\n}\n\nasync function getActivityLogsCollection(): Promise<Collection<ActivityLog>> {\n    const db: Db = await getDb();\n    return db.collection<ActivityLog>('activity_logs');\n}\n\nasync function logActivity(companyId: ObjectId, agentId: ObjectId, agentName: string, action: string, details?: string) {\n    try {\n        const logsCollection = await getActivityLogsCollection();\n        await logsCollection.insertOne({\n            companyId,\n            agentId,\n            agentName,\n            action,\n            details,\n            timestamp: new Date(),\n        });\n    } catch (error) {\n        console.error(\"Failed to log activity:\", error);\n    }\n}\n\nexport async function getAgentsByCompany(companyId: string): Promise<Agent[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const agentsCollection = await getAgentsCollection();\n        const agents = await agentsCollection.find({ companyId: new ObjectId(companyId) }, { projection: { password: 0 } }).toArray();\n\n        // Convert ObjectId to string for client-side consumption\n        return agents.map(agent => ({\n            ...agent,\n            _id: agent._id.toString(),\n            id: agent._id.toString(),\n            companyId: agent.companyId?.toString(),\n        }));\n    } catch (error) {\n        console.error(\"Error fetching agents by company:\", error);\n        return [];\n    }\n}\n\n\nexport async function handleLogin(email: string, password_unused: string) {\n    try {\n      const agentsCollection = await getAgentsCollection();\n      const agent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n      if (agent && agent.password) {\n        const isPasswordValid = await verifyPassword(password_unused, agent.password);\n        if (isPasswordValid) {\n          // Omit password and convert to plain object before returning\n          const { password, _id, ...agentData } = agent;\n          const agentWithoutPassword = {\n            id: _id.toString(),\n            _id: _id.toString(),\n            ...agentData,\n            companyId: agent.companyId?.toString()\n          };\n          if (agent.companyId) {\n            await logActivity(agent.companyId, agent._id, agent.name, 'Agent Logged In');\n          }\n          return { success: true, agent: agentWithoutPassword };\n        }\n      }\n      return { success: false, message: \"Invalid email or password.\" };\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return { success: false, message: \"Database connection error. Please check server logs and ensure the MONGODB_URI is correctly configured in your .env file.\" };\n    }\n  };\n\nexport async function createAgent(name: string, email: string, password_unused: string, role: AgentRole, companyId: string, createdBy: { agentId: string; agentName: string }) {\n    try {\n        if (!ObjectId.isValid(companyId) || !ObjectId.isValid(createdBy.agentId)) {\n             return { success: false, message: \"Invalid company or agent ID.\" };\n        }\n        const agentsCollection = await getAgentsCollection();\n        const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n        if (existingAgent) {\n            return { success: false, message: \"An agent with this email already exists.\" };\n        }\n\n        const hashedPassword = await hashPassword(password_unused);\n        const avatar = `https://picsum.photos/seed/${name}/100/100`;\n        const companyObjectId = new ObjectId(companyId);\n\n        const result = await agentsCollection.insertOne({\n            name,\n            email: email.toLowerCase(),\n            password: hashedPassword,\n            role,\n            avatar,\n            id: '', // id will be created by MongoDB\n            phone: '', // Add a default phone number\n            companyId: companyObjectId\n        });\n\n        if (result.insertedId) {\n            const newAgent = await agentsCollection.findOne({ _id: result.insertedId });\n            if (newAgent) {\n                await logActivity(companyObjectId, new ObjectId(createdBy.agentId), createdBy.agentName, 'Agent Created', `Created new agent: ${name} (${email})`);\n                // Omit password and convert to plain object before returning\n                const { password, _id, ...agentData } = newAgent;\n                const agentWithoutPassword = {\n                  _id: _id.toString(),\n                  id: _id.toString(),\n                  ...agentData,\n                  companyId: newAgent.companyId?.toString(),\n                };\n                return { success: true, agent: agentWithoutPassword };\n            }\n        }\n        return { success: false, message: \"Failed to create agent.\" };\n    } catch (error) {\n        console.error(\"Create agent error:\", error);\n        return { success: false, message: \"An unexpected error occurred while creating the agent.\" };\n    }\n}\n\nexport async function handleSignUp(name: string, email: string, password_unused: string) {\n    const db = await getDb();\n    const session = db.client.startSession();\n    try {\n        let newAgentResult;\n        await session.withTransaction(async () => {\n            const companiesCollection = await getCompaniesCollection();\n            const agentsCollection = await getAgentsCollection();\n            const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() }, { session });\n\n            if (existingAgent) {\n                await session.abortTransaction();\n                // This throw will be caught by the outer catch block\n                throw new Error(\"An agent with this email already exists.\");\n            }\n\n            // 1. Create company\n            const companyResult = await companiesCollection.insertOne({\n                name: `${name}'s Company`,\n                createdAt: new Date(),\n            }, { session });\n\n            if (!companyResult.insertedId) {\n                throw new Error(\"Failed to create company.\");\n            }\n            const companyId = companyResult.insertedId;\n\n            // 2. Create admin user for that company\n            const hashedPassword = await hashPassword(password_unused);\n            const avatar = `https://picsum.photos/seed/${name}/100/100`;\n            const agentResult = await agentsCollection.insertOne({\n                name,\n                email: email.toLowerCase(),\n                password: hashedPassword,\n                role: 'admin',\n                avatar,\n                id: '',\n                phone: '',\n                companyId: companyId,\n            }, { session });\n\n             if (!agentResult.insertedId) {\n                throw new Error(\"Failed to create admin agent.\");\n            }\n\n            const newAgent = await agentsCollection.findOne({ _id: agentResult.insertedId }, { session });\n            if (newAgent) {\n                 await logActivity(companyId, newAgent._id, newAgent.name, 'User Registered', `New company '${name}\\'s Company' created.`);\n                 const { password, _id, ...agentData } = newAgent;\n                 newAgentResult = {\n                    id: _id.toString(),\n                    _id: _id.toString(),\n                    ...agentData,\n                    companyId: newAgent.companyId?.toString()\n                };\n            }\n        });\n        return { success: true, agent: newAgentResult };\n    } catch (error: any) {\n        console.error(\"Sign up transaction error:\", error);\n        return { success: false, message: error.message || \"An unexpected error occurred during sign up.\" };\n    } finally {\n        await session.endSession();\n    }\n}\n\nexport async function updateAgentProfile(agentId: string, name: string, email: string, phone: string) {\n    try {\n        if (!ObjectId.isValid(agentId)) {\n            return { success: false, message: \"Invalid agent ID.\" };\n        }\n        const agentObjectId = new ObjectId(agentId);\n        const agentsCollection = await getAgentsCollection();\n\n        const agent = await agentsCollection.findOne({ _id: agentObjectId });\n        if (!agent) {\n             return { success: false, message: \"Agent not found.\" };\n        }\n        \n        const result = await agentsCollection.updateOne(\n            { _id: agentObjectId },\n            { $set: { name, email: email.toLowerCase(), phone } }\n        );\n\n        if (result.matchedCount > 0) {\n            if (agent.companyId) {\n               await logActivity(agent.companyId, agentObjectId, name, 'Profile Updated');\n            }\n            return { success: true, message: \"Profile updated successfully.\" };\n        }\n        return { success: false, message: \"Agent not found or no changes made.\" };\n    } catch (error) {\n        console.error(\"Update profile error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function updateAgentPassword(agentId: string, currentPassword_unused: string, newPassword_unused: string) {\n    try {\n        if (!ObjectId.isValid(agentId)) {\n            return { success: false, message: \"Invalid agent ID.\" };\n        }\n        const agentObjectId = new ObjectId(agentId);\n        const agentsCollection = await getAgentsCollection();\n        const agent = await agentsCollection.findOne({ _id: agentObjectId });\n\n        if (!agent || !agent.password) {\n            return { success: false, message: \"Agent not found.\" };\n        }\n\n        const isPasswordValid = await verifyPassword(currentPassword_unused, agent.password);\n        if (!isPasswordValid) {\n            return { success: false, message: \"Incorrect current password.\" };\n        }\n\n        const hashedNewPassword = await hashPassword(newPassword_unused);\n        const result = await agentsCollection.updateOne(\n            { _id: agentObjectId },\n            { $set: { password: hashedNewPassword } }\n        );\n\n        if (result.modifiedCount > 0) {\n            if(agent.companyId) {\n                await logActivity(agent.companyId, agentObjectId, agent.name, 'Password Updated');\n            }\n            return { success: true, message: \"Password updated successfully.\" };\n        }\n        return { success: false, message: \"Failed to update password.\" };\n\n    } catch (error) {\n        console.error(\"Update password error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function getActivityLogs(companyId: string): Promise<ActivityLog[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const logsCollection = await getActivityLogsCollection();\n        const logs = await logsCollection.find({ companyId: new ObjectId(companyId) }).sort({ timestamp: -1 }).limit(50).toArray();\n\n        return logs.map(log => ({\n            ...log,\n            _id: log._id.toString(),\n            companyId: log.companyId.toString(),\n            agentId: log.agentId.toString(),\n            timestamp: log.timestamp,\n        }));\n\n    } catch (error) {\n        console.error(\"Error fetching activity logs:\", error);\n        return [];\n    }\n}\n"],"names":[],"mappings":";;;;;;IA0FsB,cAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 20, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { getDb } from \"@/lib/db\";\nimport { hashPassword, verifyPassword } from \"@/lib/auth\";\nimport type { Agent, AgentRole, ActivityLog } from \"@/types\";\nimport { Collection, Db, ObjectId } from \"mongodb\";\n\nasync function getAgentsCollection(): Promise<Collection<Agent>> {\n    const db: Db = await getDb();\n    return db.collection<Agent>('agents');\n}\n\nasync function getCompaniesCollection(): Promise<Collection> {\n    const db: Db = await getDb();\n    return db.collection('companies');\n}\n\nasync function getActivityLogsCollection(): Promise<Collection<ActivityLog>> {\n    const db: Db = await getDb();\n    return db.collection<ActivityLog>('activity_logs');\n}\n\nasync function logActivity(companyId: ObjectId, agentId: ObjectId, agentName: string, action: string, details?: string) {\n    try {\n        const logsCollection = await getActivityLogsCollection();\n        await logsCollection.insertOne({\n            companyId,\n            agentId,\n            agentName,\n            action,\n            details,\n            timestamp: new Date(),\n        });\n    } catch (error) {\n        console.error(\"Failed to log activity:\", error);\n    }\n}\n\nexport async function getAgentsByCompany(companyId: string): Promise<Agent[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const agentsCollection = await getAgentsCollection();\n        const agents = await agentsCollection.find({ companyId: new ObjectId(companyId) }, { projection: { password: 0 } }).toArray();\n\n        // Convert ObjectId to string for client-side consumption\n        return agents.map(agent => ({\n            ...agent,\n            _id: agent._id.toString(),\n            id: agent._id.toString(),\n            companyId: agent.companyId?.toString(),\n        }));\n    } catch (error) {\n        console.error(\"Error fetching agents by company:\", error);\n        return [];\n    }\n}\n\n\nexport async function handleLogin(email: string, password_unused: string) {\n    try {\n      const agentsCollection = await getAgentsCollection();\n      const agent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n      if (agent && agent.password) {\n        const isPasswordValid = await verifyPassword(password_unused, agent.password);\n        if (isPasswordValid) {\n          // Omit password and convert to plain object before returning\n          const { password, _id, ...agentData } = agent;\n          const agentWithoutPassword = {\n            id: _id.toString(),\n            _id: _id.toString(),\n            ...agentData,\n            companyId: agent.companyId?.toString()\n          };\n          if (agent.companyId) {\n            await logActivity(agent.companyId, agent._id, agent.name, 'Agent Logged In');\n          }\n          return { success: true, agent: agentWithoutPassword };\n        }\n      }\n      return { success: false, message: \"Invalid email or password.\" };\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return { success: false, message: \"Database connection error. Please check server logs and ensure the MONGODB_URI is correctly configured in your .env file.\" };\n    }\n  };\n\nexport async function createAgent(name: string, email: string, password_unused: string, role: AgentRole, companyId: string, createdBy: { agentId: string; agentName: string }) {\n    try {\n        if (!ObjectId.isValid(companyId) || !ObjectId.isValid(createdBy.agentId)) {\n             return { success: false, message: \"Invalid company or agent ID.\" };\n        }\n        const agentsCollection = await getAgentsCollection();\n        const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n        if (existingAgent) {\n            return { success: false, message: \"An agent with this email already exists.\" };\n        }\n\n        const hashedPassword = await hashPassword(password_unused);\n        const avatar = `https://picsum.photos/seed/${name}/100/100`;\n        const companyObjectId = new ObjectId(companyId);\n\n        const result = await agentsCollection.insertOne({\n            name,\n            email: email.toLowerCase(),\n            password: hashedPassword,\n            role,\n            avatar,\n            id: '', // id will be created by MongoDB\n            phone: '', // Add a default phone number\n            companyId: companyObjectId\n        });\n\n        if (result.insertedId) {\n            const newAgent = await agentsCollection.findOne({ _id: result.insertedId });\n            if (newAgent) {\n                await logActivity(companyObjectId, new ObjectId(createdBy.agentId), createdBy.agentName, 'Agent Created', `Created new agent: ${name} (${email})`);\n                // Omit password and convert to plain object before returning\n                const { password, _id, ...agentData } = newAgent;\n                const agentWithoutPassword = {\n                  _id: _id.toString(),\n                  id: _id.toString(),\n                  ...agentData,\n                  companyId: newAgent.companyId?.toString(),\n                };\n                return { success: true, agent: agentWithoutPassword };\n            }\n        }\n        return { success: false, message: \"Failed to create agent.\" };\n    } catch (error) {\n        console.error(\"Create agent error:\", error);\n        return { success: false, message: \"An unexpected error occurred while creating the agent.\" };\n    }\n}\n\nexport async function handleSignUp(name: string, email: string, password_unused: string) {\n    const db = await getDb();\n    const session = db.client.startSession();\n    try {\n        let newAgentResult;\n        await session.withTransaction(async () => {\n            const companiesCollection = await getCompaniesCollection();\n            const agentsCollection = await getAgentsCollection();\n            const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() }, { session });\n\n            if (existingAgent) {\n                await session.abortTransaction();\n                // This throw will be caught by the outer catch block\n                throw new Error(\"An agent with this email already exists.\");\n            }\n\n            // 1. Create company\n            const companyResult = await companiesCollection.insertOne({\n                name: `${name}'s Company`,\n                createdAt: new Date(),\n            }, { session });\n\n            if (!companyResult.insertedId) {\n                throw new Error(\"Failed to create company.\");\n            }\n            const companyId = companyResult.insertedId;\n\n            // 2. Create admin user for that company\n            const hashedPassword = await hashPassword(password_unused);\n            const avatar = `https://picsum.photos/seed/${name}/100/100`;\n            const agentResult = await agentsCollection.insertOne({\n                name,\n                email: email.toLowerCase(),\n                password: hashedPassword,\n                role: 'admin',\n                avatar,\n                id: '',\n                phone: '',\n                companyId: companyId,\n            }, { session });\n\n             if (!agentResult.insertedId) {\n                throw new Error(\"Failed to create admin agent.\");\n            }\n\n            const newAgent = await agentsCollection.findOne({ _id: agentResult.insertedId }, { session });\n            if (newAgent) {\n                 await logActivity(companyId, newAgent._id, newAgent.name, 'User Registered', `New company '${name}\\'s Company' created.`);\n                 const { password, _id, ...agentData } = newAgent;\n                 newAgentResult = {\n                    id: _id.toString(),\n                    _id: _id.toString(),\n                    ...agentData,\n                    companyId: newAgent.companyId?.toString()\n                };\n            }\n        });\n        return { success: true, agent: newAgentResult };\n    } catch (error: any) {\n        console.error(\"Sign up transaction error:\", error);\n        return { success: false, message: error.message || \"An unexpected error occurred during sign up.\" };\n    } finally {\n        await session.endSession();\n    }\n}\n\nexport async function updateAgentProfile(agentId: string, name: string, email: string, phone: string) {\n    try {\n        if (!ObjectId.isValid(agentId)) {\n            return { success: false, message: \"Invalid agent ID.\" };\n        }\n        const agentObjectId = new ObjectId(agentId);\n        const agentsCollection = await getAgentsCollection();\n\n        const agent = await agentsCollection.findOne({ _id: agentObjectId });\n        if (!agent) {\n             return { success: false, message: \"Agent not found.\" };\n        }\n        \n        const result = await agentsCollection.updateOne(\n            { _id: agentObjectId },\n            { $set: { name, email: email.toLowerCase(), phone } }\n        );\n\n        if (result.matchedCount > 0) {\n            if (agent.companyId) {\n               await logActivity(agent.companyId, agentObjectId, name, 'Profile Updated');\n            }\n            return { success: true, message: \"Profile updated successfully.\" };\n        }\n        return { success: false, message: \"Agent not found or no changes made.\" };\n    } catch (error) {\n        console.error(\"Update profile error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function updateAgentPassword(agentId: string, currentPassword_unused: string, newPassword_unused: string) {\n    try {\n        if (!ObjectId.isValid(agentId)) {\n            return { success: false, message: \"Invalid agent ID.\" };\n        }\n        const agentObjectId = new ObjectId(agentId);\n        const agentsCollection = await getAgentsCollection();\n        const agent = await agentsCollection.findOne({ _id: agentObjectId });\n\n        if (!agent || !agent.password) {\n            return { success: false, message: \"Agent not found.\" };\n        }\n\n        const isPasswordValid = await verifyPassword(currentPassword_unused, agent.password);\n        if (!isPasswordValid) {\n            return { success: false, message: \"Incorrect current password.\" };\n        }\n\n        const hashedNewPassword = await hashPassword(newPassword_unused);\n        const result = await agentsCollection.updateOne(\n            { _id: agentObjectId },\n            { $set: { password: hashedNewPassword } }\n        );\n\n        if (result.modifiedCount > 0) {\n            if(agent.companyId) {\n                await logActivity(agent.companyId, agentObjectId, agent.name, 'Password Updated');\n            }\n            return { success: true, message: \"Password updated successfully.\" };\n        }\n        return { success: false, message: \"Failed to update password.\" };\n\n    } catch (error) {\n        console.error(\"Update password error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function getActivityLogs(companyId: string): Promise<ActivityLog[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const logsCollection = await getActivityLogsCollection();\n        const logs = await logsCollection.find({ companyId: new ObjectId(companyId) }).sort({ timestamp: -1 }).limit(50).toArray();\n\n        return logs.map(log => ({\n            ...log,\n            _id: log._id.toString(),\n            companyId: log.companyId.toString(),\n            agentId: log.agentId.toString(),\n            timestamp: log.timestamp,\n        }));\n\n    } catch (error) {\n        console.error(\"Error fetching activity logs:\", error);\n        return [];\n    }\n}\n"],"names":[],"mappings":";;;;;;IAuCsB,qBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 33, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { getDb } from \"@/lib/db\";\nimport { hashPassword, verifyPassword } from \"@/lib/auth\";\nimport type { Agent, AgentRole, ActivityLog } from \"@/types\";\nimport { Collection, Db, ObjectId } from \"mongodb\";\n\nasync function getAgentsCollection(): Promise<Collection<Agent>> {\n    const db: Db = await getDb();\n    return db.collection<Agent>('agents');\n}\n\nasync function getCompaniesCollection(): Promise<Collection> {\n    const db: Db = await getDb();\n    return db.collection('companies');\n}\n\nasync function getActivityLogsCollection(): Promise<Collection<ActivityLog>> {\n    const db: Db = await getDb();\n    return db.collection<ActivityLog>('activity_logs');\n}\n\nasync function logActivity(companyId: ObjectId, agentId: ObjectId, agentName: string, action: string, details?: string) {\n    try {\n        const logsCollection = await getActivityLogsCollection();\n        await logsCollection.insertOne({\n            companyId,\n            agentId,\n            agentName,\n            action,\n            details,\n            timestamp: new Date(),\n        });\n    } catch (error) {\n        console.error(\"Failed to log activity:\", error);\n    }\n}\n\nexport async function getAgentsByCompany(companyId: string): Promise<Agent[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const agentsCollection = await getAgentsCollection();\n        const agents = await agentsCollection.find({ companyId: new ObjectId(companyId) }, { projection: { password: 0 } }).toArray();\n\n        // Convert ObjectId to string for client-side consumption\n        return agents.map(agent => ({\n            ...agent,\n            _id: agent._id.toString(),\n            id: agent._id.toString(),\n            companyId: agent.companyId?.toString(),\n        }));\n    } catch (error) {\n        console.error(\"Error fetching agents by company:\", error);\n        return [];\n    }\n}\n\n\nexport async function handleLogin(email: string, password_unused: string) {\n    try {\n      const agentsCollection = await getAgentsCollection();\n      const agent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n      if (agent && agent.password) {\n        const isPasswordValid = await verifyPassword(password_unused, agent.password);\n        if (isPasswordValid) {\n          // Omit password and convert to plain object before returning\n          const { password, _id, ...agentData } = agent;\n          const agentWithoutPassword = {\n            id: _id.toString(),\n            _id: _id.toString(),\n            ...agentData,\n            companyId: agent.companyId?.toString()\n          };\n          if (agent.companyId) {\n            await logActivity(agent.companyId, agent._id, agent.name, 'Agent Logged In');\n          }\n          return { success: true, agent: agentWithoutPassword };\n        }\n      }\n      return { success: false, message: \"Invalid email or password.\" };\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return { success: false, message: \"Database connection error. Please check server logs and ensure the MONGODB_URI is correctly configured in your .env file.\" };\n    }\n  };\n\nexport async function createAgent(name: string, email: string, password_unused: string, role: AgentRole, companyId: string, createdBy: { agentId: string; agentName: string }) {\n    try {\n        if (!ObjectId.isValid(companyId) || !ObjectId.isValid(createdBy.agentId)) {\n             return { success: false, message: \"Invalid company or agent ID.\" };\n        }\n        const agentsCollection = await getAgentsCollection();\n        const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n        if (existingAgent) {\n            return { success: false, message: \"An agent with this email already exists.\" };\n        }\n\n        const hashedPassword = await hashPassword(password_unused);\n        const avatar = `https://picsum.photos/seed/${name}/100/100`;\n        const companyObjectId = new ObjectId(companyId);\n\n        const result = await agentsCollection.insertOne({\n            name,\n            email: email.toLowerCase(),\n            password: hashedPassword,\n            role,\n            avatar,\n            id: '', // id will be created by MongoDB\n            phone: '', // Add a default phone number\n            companyId: companyObjectId\n        });\n\n        if (result.insertedId) {\n            const newAgent = await agentsCollection.findOne({ _id: result.insertedId });\n            if (newAgent) {\n                await logActivity(companyObjectId, new ObjectId(createdBy.agentId), createdBy.agentName, 'Agent Created', `Created new agent: ${name} (${email})`);\n                // Omit password and convert to plain object before returning\n                const { password, _id, ...agentData } = newAgent;\n                const agentWithoutPassword = {\n                  _id: _id.toString(),\n                  id: _id.toString(),\n                  ...agentData,\n                  companyId: newAgent.companyId?.toString(),\n                };\n                return { success: true, agent: agentWithoutPassword };\n            }\n        }\n        return { success: false, message: \"Failed to create agent.\" };\n    } catch (error) {\n        console.error(\"Create agent error:\", error);\n        return { success: false, message: \"An unexpected error occurred while creating the agent.\" };\n    }\n}\n\nexport async function handleSignUp(name: string, email: string, password_unused: string) {\n    const db = await getDb();\n    const session = db.client.startSession();\n    try {\n        let newAgentResult;\n        await session.withTransaction(async () => {\n            const companiesCollection = await getCompaniesCollection();\n            const agentsCollection = await getAgentsCollection();\n            const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() }, { session });\n\n            if (existingAgent) {\n                await session.abortTransaction();\n                // This throw will be caught by the outer catch block\n                throw new Error(\"An agent with this email already exists.\");\n            }\n\n            // 1. Create company\n            const companyResult = await companiesCollection.insertOne({\n                name: `${name}'s Company`,\n                createdAt: new Date(),\n            }, { session });\n\n            if (!companyResult.insertedId) {\n                throw new Error(\"Failed to create company.\");\n            }\n            const companyId = companyResult.insertedId;\n\n            // 2. Create admin user for that company\n            const hashedPassword = await hashPassword(password_unused);\n            const avatar = `https://picsum.photos/seed/${name}/100/100`;\n            const agentResult = await agentsCollection.insertOne({\n                name,\n                email: email.toLowerCase(),\n                password: hashedPassword,\n                role: 'admin',\n                avatar,\n                id: '',\n                phone: '',\n                companyId: companyId,\n            }, { session });\n\n             if (!agentResult.insertedId) {\n                throw new Error(\"Failed to create admin agent.\");\n            }\n\n            const newAgent = await agentsCollection.findOne({ _id: agentResult.insertedId }, { session });\n            if (newAgent) {\n                 await logActivity(companyId, newAgent._id, newAgent.name, 'User Registered', `New company '${name}\\'s Company' created.`);\n                 const { password, _id, ...agentData } = newAgent;\n                 newAgentResult = {\n                    id: _id.toString(),\n                    _id: _id.toString(),\n                    ...agentData,\n                    companyId: newAgent.companyId?.toString()\n                };\n            }\n        });\n        return { success: true, agent: newAgentResult };\n    } catch (error: any) {\n        console.error(\"Sign up transaction error:\", error);\n        return { success: false, message: error.message || \"An unexpected error occurred during sign up.\" };\n    } finally {\n        await session.endSession();\n    }\n}\n\nexport async function updateAgentProfile(agentId: string, name: string, email: string, phone: string) {\n    try {\n        if (!ObjectId.isValid(agentId)) {\n            return { success: false, message: \"Invalid agent ID.\" };\n        }\n        const agentObjectId = new ObjectId(agentId);\n        const agentsCollection = await getAgentsCollection();\n\n        const agent = await agentsCollection.findOne({ _id: agentObjectId });\n        if (!agent) {\n             return { success: false, message: \"Agent not found.\" };\n        }\n        \n        const result = await agentsCollection.updateOne(\n            { _id: agentObjectId },\n            { $set: { name, email: email.toLowerCase(), phone } }\n        );\n\n        if (result.matchedCount > 0) {\n            if (agent.companyId) {\n               await logActivity(agent.companyId, agentObjectId, name, 'Profile Updated');\n            }\n            return { success: true, message: \"Profile updated successfully.\" };\n        }\n        return { success: false, message: \"Agent not found or no changes made.\" };\n    } catch (error) {\n        console.error(\"Update profile error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function updateAgentPassword(agentId: string, currentPassword_unused: string, newPassword_unused: string) {\n    try {\n        if (!ObjectId.isValid(agentId)) {\n            return { success: false, message: \"Invalid agent ID.\" };\n        }\n        const agentObjectId = new ObjectId(agentId);\n        const agentsCollection = await getAgentsCollection();\n        const agent = await agentsCollection.findOne({ _id: agentObjectId });\n\n        if (!agent || !agent.password) {\n            return { success: false, message: \"Agent not found.\" };\n        }\n\n        const isPasswordValid = await verifyPassword(currentPassword_unused, agent.password);\n        if (!isPasswordValid) {\n            return { success: false, message: \"Incorrect current password.\" };\n        }\n\n        const hashedNewPassword = await hashPassword(newPassword_unused);\n        const result = await agentsCollection.updateOne(\n            { _id: agentObjectId },\n            { $set: { password: hashedNewPassword } }\n        );\n\n        if (result.modifiedCount > 0) {\n            if(agent.companyId) {\n                await logActivity(agent.companyId, agentObjectId, agent.name, 'Password Updated');\n            }\n            return { success: true, message: \"Password updated successfully.\" };\n        }\n        return { success: false, message: \"Failed to update password.\" };\n\n    } catch (error) {\n        console.error(\"Update password error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function getActivityLogs(companyId: string): Promise<ActivityLog[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const logsCollection = await getActivityLogsCollection();\n        const logs = await logsCollection.find({ companyId: new ObjectId(companyId) }).sort({ timestamp: -1 }).limit(50).toArray();\n\n        return logs.map(log => ({\n            ...log,\n            _id: log._id.toString(),\n            companyId: log.companyId.toString(),\n            agentId: log.agentId.toString(),\n            timestamp: log.timestamp,\n        }));\n\n    } catch (error) {\n        console.error(\"Error fetching activity logs:\", error);\n        return [];\n    }\n}\n"],"names":[],"mappings":";;;;;;IA6MsB,qBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { getDb } from \"@/lib/db\";\nimport { hashPassword, verifyPassword } from \"@/lib/auth\";\nimport type { Agent, AgentRole, ActivityLog } from \"@/types\";\nimport { Collection, Db, ObjectId } from \"mongodb\";\n\nasync function getAgentsCollection(): Promise<Collection<Agent>> {\n    const db: Db = await getDb();\n    return db.collection<Agent>('agents');\n}\n\nasync function getCompaniesCollection(): Promise<Collection> {\n    const db: Db = await getDb();\n    return db.collection('companies');\n}\n\nasync function getActivityLogsCollection(): Promise<Collection<ActivityLog>> {\n    const db: Db = await getDb();\n    return db.collection<ActivityLog>('activity_logs');\n}\n\nasync function logActivity(companyId: ObjectId, agentId: ObjectId, agentName: string, action: string, details?: string) {\n    try {\n        const logsCollection = await getActivityLogsCollection();\n        await logsCollection.insertOne({\n            companyId,\n            agentId,\n            agentName,\n            action,\n            details,\n            timestamp: new Date(),\n        });\n    } catch (error) {\n        console.error(\"Failed to log activity:\", error);\n    }\n}\n\nexport async function getAgentsByCompany(companyId: string): Promise<Agent[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const agentsCollection = await getAgentsCollection();\n        const agents = await agentsCollection.find({ companyId: new ObjectId(companyId) }, { projection: { password: 0 } }).toArray();\n\n        // Convert ObjectId to string for client-side consumption\n        return agents.map(agent => ({\n            ...agent,\n            _id: agent._id.toString(),\n            id: agent._id.toString(),\n            companyId: agent.companyId?.toString(),\n        }));\n    } catch (error) {\n        console.error(\"Error fetching agents by company:\", error);\n        return [];\n    }\n}\n\n\nexport async function handleLogin(email: string, password_unused: string) {\n    try {\n      const agentsCollection = await getAgentsCollection();\n      const agent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n      if (agent && agent.password) {\n        const isPasswordValid = await verifyPassword(password_unused, agent.password);\n        if (isPasswordValid) {\n          // Omit password and convert to plain object before returning\n          const { password, _id, ...agentData } = agent;\n          const agentWithoutPassword = {\n            id: _id.toString(),\n            _id: _id.toString(),\n            ...agentData,\n            companyId: agent.companyId?.toString()\n          };\n          if (agent.companyId) {\n            await logActivity(agent.companyId, agent._id, agent.name, 'Agent Logged In');\n          }\n          return { success: true, agent: agentWithoutPassword };\n        }\n      }\n      return { success: false, message: \"Invalid email or password.\" };\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return { success: false, message: \"Database connection error. Please check server logs and ensure the MONGODB_URI is correctly configured in your .env file.\" };\n    }\n  };\n\nexport async function createAgent(name: string, email: string, password_unused: string, role: AgentRole, companyId: string, createdBy: { agentId: string; agentName: string }) {\n    try {\n        if (!ObjectId.isValid(companyId) || !ObjectId.isValid(createdBy.agentId)) {\n             return { success: false, message: \"Invalid company or agent ID.\" };\n        }\n        const agentsCollection = await getAgentsCollection();\n        const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n        if (existingAgent) {\n            return { success: false, message: \"An agent with this email already exists.\" };\n        }\n\n        const hashedPassword = await hashPassword(password_unused);\n        const avatar = `https://picsum.photos/seed/${name}/100/100`;\n        const companyObjectId = new ObjectId(companyId);\n\n        const result = await agentsCollection.insertOne({\n            name,\n            email: email.toLowerCase(),\n            password: hashedPassword,\n            role,\n            avatar,\n            id: '', // id will be created by MongoDB\n            phone: '', // Add a default phone number\n            companyId: companyObjectId\n        });\n\n        if (result.insertedId) {\n            const newAgent = await agentsCollection.findOne({ _id: result.insertedId });\n            if (newAgent) {\n                await logActivity(companyObjectId, new ObjectId(createdBy.agentId), createdBy.agentName, 'Agent Created', `Created new agent: ${name} (${email})`);\n                // Omit password and convert to plain object before returning\n                const { password, _id, ...agentData } = newAgent;\n                const agentWithoutPassword = {\n                  _id: _id.toString(),\n                  id: _id.toString(),\n                  ...agentData,\n                  companyId: newAgent.companyId?.toString(),\n                };\n                return { success: true, agent: agentWithoutPassword };\n            }\n        }\n        return { success: false, message: \"Failed to create agent.\" };\n    } catch (error) {\n        console.error(\"Create agent error:\", error);\n        return { success: false, message: \"An unexpected error occurred while creating the agent.\" };\n    }\n}\n\nexport async function handleSignUp(name: string, email: string, password_unused: string) {\n    const db = await getDb();\n    const session = db.client.startSession();\n    try {\n        let newAgentResult;\n        await session.withTransaction(async () => {\n            const companiesCollection = await getCompaniesCollection();\n            const agentsCollection = await getAgentsCollection();\n            const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() }, { session });\n\n            if (existingAgent) {\n                await session.abortTransaction();\n                // This throw will be caught by the outer catch block\n                throw new Error(\"An agent with this email already exists.\");\n            }\n\n            // 1. Create company\n            const companyResult = await companiesCollection.insertOne({\n                name: `${name}'s Company`,\n                createdAt: new Date(),\n            }, { session });\n\n            if (!companyResult.insertedId) {\n                throw new Error(\"Failed to create company.\");\n            }\n            const companyId = companyResult.insertedId;\n\n            // 2. Create admin user for that company\n            const hashedPassword = await hashPassword(password_unused);\n            const avatar = `https://picsum.photos/seed/${name}/100/100`;\n            const agentResult = await agentsCollection.insertOne({\n                name,\n                email: email.toLowerCase(),\n                password: hashedPassword,\n                role: 'admin',\n                avatar,\n                id: '',\n                phone: '',\n                companyId: companyId,\n            }, { session });\n\n             if (!agentResult.insertedId) {\n                throw new Error(\"Failed to create admin agent.\");\n            }\n\n            const newAgent = await agentsCollection.findOne({ _id: agentResult.insertedId }, { session });\n            if (newAgent) {\n                 await logActivity(companyId, newAgent._id, newAgent.name, 'User Registered', `New company '${name}\\'s Company' created.`);\n                 const { password, _id, ...agentData } = newAgent;\n                 newAgentResult = {\n                    id: _id.toString(),\n                    _id: _id.toString(),\n                    ...agentData,\n                    companyId: newAgent.companyId?.toString()\n                };\n            }\n        });\n        return { success: true, agent: newAgentResult };\n    } catch (error: any) {\n        console.error(\"Sign up transaction error:\", error);\n        return { success: false, message: error.message || \"An unexpected error occurred during sign up.\" };\n    } finally {\n        await session.endSession();\n    }\n}\n\nexport async function updateAgentProfile(agentId: string, name: string, email: string, phone: string) {\n    try {\n        if (!ObjectId.isValid(agentId)) {\n            return { success: false, message: \"Invalid agent ID.\" };\n        }\n        const agentObjectId = new ObjectId(agentId);\n        const agentsCollection = await getAgentsCollection();\n\n        const agent = await agentsCollection.findOne({ _id: agentObjectId });\n        if (!agent) {\n             return { success: false, message: \"Agent not found.\" };\n        }\n        \n        const result = await agentsCollection.updateOne(\n            { _id: agentObjectId },\n            { $set: { name, email: email.toLowerCase(), phone } }\n        );\n\n        if (result.matchedCount > 0) {\n            if (agent.companyId) {\n               await logActivity(agent.companyId, agentObjectId, name, 'Profile Updated');\n            }\n            return { success: true, message: \"Profile updated successfully.\" };\n        }\n        return { success: false, message: \"Agent not found or no changes made.\" };\n    } catch (error) {\n        console.error(\"Update profile error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function updateAgentPassword(agentId: string, currentPassword_unused: string, newPassword_unused: string) {\n    try {\n        if (!ObjectId.isValid(agentId)) {\n            return { success: false, message: \"Invalid agent ID.\" };\n        }\n        const agentObjectId = new ObjectId(agentId);\n        const agentsCollection = await getAgentsCollection();\n        const agent = await agentsCollection.findOne({ _id: agentObjectId });\n\n        if (!agent || !agent.password) {\n            return { success: false, message: \"Agent not found.\" };\n        }\n\n        const isPasswordValid = await verifyPassword(currentPassword_unused, agent.password);\n        if (!isPasswordValid) {\n            return { success: false, message: \"Incorrect current password.\" };\n        }\n\n        const hashedNewPassword = await hashPassword(newPassword_unused);\n        const result = await agentsCollection.updateOne(\n            { _id: agentObjectId },\n            { $set: { password: hashedNewPassword } }\n        );\n\n        if (result.modifiedCount > 0) {\n            if(agent.companyId) {\n                await logActivity(agent.companyId, agentObjectId, agent.name, 'Password Updated');\n            }\n            return { success: true, message: \"Password updated successfully.\" };\n        }\n        return { success: false, message: \"Failed to update password.\" };\n\n    } catch (error) {\n        console.error(\"Update password error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function getActivityLogs(companyId: string): Promise<ActivityLog[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const logsCollection = await getActivityLogsCollection();\n        const logs = await logsCollection.find({ companyId: new ObjectId(companyId) }).sort({ timestamp: -1 }).limit(50).toArray();\n\n        return logs.map(log => ({\n            ...log,\n            _id: log._id.toString(),\n            companyId: log.companyId.toString(),\n            agentId: log.agentId.toString(),\n            timestamp: log.timestamp,\n        }));\n\n    } catch (error) {\n        console.error(\"Error fetching activity logs:\", error);\n        return [];\n    }\n}\n"],"names":[],"mappings":";;;;;;IA4OsB,sBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { getDb } from \"@/lib/db\";\nimport { hashPassword, verifyPassword } from \"@/lib/auth\";\nimport type { Agent, AgentRole, ActivityLog } from \"@/types\";\nimport { Collection, Db, ObjectId } from \"mongodb\";\n\nasync function getAgentsCollection(): Promise<Collection<Agent>> {\n    const db: Db = await getDb();\n    return db.collection<Agent>('agents');\n}\n\nasync function getCompaniesCollection(): Promise<Collection> {\n    const db: Db = await getDb();\n    return db.collection('companies');\n}\n\nasync function getActivityLogsCollection(): Promise<Collection<ActivityLog>> {\n    const db: Db = await getDb();\n    return db.collection<ActivityLog>('activity_logs');\n}\n\nasync function logActivity(companyId: ObjectId, agentId: ObjectId, agentName: string, action: string, details?: string) {\n    try {\n        const logsCollection = await getActivityLogsCollection();\n        await logsCollection.insertOne({\n            companyId,\n            agentId,\n            agentName,\n            action,\n            details,\n            timestamp: new Date(),\n        });\n    } catch (error) {\n        console.error(\"Failed to log activity:\", error);\n    }\n}\n\nexport async function getAgentsByCompany(companyId: string): Promise<Agent[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const agentsCollection = await getAgentsCollection();\n        const agents = await agentsCollection.find({ companyId: new ObjectId(companyId) }, { projection: { password: 0 } }).toArray();\n\n        // Convert ObjectId to string for client-side consumption\n        return agents.map(agent => ({\n            ...agent,\n            _id: agent._id.toString(),\n            id: agent._id.toString(),\n            companyId: agent.companyId?.toString(),\n        }));\n    } catch (error) {\n        console.error(\"Error fetching agents by company:\", error);\n        return [];\n    }\n}\n\n\nexport async function handleLogin(email: string, password_unused: string) {\n    try {\n      const agentsCollection = await getAgentsCollection();\n      const agent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n      if (agent && agent.password) {\n        const isPasswordValid = await verifyPassword(password_unused, agent.password);\n        if (isPasswordValid) {\n          // Omit password and convert to plain object before returning\n          const { password, _id, ...agentData } = agent;\n          const agentWithoutPassword = {\n            id: _id.toString(),\n            _id: _id.toString(),\n            ...agentData,\n            companyId: agent.companyId?.toString()\n          };\n          if (agent.companyId) {\n            await logActivity(agent.companyId, agent._id, agent.name, 'Agent Logged In');\n          }\n          return { success: true, agent: agentWithoutPassword };\n        }\n      }\n      return { success: false, message: \"Invalid email or password.\" };\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return { success: false, message: \"Database connection error. Please check server logs and ensure the MONGODB_URI is correctly configured in your .env file.\" };\n    }\n  };\n\nexport async function createAgent(name: string, email: string, password_unused: string, role: AgentRole, companyId: string, createdBy: { agentId: string; agentName: string }) {\n    try {\n        if (!ObjectId.isValid(companyId) || !ObjectId.isValid(createdBy.agentId)) {\n             return { success: false, message: \"Invalid company or agent ID.\" };\n        }\n        const agentsCollection = await getAgentsCollection();\n        const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n        if (existingAgent) {\n            return { success: false, message: \"An agent with this email already exists.\" };\n        }\n\n        const hashedPassword = await hashPassword(password_unused);\n        const avatar = `https://picsum.photos/seed/${name}/100/100`;\n        const companyObjectId = new ObjectId(companyId);\n\n        const result = await agentsCollection.insertOne({\n            name,\n            email: email.toLowerCase(),\n            password: hashedPassword,\n            role,\n            avatar,\n            id: '', // id will be created by MongoDB\n            phone: '', // Add a default phone number\n            companyId: companyObjectId\n        });\n\n        if (result.insertedId) {\n            const newAgent = await agentsCollection.findOne({ _id: result.insertedId });\n            if (newAgent) {\n                await logActivity(companyObjectId, new ObjectId(createdBy.agentId), createdBy.agentName, 'Agent Created', `Created new agent: ${name} (${email})`);\n                // Omit password and convert to plain object before returning\n                const { password, _id, ...agentData } = newAgent;\n                const agentWithoutPassword = {\n                  _id: _id.toString(),\n                  id: _id.toString(),\n                  ...agentData,\n                  companyId: newAgent.companyId?.toString(),\n                };\n                return { success: true, agent: agentWithoutPassword };\n            }\n        }\n        return { success: false, message: \"Failed to create agent.\" };\n    } catch (error) {\n        console.error(\"Create agent error:\", error);\n        return { success: false, message: \"An unexpected error occurred while creating the agent.\" };\n    }\n}\n\nexport async function handleSignUp(name: string, email: string, password_unused: string) {\n    const db = await getDb();\n    const session = db.client.startSession();\n    try {\n        let newAgentResult;\n        await session.withTransaction(async () => {\n            const companiesCollection = await getCompaniesCollection();\n            const agentsCollection = await getAgentsCollection();\n            const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() }, { session });\n\n            if (existingAgent) {\n                await session.abortTransaction();\n                // This throw will be caught by the outer catch block\n                throw new Error(\"An agent with this email already exists.\");\n            }\n\n            // 1. Create company\n            const companyResult = await companiesCollection.insertOne({\n                name: `${name}'s Company`,\n                createdAt: new Date(),\n            }, { session });\n\n            if (!companyResult.insertedId) {\n                throw new Error(\"Failed to create company.\");\n            }\n            const companyId = companyResult.insertedId;\n\n            // 2. Create admin user for that company\n            const hashedPassword = await hashPassword(password_unused);\n            const avatar = `https://picsum.photos/seed/${name}/100/100`;\n            const agentResult = await agentsCollection.insertOne({\n                name,\n                email: email.toLowerCase(),\n                password: hashedPassword,\n                role: 'admin',\n                avatar,\n                id: '',\n                phone: '',\n                companyId: companyId,\n            }, { session });\n\n             if (!agentResult.insertedId) {\n                throw new Error(\"Failed to create admin agent.\");\n            }\n\n            const newAgent = await agentsCollection.findOne({ _id: agentResult.insertedId }, { session });\n            if (newAgent) {\n                 await logActivity(companyId, newAgent._id, newAgent.name, 'User Registered', `New company '${name}\\'s Company' created.`);\n                 const { password, _id, ...agentData } = newAgent;\n                 newAgentResult = {\n                    id: _id.toString(),\n                    _id: _id.toString(),\n                    ...agentData,\n                    companyId: newAgent.companyId?.toString()\n                };\n            }\n        });\n        return { success: true, agent: newAgentResult };\n    } catch (error: any) {\n        console.error(\"Sign up transaction error:\", error);\n        return { success: false, message: error.message || \"An unexpected error occurred during sign up.\" };\n    } finally {\n        await session.endSession();\n    }\n}\n\nexport async function updateAgentProfile(agentId: string, name: string, email: string, phone: string) {\n    try {\n        if (!ObjectId.isValid(agentId)) {\n            return { success: false, message: \"Invalid agent ID.\" };\n        }\n        const agentObjectId = new ObjectId(agentId);\n        const agentsCollection = await getAgentsCollection();\n\n        const agent = await agentsCollection.findOne({ _id: agentObjectId });\n        if (!agent) {\n             return { success: false, message: \"Agent not found.\" };\n        }\n        \n        const result = await agentsCollection.updateOne(\n            { _id: agentObjectId },\n            { $set: { name, email: email.toLowerCase(), phone } }\n        );\n\n        if (result.matchedCount > 0) {\n            if (agent.companyId) {\n               await logActivity(agent.companyId, agentObjectId, name, 'Profile Updated');\n            }\n            return { success: true, message: \"Profile updated successfully.\" };\n        }\n        return { success: false, message: \"Agent not found or no changes made.\" };\n    } catch (error) {\n        console.error(\"Update profile error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function updateAgentPassword(agentId: string, currentPassword_unused: string, newPassword_unused: string) {\n    try {\n        if (!ObjectId.isValid(agentId)) {\n            return { success: false, message: \"Invalid agent ID.\" };\n        }\n        const agentObjectId = new ObjectId(agentId);\n        const agentsCollection = await getAgentsCollection();\n        const agent = await agentsCollection.findOne({ _id: agentObjectId });\n\n        if (!agent || !agent.password) {\n            return { success: false, message: \"Agent not found.\" };\n        }\n\n        const isPasswordValid = await verifyPassword(currentPassword_unused, agent.password);\n        if (!isPasswordValid) {\n            return { success: false, message: \"Incorrect current password.\" };\n        }\n\n        const hashedNewPassword = await hashPassword(newPassword_unused);\n        const result = await agentsCollection.updateOne(\n            { _id: agentObjectId },\n            { $set: { password: hashedNewPassword } }\n        );\n\n        if (result.modifiedCount > 0) {\n            if(agent.companyId) {\n                await logActivity(agent.companyId, agentObjectId, agent.name, 'Password Updated');\n            }\n            return { success: true, message: \"Password updated successfully.\" };\n        }\n        return { success: false, message: \"Failed to update password.\" };\n\n    } catch (error) {\n        console.error(\"Update password error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function getActivityLogs(companyId: string): Promise<ActivityLog[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const logsCollection = await getActivityLogsCollection();\n        const logs = await logsCollection.find({ companyId: new ObjectId(companyId) }).sort({ timestamp: -1 }).limit(50).toArray();\n\n        return logs.map(log => ({\n            ...log,\n            _id: log._id.toString(),\n            companyId: log.companyId.toString(),\n            agentId: log.agentId.toString(),\n            timestamp: log.timestamp,\n        }));\n\n    } catch (error) {\n        console.error(\"Error fetching activity logs:\", error);\n        return [];\n    }\n}\n"],"names":[],"mappings":";;;;;;IAkRsB,kBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { getDb } from \"@/lib/db\";\nimport { hashPassword, verifyPassword } from \"@/lib/auth\";\nimport type { Agent, AgentRole, ActivityLog } from \"@/types\";\nimport { Collection, Db, ObjectId } from \"mongodb\";\n\nasync function getAgentsCollection(): Promise<Collection<Agent>> {\n    const db: Db = await getDb();\n    return db.collection<Agent>('agents');\n}\n\nasync function getCompaniesCollection(): Promise<Collection> {\n    const db: Db = await getDb();\n    return db.collection('companies');\n}\n\nasync function getActivityLogsCollection(): Promise<Collection<ActivityLog>> {\n    const db: Db = await getDb();\n    return db.collection<ActivityLog>('activity_logs');\n}\n\nasync function logActivity(companyId: ObjectId, agentId: ObjectId, agentName: string, action: string, details?: string) {\n    try {\n        const logsCollection = await getActivityLogsCollection();\n        await logsCollection.insertOne({\n            companyId,\n            agentId,\n            agentName,\n            action,\n            details,\n            timestamp: new Date(),\n        });\n    } catch (error) {\n        console.error(\"Failed to log activity:\", error);\n    }\n}\n\nexport async function getAgentsByCompany(companyId: string): Promise<Agent[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const agentsCollection = await getAgentsCollection();\n        const agents = await agentsCollection.find({ companyId: new ObjectId(companyId) }, { projection: { password: 0 } }).toArray();\n\n        // Convert ObjectId to string for client-side consumption\n        return agents.map(agent => ({\n            ...agent,\n            _id: agent._id.toString(),\n            id: agent._id.toString(),\n            companyId: agent.companyId?.toString(),\n        }));\n    } catch (error) {\n        console.error(\"Error fetching agents by company:\", error);\n        return [];\n    }\n}\n\n\nexport async function handleLogin(email: string, password_unused: string) {\n    try {\n      const agentsCollection = await getAgentsCollection();\n      const agent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n      if (agent && agent.password) {\n        const isPasswordValid = await verifyPassword(password_unused, agent.password);\n        if (isPasswordValid) {\n          // Omit password and convert to plain object before returning\n          const { password, _id, ...agentData } = agent;\n          const agentWithoutPassword = {\n            id: _id.toString(),\n            _id: _id.toString(),\n            ...agentData,\n            companyId: agent.companyId?.toString()\n          };\n          if (agent.companyId) {\n            await logActivity(agent.companyId, agent._id, agent.name, 'Agent Logged In');\n          }\n          return { success: true, agent: agentWithoutPassword };\n        }\n      }\n      return { success: false, message: \"Invalid email or password.\" };\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return { success: false, message: \"Database connection error. Please check server logs and ensure the MONGODB_URI is correctly configured in your .env file.\" };\n    }\n  };\n\nexport async function createAgent(name: string, email: string, password_unused: string, role: AgentRole, companyId: string, createdBy: { agentId: string; agentName: string }) {\n    try {\n        if (!ObjectId.isValid(companyId) || !ObjectId.isValid(createdBy.agentId)) {\n             return { success: false, message: \"Invalid company or agent ID.\" };\n        }\n        const agentsCollection = await getAgentsCollection();\n        const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n        if (existingAgent) {\n            return { success: false, message: \"An agent with this email already exists.\" };\n        }\n\n        const hashedPassword = await hashPassword(password_unused);\n        const avatar = `https://picsum.photos/seed/${name}/100/100`;\n        const companyObjectId = new ObjectId(companyId);\n\n        const result = await agentsCollection.insertOne({\n            name,\n            email: email.toLowerCase(),\n            password: hashedPassword,\n            role,\n            avatar,\n            id: '', // id will be created by MongoDB\n            phone: '', // Add a default phone number\n            companyId: companyObjectId\n        });\n\n        if (result.insertedId) {\n            const newAgent = await agentsCollection.findOne({ _id: result.insertedId });\n            if (newAgent) {\n                await logActivity(companyObjectId, new ObjectId(createdBy.agentId), createdBy.agentName, 'Agent Created', `Created new agent: ${name} (${email})`);\n                // Omit password and convert to plain object before returning\n                const { password, _id, ...agentData } = newAgent;\n                const agentWithoutPassword = {\n                  _id: _id.toString(),\n                  id: _id.toString(),\n                  ...agentData,\n                  companyId: newAgent.companyId?.toString(),\n                };\n                return { success: true, agent: agentWithoutPassword };\n            }\n        }\n        return { success: false, message: \"Failed to create agent.\" };\n    } catch (error) {\n        console.error(\"Create agent error:\", error);\n        return { success: false, message: \"An unexpected error occurred while creating the agent.\" };\n    }\n}\n\nexport async function handleSignUp(name: string, email: string, password_unused: string) {\n    const db = await getDb();\n    const session = db.client.startSession();\n    try {\n        let newAgentResult;\n        await session.withTransaction(async () => {\n            const companiesCollection = await getCompaniesCollection();\n            const agentsCollection = await getAgentsCollection();\n            const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() }, { session });\n\n            if (existingAgent) {\n                await session.abortTransaction();\n                // This throw will be caught by the outer catch block\n                throw new Error(\"An agent with this email already exists.\");\n            }\n\n            // 1. Create company\n            const companyResult = await companiesCollection.insertOne({\n                name: `${name}'s Company`,\n                createdAt: new Date(),\n            }, { session });\n\n            if (!companyResult.insertedId) {\n                throw new Error(\"Failed to create company.\");\n            }\n            const companyId = companyResult.insertedId;\n\n            // 2. Create admin user for that company\n            const hashedPassword = await hashPassword(password_unused);\n            const avatar = `https://picsum.photos/seed/${name}/100/100`;\n            const agentResult = await agentsCollection.insertOne({\n                name,\n                email: email.toLowerCase(),\n                password: hashedPassword,\n                role: 'admin',\n                avatar,\n                id: '',\n                phone: '',\n                companyId: companyId,\n            }, { session });\n\n             if (!agentResult.insertedId) {\n                throw new Error(\"Failed to create admin agent.\");\n            }\n\n            const newAgent = await agentsCollection.findOne({ _id: agentResult.insertedId }, { session });\n            if (newAgent) {\n                 await logActivity(companyId, newAgent._id, newAgent.name, 'User Registered', `New company '${name}\\'s Company' created.`);\n                 const { password, _id, ...agentData } = newAgent;\n                 newAgentResult = {\n                    id: _id.toString(),\n                    _id: _id.toString(),\n                    ...agentData,\n                    companyId: newAgent.companyId?.toString()\n                };\n            }\n        });\n        return { success: true, agent: newAgentResult };\n    } catch (error: any) {\n        console.error(\"Sign up transaction error:\", error);\n        return { success: false, message: error.message || \"An unexpected error occurred during sign up.\" };\n    } finally {\n        await session.endSession();\n    }\n}\n\nexport async function updateAgentProfile(agentId: string, name: string, email: string, phone: string) {\n    try {\n        if (!ObjectId.isValid(agentId)) {\n            return { success: false, message: \"Invalid agent ID.\" };\n        }\n        const agentObjectId = new ObjectId(agentId);\n        const agentsCollection = await getAgentsCollection();\n\n        const agent = await agentsCollection.findOne({ _id: agentObjectId });\n        if (!agent) {\n             return { success: false, message: \"Agent not found.\" };\n        }\n        \n        const result = await agentsCollection.updateOne(\n            { _id: agentObjectId },\n            { $set: { name, email: email.toLowerCase(), phone } }\n        );\n\n        if (result.matchedCount > 0) {\n            if (agent.companyId) {\n               await logActivity(agent.companyId, agentObjectId, name, 'Profile Updated');\n            }\n            return { success: true, message: \"Profile updated successfully.\" };\n        }\n        return { success: false, message: \"Agent not found or no changes made.\" };\n    } catch (error) {\n        console.error(\"Update profile error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function updateAgentPassword(agentId: string, currentPassword_unused: string, newPassword_unused: string) {\n    try {\n        if (!ObjectId.isValid(agentId)) {\n            return { success: false, message: \"Invalid agent ID.\" };\n        }\n        const agentObjectId = new ObjectId(agentId);\n        const agentsCollection = await getAgentsCollection();\n        const agent = await agentsCollection.findOne({ _id: agentObjectId });\n\n        if (!agent || !agent.password) {\n            return { success: false, message: \"Agent not found.\" };\n        }\n\n        const isPasswordValid = await verifyPassword(currentPassword_unused, agent.password);\n        if (!isPasswordValid) {\n            return { success: false, message: \"Incorrect current password.\" };\n        }\n\n        const hashedNewPassword = await hashPassword(newPassword_unused);\n        const result = await agentsCollection.updateOne(\n            { _id: agentObjectId },\n            { $set: { password: hashedNewPassword } }\n        );\n\n        if (result.modifiedCount > 0) {\n            if(agent.companyId) {\n                await logActivity(agent.companyId, agentObjectId, agent.name, 'Password Updated');\n            }\n            return { success: true, message: \"Password updated successfully.\" };\n        }\n        return { success: false, message: \"Failed to update password.\" };\n\n    } catch (error) {\n        console.error(\"Update password error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function getActivityLogs(companyId: string): Promise<ActivityLog[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const logsCollection = await getActivityLogsCollection();\n        const logs = await logsCollection.find({ companyId: new ObjectId(companyId) }).sort({ timestamp: -1 }).limit(50).toArray();\n\n        return logs.map(log => ({\n            ...log,\n            _id: log._id.toString(),\n            companyId: log.companyId.toString(),\n            agentId: log.agentId.toString(),\n            timestamp: log.timestamp,\n        }));\n\n    } catch (error) {\n        console.error(\"Error fetching activity logs:\", error);\n        return [];\n    }\n}\n"],"names":[],"mappings":";;;;;;IA6DsB,cAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 85, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { getDb } from \"@/lib/db\";\nimport { hashPassword, verifyPassword } from \"@/lib/auth\";\nimport type { Agent, AgentRole, ActivityLog } from \"@/types\";\nimport { Collection, Db, ObjectId } from \"mongodb\";\n\nasync function getAgentsCollection(): Promise<Collection<Agent>> {\n    const db: Db = await getDb();\n    return db.collection<Agent>('agents');\n}\n\nasync function getCompaniesCollection(): Promise<Collection> {\n    const db: Db = await getDb();\n    return db.collection('companies');\n}\n\nasync function getActivityLogsCollection(): Promise<Collection<ActivityLog>> {\n    const db: Db = await getDb();\n    return db.collection<ActivityLog>('activity_logs');\n}\n\nasync function logActivity(companyId: ObjectId, agentId: ObjectId, agentName: string, action: string, details?: string) {\n    try {\n        const logsCollection = await getActivityLogsCollection();\n        await logsCollection.insertOne({\n            companyId,\n            agentId,\n            agentName,\n            action,\n            details,\n            timestamp: new Date(),\n        });\n    } catch (error) {\n        console.error(\"Failed to log activity:\", error);\n    }\n}\n\nexport async function getAgentsByCompany(companyId: string): Promise<Agent[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const agentsCollection = await getAgentsCollection();\n        const agents = await agentsCollection.find({ companyId: new ObjectId(companyId) }, { projection: { password: 0 } }).toArray();\n\n        // Convert ObjectId to string for client-side consumption\n        return agents.map(agent => ({\n            ...agent,\n            _id: agent._id.toString(),\n            id: agent._id.toString(),\n            companyId: agent.companyId?.toString(),\n        }));\n    } catch (error) {\n        console.error(\"Error fetching agents by company:\", error);\n        return [];\n    }\n}\n\n\nexport async function handleLogin(email: string, password_unused: string) {\n    try {\n      const agentsCollection = await getAgentsCollection();\n      const agent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n      if (agent && agent.password) {\n        const isPasswordValid = await verifyPassword(password_unused, agent.password);\n        if (isPasswordValid) {\n          // Omit password and convert to plain object before returning\n          const { password, _id, ...agentData } = agent;\n          const agentWithoutPassword = {\n            id: _id.toString(),\n            _id: _id.toString(),\n            ...agentData,\n            companyId: agent.companyId?.toString()\n          };\n          if (agent.companyId) {\n            await logActivity(agent.companyId, agent._id, agent.name, 'Agent Logged In');\n          }\n          return { success: true, agent: agentWithoutPassword };\n        }\n      }\n      return { success: false, message: \"Invalid email or password.\" };\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return { success: false, message: \"Database connection error. Please check server logs and ensure the MONGODB_URI is correctly configured in your .env file.\" };\n    }\n  };\n\nexport async function createAgent(name: string, email: string, password_unused: string, role: AgentRole, companyId: string, createdBy: { agentId: string; agentName: string }) {\n    try {\n        if (!ObjectId.isValid(companyId) || !ObjectId.isValid(createdBy.agentId)) {\n             return { success: false, message: \"Invalid company or agent ID.\" };\n        }\n        const agentsCollection = await getAgentsCollection();\n        const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() });\n\n        if (existingAgent) {\n            return { success: false, message: \"An agent with this email already exists.\" };\n        }\n\n        const hashedPassword = await hashPassword(password_unused);\n        const avatar = `https://picsum.photos/seed/${name}/100/100`;\n        const companyObjectId = new ObjectId(companyId);\n\n        const result = await agentsCollection.insertOne({\n            name,\n            email: email.toLowerCase(),\n            password: hashedPassword,\n            role,\n            avatar,\n            id: '', // id will be created by MongoDB\n            phone: '', // Add a default phone number\n            companyId: companyObjectId\n        });\n\n        if (result.insertedId) {\n            const newAgent = await agentsCollection.findOne({ _id: result.insertedId });\n            if (newAgent) {\n                await logActivity(companyObjectId, new ObjectId(createdBy.agentId), createdBy.agentName, 'Agent Created', `Created new agent: ${name} (${email})`);\n                // Omit password and convert to plain object before returning\n                const { password, _id, ...agentData } = newAgent;\n                const agentWithoutPassword = {\n                  _id: _id.toString(),\n                  id: _id.toString(),\n                  ...agentData,\n                  companyId: newAgent.companyId?.toString(),\n                };\n                return { success: true, agent: agentWithoutPassword };\n            }\n        }\n        return { success: false, message: \"Failed to create agent.\" };\n    } catch (error) {\n        console.error(\"Create agent error:\", error);\n        return { success: false, message: \"An unexpected error occurred while creating the agent.\" };\n    }\n}\n\nexport async function handleSignUp(name: string, email: string, password_unused: string) {\n    const db = await getDb();\n    const session = db.client.startSession();\n    try {\n        let newAgentResult;\n        await session.withTransaction(async () => {\n            const companiesCollection = await getCompaniesCollection();\n            const agentsCollection = await getAgentsCollection();\n            const existingAgent = await agentsCollection.findOne({ email: email.toLowerCase() }, { session });\n\n            if (existingAgent) {\n                await session.abortTransaction();\n                // This throw will be caught by the outer catch block\n                throw new Error(\"An agent with this email already exists.\");\n            }\n\n            // 1. Create company\n            const companyResult = await companiesCollection.insertOne({\n                name: `${name}'s Company`,\n                createdAt: new Date(),\n            }, { session });\n\n            if (!companyResult.insertedId) {\n                throw new Error(\"Failed to create company.\");\n            }\n            const companyId = companyResult.insertedId;\n\n            // 2. Create admin user for that company\n            const hashedPassword = await hashPassword(password_unused);\n            const avatar = `https://picsum.photos/seed/${name}/100/100`;\n            const agentResult = await agentsCollection.insertOne({\n                name,\n                email: email.toLowerCase(),\n                password: hashedPassword,\n                role: 'admin',\n                avatar,\n                id: '',\n                phone: '',\n                companyId: companyId,\n            }, { session });\n\n             if (!agentResult.insertedId) {\n                throw new Error(\"Failed to create admin agent.\");\n            }\n\n            const newAgent = await agentsCollection.findOne({ _id: agentResult.insertedId }, { session });\n            if (newAgent) {\n                 await logActivity(companyId, newAgent._id, newAgent.name, 'User Registered', `New company '${name}\\'s Company' created.`);\n                 const { password, _id, ...agentData } = newAgent;\n                 newAgentResult = {\n                    id: _id.toString(),\n                    _id: _id.toString(),\n                    ...agentData,\n                    companyId: newAgent.companyId?.toString()\n                };\n            }\n        });\n        return { success: true, agent: newAgentResult };\n    } catch (error: any) {\n        console.error(\"Sign up transaction error:\", error);\n        return { success: false, message: error.message || \"An unexpected error occurred during sign up.\" };\n    } finally {\n        await session.endSession();\n    }\n}\n\nexport async function updateAgentProfile(agentId: string, name: string, email: string, phone: string) {\n    try {\n        if (!ObjectId.isValid(agentId)) {\n            return { success: false, message: \"Invalid agent ID.\" };\n        }\n        const agentObjectId = new ObjectId(agentId);\n        const agentsCollection = await getAgentsCollection();\n\n        const agent = await agentsCollection.findOne({ _id: agentObjectId });\n        if (!agent) {\n             return { success: false, message: \"Agent not found.\" };\n        }\n        \n        const result = await agentsCollection.updateOne(\n            { _id: agentObjectId },\n            { $set: { name, email: email.toLowerCase(), phone } }\n        );\n\n        if (result.matchedCount > 0) {\n            if (agent.companyId) {\n               await logActivity(agent.companyId, agentObjectId, name, 'Profile Updated');\n            }\n            return { success: true, message: \"Profile updated successfully.\" };\n        }\n        return { success: false, message: \"Agent not found or no changes made.\" };\n    } catch (error) {\n        console.error(\"Update profile error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function updateAgentPassword(agentId: string, currentPassword_unused: string, newPassword_unused: string) {\n    try {\n        if (!ObjectId.isValid(agentId)) {\n            return { success: false, message: \"Invalid agent ID.\" };\n        }\n        const agentObjectId = new ObjectId(agentId);\n        const agentsCollection = await getAgentsCollection();\n        const agent = await agentsCollection.findOne({ _id: agentObjectId });\n\n        if (!agent || !agent.password) {\n            return { success: false, message: \"Agent not found.\" };\n        }\n\n        const isPasswordValid = await verifyPassword(currentPassword_unused, agent.password);\n        if (!isPasswordValid) {\n            return { success: false, message: \"Incorrect current password.\" };\n        }\n\n        const hashedNewPassword = await hashPassword(newPassword_unused);\n        const result = await agentsCollection.updateOne(\n            { _id: agentObjectId },\n            { $set: { password: hashedNewPassword } }\n        );\n\n        if (result.modifiedCount > 0) {\n            if(agent.companyId) {\n                await logActivity(agent.companyId, agentObjectId, agent.name, 'Password Updated');\n            }\n            return { success: true, message: \"Password updated successfully.\" };\n        }\n        return { success: false, message: \"Failed to update password.\" };\n\n    } catch (error) {\n        console.error(\"Update password error:\", error);\n        return { success: false, message: \"An unexpected error occurred.\" };\n    }\n}\n\nexport async function getActivityLogs(companyId: string): Promise<ActivityLog[]> {\n    try {\n        if (!companyId || !ObjectId.isValid(companyId)) {\n            return [];\n        }\n        const logsCollection = await getActivityLogsCollection();\n        const logs = await logsCollection.find({ companyId: new ObjectId(companyId) }).sort({ timestamp: -1 }).limit(50).toArray();\n\n        return logs.map(log => ({\n            ...log,\n            _id: log._id.toString(),\n            companyId: log.companyId.toString(),\n            agentId: log.agentId.toString(),\n            timestamp: log.timestamp,\n        }));\n\n    } catch (error) {\n        console.error(\"Error fetching activity logs:\", error);\n        return [];\n    }\n}\n"],"names":[],"mappings":";;;;;;IA2IsB,eAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["\n\"use client\";\n\nimport * as React from \"react\";\nimport { ChatLayout } from \"@/components/dashboard/chat-layout\";\nimport { VerticalNav } from \"@/components/dashboard/vertical-nav\";\nimport { ContactsView } from \"@/components/dashboard/contacts-view\";\nimport { AgentsView } from \"@/components/dashboard/agents-view\";\nimport { DashboardView } from \"@/components/dashboard/dashboard-view\";\nimport type { Agent, UserProfile } from \"@/types\";\nimport { AnnouncementsView } from \"@/components/dashboard/announcements-view\";\nimport { mockAgents } from \"@/lib/mock-data\";\nimport { SettingsDialog } from \"@/components/dashboard/settings-dialog\";\nimport { CampaignsView } from \"@/components/dashboard/campaigns-view\";\nimport { MyPerformanceView } from \"@/components/dashboard/my-performance-view\";\nimport { AuthForm } from \"@/components/dashboard/auth-form\";\nimport { handleLogin, handleSignUp } from \"@/app/actions\";\n\n\nexport type View = \"Chat\" | \"Contacts\" | \"Agents\" | \"Dashboard\" | \"Announcements\" | \"History\" | \"Payments\" | \"Settings\" | \"System Settings\" | \"Campaigns\" | \"My Performance\";\n\nexport default function Home({ params, searchParams }: { params: {}; searchParams: {} }) {\n  React.use(params);\n  React.use(searchParams);\n  \n  const [activeView, setActiveView] = React.useState<View>(\"Chat\");\n  const [isNavOpen, setIsNavOpen] = React.useState(false);\n  const [currentUser, setCurrentUser] = React.useState<UserProfile | null>(null);\n  const [isSettingsOpen, setIsSettingsOpen] = React.useState(false);\n\n  const onLogin = async (email: string, password_unused: string) => {\n    const result = await handleLogin(email, password_unused);\n    if (result.success && result.agent) {\n      const agent = result.agent as UserProfile;\n       setCurrentUser(agent);\n\n      if (agent.role === 'admin') {\n        setActiveView('Dashboard');\n      } else {\n        setActiveView('Chat');\n      }\n    }\n    return { success: result.success, message: result.message };\n  }\n\n  const onSignUp = async (name: string, email: string, password_unused: string) => {\n    const result = await handleSignUp(name, email, password_unused);\n    if (result.success && result.agent) {\n       setCurrentUser(result.agent as UserProfile);\n       setActiveView('Dashboard');\n    }\n    return result;\n  }\n\n  const handleLogout = () => {\n    setCurrentUser(null);\n    setActiveView('Chat');\n  };\n\n  const renderView = () => {\n    const props = { onMenuClick: () => setIsNavOpen(true), user: currentUser };\n    switch (activeView) {\n      case \"Chat\":\n        return <ChatLayout user={currentUser} onMenuClick={() => setIsNavOpen(true)} />;\n      case \"Contacts\":\n        return <ContactsView {...props} />;\n      case \"Agents\":\n        return <AgentsView {...props} />;\n      case \"Dashboard\":\n        return <DashboardView {...props} />;\n      case \"Announcements\":\n        return <AnnouncementsView {...props} />;\n      case \"My Performance\":\n        return <MyPerformanceView {...props} />;\n      case \"Campaigns\":\n         return <CampaignsView {...props} />;\n      default:\n        return <ChatLayout user={currentUser} onMenuClick={() => setIsNavOpen(true)} />;\n    }\n  };\n\n  if (!currentUser) {\n    return (\n      <main className=\"flex h-screen w-full items-center justify-center bg-background p-4 overflow-hidden auth-page-background\">\n        <AuthForm onLogin={onLogin} onSignUp={onSignUp}/>\n      </main>\n    );\n  }\n\n  return (\n    <main className=\"flex h-screen bg-background\">\n      <SettingsDialog open={isSettingsOpen} onOpenChange={setIsSettingsOpen} user={currentUser} />\n      <VerticalNav \n          activeView={activeView} \n          setActiveView={setActiveView} \n          user={currentUser}\n          onLogout={handleLogout}\n          isOpen={isNavOpen}\n          setIsOpen={setIsNavOpen}\n          onSettingsClick={() => setIsSettingsOpen(true)}\n      />\n      <div className=\"flex-1 md:pl-[70px] min-w-0\">\n          {renderView()}\n      </div>\n    </main>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAfA;;;;;;;;;;;;;;AAoBe,SAAS,KAAK,EAAE,MAAM,EAAE,YAAY,EAAoC;IACrF,CAAA,GAAA,qMAAA,CAAA,MAAS,AAAD,EAAE;IACV,CAAA,GAAA,qMAAA,CAAA,MAAS,AAAD,EAAE;IAEV,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAc,AAAD,EAAQ;IACzD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAc,AAAD,EAAE;IACjD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAc,AAAD,EAAsB;IACzE,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAc,AAAD,EAAE;IAE3D,MAAM,UAAU,OAAO,OAAe;QACpC,MAAM,SAAS,MAAM,CAAA,GAAA,kJAAA,CAAA,cAAW,AAAD,EAAE,OAAO;QACxC,IAAI,OAAO,OAAO,IAAI,OAAO,KAAK,EAAE;YAClC,MAAM,QAAQ,OAAO,KAAK;YACzB,eAAe;YAEhB,IAAI,MAAM,IAAI,KAAK,SAAS;gBAC1B,cAAc;YAChB,OAAO;gBACL,cAAc;YAChB;QACF;QACA,OAAO;YAAE,SAAS,OAAO,OAAO;YAAE,SAAS,OAAO,OAAO;QAAC;IAC5D;IAEA,MAAM,WAAW,OAAO,MAAc,OAAe;QACnD,MAAM,SAAS,MAAM,CAAA,GAAA,kJAAA,CAAA,eAAY,AAAD,EAAE,MAAM,OAAO;QAC/C,IAAI,OAAO,OAAO,IAAI,OAAO,KAAK,EAAE;YACjC,eAAe,OAAO,KAAK;YAC3B,cAAc;QACjB;QACA,OAAO;IACT;IAEA,MAAM,eAAe;QACnB,eAAe;QACf,cAAc;IAChB;IAEA,MAAM,aAAa;QACjB,MAAM,QAAQ;YAAE,aAAa,IAAM,aAAa;YAAO,MAAM;QAAY;QACzE,OAAQ;YACN,KAAK;gBACH,qBAAO,8OAAC,iJAAA,CAAA,aAAU;oBAAC,MAAM;oBAAa,aAAa,IAAM,aAAa;;;;;;YACxE,KAAK;gBACH,qBAAO,8OAAC,mJAAA,CAAA,eAAY;oBAAE,GAAG,KAAK;;;;;;YAChC,KAAK;gBACH,qBAAO,8OAAC,iJAAA,CAAA,aAAU;oBAAE,GAAG,KAAK;;;;;;YAC9B,KAAK;gBACH,qBAAO,8OAAC,oJAAA,CAAA,gBAAa;oBAAE,GAAG,KAAK;;;;;;YACjC,KAAK;gBACH,qBAAO,8OAAC,wJAAA,CAAA,oBAAiB;oBAAE,GAAG,KAAK;;;;;;YACrC,KAAK;gBACH,qBAAO,8OAAC,4JAAA,CAAA,oBAAiB;oBAAE,GAAG,KAAK;;;;;;YACrC,KAAK;gBACF,qBAAO,8OAAC,oJAAA,CAAA,gBAAa;oBAAE,GAAG,KAAK;;;;;;YAClC;gBACE,qBAAO,8OAAC,iJAAA,CAAA,aAAU;oBAAC,MAAM;oBAAa,aAAa,IAAM,aAAa;;;;;;QAC1E;IACF;IAEA,IAAI,CAAC,aAAa;QAChB,qBACE,8OAAC;YAAK,WAAU;sBACd,cAAA,8OAAC,+IAAA,CAAA,WAAQ;gBAAC,SAAS;gBAAS,UAAU;;;;;;;;;;;IAG5C;IAEA,qBACE,8OAAC;QAAK,WAAU;;0BACd,8OAAC,qJAAA,CAAA,iBAAc;gBAAC,MAAM;gBAAgB,cAAc;gBAAmB,MAAM;;;;;;0BAC7E,8OAAC,kJAAA,CAAA,cAAW;gBACR,YAAY;gBACZ,eAAe;gBACf,MAAM;gBACN,UAAU;gBACV,QAAQ;gBACR,WAAW;gBACX,iBAAiB,IAAM,kBAAkB;;;;;;0BAE7C,8OAAC;gBAAI,WAAU;0BACV;;;;;;;;;;;;AAIX","debugId":null}}]
}