module.exports = {

"[project]/src/app/data:1378d6 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"7efa29b2bf7fa82364aadbf5011c649e7f21f09fbf":"createAgent"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "createAgent": (()=>createAgent)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var createAgent = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("7efa29b2bf7fa82364aadbf5011c649e7f21f09fbf", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "createAgent"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:c18aaa [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"4087786a1113f54129434f2a7816d4f589ebf1b846":"getAgentsByCompany"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getAgentsByCompany": (()=>getAgentsByCompany)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var getAgentsByCompany = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("4087786a1113f54129434f2a7816d4f589ebf1b846", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getAgentsByCompany"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:3f2bf9 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40ff6278859af3f524ec2ac84e79db5390255a1668":"createAnnouncement"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "createAnnouncement": (()=>createAnnouncement)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var createAnnouncement = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("40ff6278859af3f524ec2ac84e79db5390255a1668", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "createAnnouncement"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:bb6384 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"409b841e613ce80e5c40df0364f6df47d80421d363":"getAnnouncementsByCompany"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getAnnouncementsByCompany": (()=>getAnnouncementsByCompany)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var getAnnouncementsByCompany = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("409b841e613ce80e5c40df0364f6df47d80421d363", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getAnnouncementsByCompany"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:d95aac [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"60daecd654edd9aad0f66818f3643edb5b83926f6b":"markAnnouncementAsRead"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "markAnnouncementAsRead": (()=>markAnnouncementAsRead)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var markAnnouncementAsRead = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("60daecd654edd9aad0f66818f3643edb5b83926f6b", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "markAnnouncementAsRead"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:4ac835 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"70fcfed8bffc4caf060f93474e4a8996b303b4b0fc":"addCommentToAnnouncement"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "addCommentToAnnouncement": (()=>addCommentToAnnouncement)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var addCommentToAnnouncement = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("70fcfed8bffc4caf060f93474e4a8996b303b4b0fc", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "addCommentToAnnouncement"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:23a835 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"6049a27b16f34690f84c6af4f9a048cb3293c23e61":"handleLogin"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "handleLogin": (()=>handleLogin)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var handleLogin = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("6049a27b16f34690f84c6af4f9a048cb3293c23e61", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "handleLogin"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:155c26 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"70780065eead8858964f97f44aaa44c48f608e84ba":"handleSignUp"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "handleSignUp": (()=>handleSignUp)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var handleSignUp = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("70780065eead8858964f97f44aaa44c48f608e84ba", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "handleSignUp"); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4vYWN0aW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbid1c2Ugc2VydmVyJztcblxuaW1wb3J0IHsgZ2V0RGIgfSBmcm9tIFwiQC9saWIvZGJcIjtcbmltcG9ydCB7IGhhc2hQYXNzd29yZCwgdmVyaWZ5UGFzc3dvcmQgfSBmcm9tIFwiQC9saWIvYXV0aFwiO1xuaW1wb3J0IHR5cGUgeyBBZ2VudCwgQWdlbnRSb2xlLCBBbm5vdW5jZW1lbnQsIENvbXBhbnksIENvbW1lbnQsIEFjdGl2aXR5TG9nIH0gZnJvbSBcIkAvdHlwZXNcIjtcbmltcG9ydCB7IENvbGxlY3Rpb24sIERiLCBPYmplY3RJZCB9IGZyb20gXCJtb25nb2RiXCI7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEFnZW50c0NvbGxlY3Rpb24oKTogUHJvbWlzZTxDb2xsZWN0aW9uPEFnZW50Pj4ge1xuICAgIGNvbnN0IGRiOiBEYiA9IGF3YWl0IGdldERiKCk7XG4gICAgcmV0dXJuIGRiLmNvbGxlY3Rpb248QWdlbnQ+KCdhZ2VudHMnKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0Q29tcGFuaWVzQ29sbGVjdGlvbigpOiBQcm9taXNlPENvbGxlY3Rpb248Q29tcGFueT4+IHtcbiAgICBjb25zdCBkYjogRGIgPSBhd2FpdCBnZXREYigpO1xuICAgIHJldHVybiBkYi5jb2xsZWN0aW9uPENvbXBhbnk+KCdjb21wYW5pZXMnKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0QW5ub3VuY2VtZW50c0NvbGxlY3Rpb24oKTogUHJvbWlzZTxDb2xsZWN0aW9uPEFubm91bmNlbWVudD4+IHtcbiAgICBjb25zdCBkYjogRGIgPSBhd2FpdCBnZXREYigpO1xuICAgIHJldHVybiBkYi5jb2xsZWN0aW9uPEFubm91bmNlbWVudD4oJ2Fubm91bmNlbWVudHMnKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0QWN0aXZpdHlMb2dzQ29sbGVjdGlvbigpOiBQcm9taXNlPENvbGxlY3Rpb248QWN0aXZpdHlMb2c+PiB7XG4gICAgY29uc3QgZGI6IERiID0gYXdhaXQgZ2V0RGIoKTtcbiAgICByZXR1cm4gZGIuY29sbGVjdGlvbjxBY3Rpdml0eUxvZz4oJ2FjdGl2aXR5X2xvZ3MnKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9nQWN0aXZpdHkoY29tcGFueUlkOiBzdHJpbmcgfCBPYmplY3RJZCwgYWdlbnROYW1lOiBzdHJpbmcsIGFjdGlvbjogc3RyaW5nLCBkZXRhaWxzOiBzdHJpbmcpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBsb2dzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFjdGl2aXR5TG9nc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgYXdhaXQgbG9nc0NvbGxlY3Rpb24uaW5zZXJ0T25lKHtcbiAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCksXG4gICAgICAgICAgICBhZ2VudE5hbWUsXG4gICAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgICBkZXRhaWxzLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIGxvZyBhY3Rpdml0eTpcIiwgZXJyb3IpO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFnZW50c0J5Q29tcGFueShjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8QWdlbnRbXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghY29tcGFueUlkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNvbXBhbnlJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhZ2VudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWdlbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBhZ2VudHMgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmZpbmQoeyBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpIH0sIHsgcHJvamVjdGlvbjogeyBwYXNzd29yZDogMCB9IH0pLnRvQXJyYXkoKTtcblxuICAgICAgICByZXR1cm4gYWdlbnRzLm1hcChhZ2VudCA9PiAoe1xuICAgICAgICAgICAgLi4uYWdlbnQsXG4gICAgICAgICAgICBfaWQ6IGFnZW50Ll9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgaWQ6IGFnZW50Ll9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgY29tcGFueUlkOiBhZ2VudC5jb21wYW55SWQ/LnRvU3RyaW5nKCksXG4gICAgICAgIH0pKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgYWdlbnRzIGJ5IGNvbXBhbnk6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUFubm91bmNlbWVudChkYXRhOiB7IHRpdGxlOiBzdHJpbmc7IGNvbnRlbnQ6IHN0cmluZzsgY2F0ZWdvcnk6IHN0cmluZzsgYXV0aG9ySWQ6IHN0cmluZzsgY29tcGFueUlkOiBzdHJpbmcgfSk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBtZXNzYWdlPzogc3RyaW5nOyBhbm5vdW5jZW1lbnQ/OiBBbm5vdW5jZW1lbnQgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QW5ub3VuY2VtZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcblxuICAgICAgICBjb25zdCBhdXRob3IgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBfaWQ6IG5ldyBPYmplY3RJZChkYXRhLmF1dGhvcklkKSB9KTtcbiAgICAgICAgaWYgKCFhdXRob3IpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkF1dGhvciBub3QgZm91bmQuXCIgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5ld0Fubm91bmNlbWVudDogT21pdDxBbm5vdW5jZW1lbnQsICdpZCcgfCAnX2lkJz4gPSB7XG4gICAgICAgICAgICB0aXRsZTogZGF0YS50aXRsZSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGRhdGEuY29udGVudCxcbiAgICAgICAgICAgIGNhdGVnb3J5OiBkYXRhLmNhdGVnb3J5IGFzIGFueSxcbiAgICAgICAgICAgIGF1dGhvcjoge1xuICAgICAgICAgICAgICAgIGlkOiBhdXRob3IuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgbmFtZTogYXV0aG9yLm5hbWUsXG4gICAgICAgICAgICAgICAgYXZhdGFyOiBhdXRob3IuYXZhdGFyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoZGF0YS5jb21wYW55SWQpLFxuICAgICAgICAgICAgZGF0ZTogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgcmVhZEJ5OiBbXSxcbiAgICAgICAgICAgIGNvbW1lbnRzOiBbXSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhbm5vdW5jZW1lbnRzQ29sbGVjdGlvbi5pbnNlcnRPbmUobmV3QW5ub3VuY2VtZW50IGFzIGFueSk7XG4gICAgICAgIGF3YWl0IGxvZ0FjdGl2aXR5KGRhdGEuY29tcGFueUlkLCBhdXRob3IubmFtZSwgJ0NyZWF0ZSBBbm5vdW5jZW1lbnQnLCBgUHVibGlzaGVkOiBcIiR7ZGF0YS50aXRsZX1cImApO1xuXG5cbiAgICAgICAgaWYgKHJlc3VsdC5pbnNlcnRlZElkKSB7XG4gICAgICAgICAgICBjb25zdCBjcmVhdGVkQW5ub3VuY2VtZW50OiBBbm5vdW5jZW1lbnQgPSB7XG4gICAgICAgICAgICAgICAgLi4uKG5ld0Fubm91bmNlbWVudCBhcyBBbm5vdW5jZW1lbnQpLFxuICAgICAgICAgICAgICAgIF9pZDogcmVzdWx0Lmluc2VydGVkSWQsXG4gICAgICAgICAgICAgICAgaWQ6IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBkYXRhLmNvbXBhbnlJZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBhbm5vdW5jZW1lbnQ6IGNyZWF0ZWRBbm5vdW5jZW1lbnQgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkZhaWxlZCB0byBjcmVhdGUgYW5ub3VuY2VtZW50LlwiIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkNyZWF0ZSBhbm5vdW5jZW1lbnQgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZC5cIiB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFubm91bmNlbWVudHNCeUNvbXBhbnkoY29tcGFueUlkOiBzdHJpbmcpOiBQcm9taXNlPEFubm91bmNlbWVudFtdPiB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKCFjb21wYW55SWQgfHwgIU9iamVjdElkLmlzVmFsaWQoY29tcGFueUlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QW5ub3VuY2VtZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgYW5ub3VuY2VtZW50cyA9IGF3YWl0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uLmZpbmQoeyBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpIH0pLnNvcnQoeyBkYXRlOiAtMSB9KS50b0FycmF5KCk7XG5cbiAgICAgICAgcmV0dXJuIGFubm91bmNlbWVudHMubWFwKGFubm91bmNlbWVudCA9PiAoe1xuICAgICAgICAgICAgLi4uYW5ub3VuY2VtZW50LFxuICAgICAgICAgICAgX2lkOiBhbm5vdW5jZW1lbnQuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBpZDogYW5ub3VuY2VtZW50Ll9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgY29tcGFueUlkOiBhbm5vdW5jZW1lbnQuY29tcGFueUlkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICByZWFkQnk6IGFubm91bmNlbWVudC5yZWFkQnkgfHwgW10sXG4gICAgICAgICAgICBjb21tZW50czogYW5ub3VuY2VtZW50LmNvbW1lbnRzIHx8IFtdLFxuICAgICAgICB9KSk7XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgYW5ub3VuY2VtZW50cyBieSBjb21wYW55OlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYXJrQW5ub3VuY2VtZW50QXNSZWFkKGFubm91bmNlbWVudElkOiBzdHJpbmcsIGFnZW50SWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuIH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBhbm5vdW5jZW1lbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFubm91bmNlbWVudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGF3YWl0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICAgICAgICAgIHsgX2lkOiBuZXcgT2JqZWN0SWQoYW5ub3VuY2VtZW50SWQpIH0sXG4gICAgICAgICAgICB7ICRhZGRUb1NldDogeyByZWFkQnk6IGFnZW50SWQgfSB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiTWFyayBhcyByZWFkIGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWRkQ29tbWVudFRvQW5ub3VuY2VtZW50KGFubm91bmNlbWVudElkOiBzdHJpbmcsIGF1dGhvcklkOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuLCBjb21tZW50PzogQ29tbWVudCB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgYXV0aG9yID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5maW5kT25lKHsgX2lkOiBuZXcgT2JqZWN0SWQoYXV0aG9ySWQpIH0pO1xuICAgICAgICBpZiAoIWF1dGhvcikgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcblxuICAgICAgICBjb25zdCBuZXdDb21tZW50OiBDb21tZW50ID0ge1xuICAgICAgICAgICAgaWQ6IG5ldyBPYmplY3RJZCgpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBhdXRob3I6IHtcbiAgICAgICAgICAgICAgICBpZDogYXV0aG9yLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIG5hbWU6IGF1dGhvci5uYW1lLFxuICAgICAgICAgICAgICAgIGF2YXRhcjogYXV0aG9yLmF2YXRhclxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBhbm5vdW5jZW1lbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFubm91bmNlbWVudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGF3YWl0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICAgICAgICAgIHsgX2lkOiBuZXcgT2JqZWN0SWQoYW5ub3VuY2VtZW50SWQpIH0sXG4gICAgICAgICAgICB7ICRwdXNoOiB7IGNvbW1lbnRzOiBuZXdDb21tZW50IH0gfVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgY29tbWVudDogbmV3Q29tbWVudCB9O1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkFkZCBjb21tZW50IGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XG4gICAgfVxufVxuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVBZ2VudFByb2ZpbGUoYWdlbnRJZDogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIGVtYWlsOiBzdHJpbmcsIHBob25lOiBzdHJpbmcsIGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U/OiBzdHJpbmc7IGFnZW50PzogQWdlbnQ7IH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBhZ2VudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWdlbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgdXBkYXRlUmVzdWx0ID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi51cGRhdGVPbmUoXG4gICAgICAgICAgICB7IF9pZDogbmV3IE9iamVjdElkKGFnZW50SWQpIH0sXG4gICAgICAgICAgICB7ICRzZXQ6IHsgbmFtZSwgZW1haWwsIHBob25lIH0gfVxuICAgICAgICApO1xuXG4gICAgICAgIGlmICh1cGRhdGVSZXN1bHQubW9kaWZpZWRDb3VudCA9PT0gMCAmJiB1cGRhdGVSZXN1bHQubWF0Y2hlZENvdW50ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBZ2VudCBub3QgZm91bmQuXCIgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodXBkYXRlUmVzdWx0Lm1vZGlmaWVkQ291bnQgPT09IDAgJiYgdXBkYXRlUmVzdWx0Lm1hdGNoZWRDb3VudCA+IDApIHtcbiAgICAgICAgICAgIC8vIE5vIGZpZWxkcyB3ZXJlIGFjdHVhbGx5IGNoYW5nZWRcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRBZ2VudCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IF9pZDogbmV3IE9iamVjdElkKGFnZW50SWQpIH0pO1xuICAgICAgICAgICAgIGlmICh1cGRhdGVkQWdlbnQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHBhc3N3b3JkLCAuLi5hZ2VudERhdGEgfSA9IHVwZGF0ZWRBZ2VudDtcbiAgICAgICAgICAgICAgICBjb25zdCBhZ2VudFdpdGhvdXRQYXNzd29yZDogQWdlbnQgPSB7XG4gICAgICAgICAgICAgICAgICAgIC4uLmFnZW50RGF0YSxcbiAgICAgICAgICAgICAgICAgICAgX2lkOiB1cGRhdGVkQWdlbnQuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIGlkOiB1cGRhdGVkQWdlbnQuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogdXBkYXRlZEFnZW50LmNvbXBhbnlJZD8udG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBhZ2VudDogYWdlbnRXaXRob3V0UGFzc3dvcmQgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgdXBkYXRlZEFnZW50ID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5maW5kT25lKHsgX2lkOiBuZXcgT2JqZWN0SWQoYWdlbnRJZCkgfSk7XG5cbiAgICAgICAgaWYgKHVwZGF0ZWRBZ2VudCkge1xuICAgICAgICAgICAgY29uc3QgeyBwYXNzd29yZCwgLi4uYWdlbnREYXRhIH0gPSB1cGRhdGVkQWdlbnQ7XG4gICAgICAgICAgICBjb25zdCBhZ2VudFdpdGhvdXRQYXNzd29yZDogQWdlbnQgPSB7XG4gICAgICAgICAgICAgICAgLi4uYWdlbnREYXRhLFxuICAgICAgICAgICAgICAgIF9pZDogdXBkYXRlZEFnZW50Ll9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiB1cGRhdGVkQWdlbnQuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiB1cGRhdGVkQWdlbnQuY29tcGFueUlkPy50b1N0cmluZygpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGF3YWl0IGxvZ0FjdGl2aXR5KGNvbXBhbnlJZCwgYWdlbnRXaXRob3V0UGFzc3dvcmQubmFtZSwgJ1VwZGF0ZSBQcm9maWxlJywgYFVwZGF0ZWQgcHJvZmlsZSBkZXRhaWxzYCk7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBhZ2VudDogYWdlbnRXaXRob3V0UGFzc3dvcmQgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkZhaWxlZCB0byByZXRyaWV2ZSB1cGRhdGVkIGFnZW50LlwiIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlVwZGF0ZSBhZ2VudCBwcm9maWxlIGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQuXCIgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVBZ2VudFBhc3N3b3JkKGFnZW50SWQ6IHN0cmluZywgY3VycmVudFBhc3N3b3JkX3VudXNlZDogc3RyaW5nLCBuZXdQYXNzd29yZF91bnVzZWQ6IHN0cmluZywgY29tcGFueUlkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZTogc3RyaW5nIH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBhZ2VudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWdlbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBhZ2VudCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IF9pZDogbmV3IE9iamVjdElkKGFnZW50SWQpIH0pO1xuXG4gICAgICAgIGlmICghYWdlbnQgfHwgIWFnZW50LnBhc3N3b3JkKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBZ2VudCBub3QgZm91bmQuXCIgfTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgaXNQYXNzd29yZFZhbGlkID0gYXdhaXQgdmVyaWZ5UGFzc3dvcmQoY3VycmVudFBhc3N3b3JkX3VudXNlZCwgYWdlbnQucGFzc3dvcmQpO1xuICAgICAgICBpZiAoIWlzUGFzc3dvcmRWYWxpZCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiSW5jb3JyZWN0IGN1cnJlbnQgcGFzc3dvcmQuXCIgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5ld0hhc2hlZFBhc3N3b3JkID0gYXdhaXQgaGFzaFBhc3N3b3JkKG5ld1Bhc3N3b3JkX3VudXNlZCk7XG4gICAgICAgIGF3YWl0IGFnZW50c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChhZ2VudElkKSB9LFxuICAgICAgICAgICAgeyAkc2V0OiB7IHBhc3N3b3JkOiBuZXdIYXNoZWRQYXNzd29yZCB9IH1cbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIGF3YWl0IGxvZ0FjdGl2aXR5KGNvbXBhbnlJZCwgYWdlbnQubmFtZSwgJ1VwZGF0ZSBQYXNzd29yZCcsIGBDaGFuZ2VkIHBhc3N3b3JkYCk7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIG1lc3NhZ2U6IFwiUGFzc3dvcmQgdXBkYXRlZCBzdWNjZXNzZnVsbHkuXCIgfTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJVcGRhdGUgcGFzc3dvcmQgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZC5cIiB9O1xuICAgIH1cbn1cblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlTG9naW4oZW1haWw6IHN0cmluZywgcGFzc3dvcmRfdW51c2VkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgYWdlbnQ/OiBBZ2VudCB9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFnZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBZ2VudHNDb2xsZWN0aW9uKCk7XG4gICAgICBjb25zdCBhZ2VudCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IGVtYWlsOiBlbWFpbC50b0xvd2VyQ2FzZSgpIH0pO1xuXG4gICAgICBpZiAoYWdlbnQgJiYgYWdlbnQucGFzc3dvcmQpIHtcbiAgICAgICAgY29uc3QgaXNQYXNzd29yZFZhbGlkID0gYXdhaXQgdmVyaWZ5UGFzc3dvcmQocGFzc3dvcmRfdW51c2VkLCBhZ2VudC5wYXNzd29yZCk7XG4gICAgICAgIGlmIChpc1Bhc3N3b3JkVmFsaWQpIHtcbiAgICAgICAgICBjb25zdCB7IHBhc3N3b3JkLCAuLi5hZ2VudERhdGEgfSA9IGFnZW50O1xuICAgICAgICAgIGNvbnN0IGFnZW50V2l0aG91dFBhc3N3b3JkOiBBZ2VudCA9IHtcbiAgICAgICAgICAgIC4uLmFnZW50RGF0YSxcbiAgICAgICAgICAgIF9pZDogYWdlbnQuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBpZDogYWdlbnQuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBjb21wYW55SWQ6IGFnZW50LmNvbXBhbnlJZD8udG9TdHJpbmcoKSxcbiAgICAgICAgICB9O1xuICAgICAgICAgIGF3YWl0IGxvZ0FjdGl2aXR5KGFnZW50LmNvbXBhbnlJZCwgYWdlbnQubmFtZSwgJ0xvZ2luJywgYExvZ2dlZCBpbiBzdWNjZXNzZnVsbHlgKTtcbiAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBhZ2VudDogYWdlbnRXaXRob3V0UGFzc3dvcmQgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiSW52YWxpZCBlbWFpbCBvciBwYXNzd29yZC5cIiB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiTG9naW4gZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkRhdGFiYXNlIGNvbm5lY3Rpb24gZXJyb3IuXCIgfTtcbiAgICB9XG59O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlQWdlbnQobmFtZTogc3RyaW5nLCBlbWFpbDogc3RyaW5nLCBwYXNzd29yZF91bnVzZWQ6IHN0cmluZywgcm9sZTogQWdlbnRSb2xlLCBjb21wYW55SWQ6IHN0cmluZywgY3JlYXRlZEJ5OiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgYWdlbnQ/OiBBZ2VudDsgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFnZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBZ2VudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nQWdlbnQgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBlbWFpbDogZW1haWwudG9Mb3dlckNhc2UoKSB9KTtcblxuICAgICAgICBpZiAoZXhpc3RpbmdBZ2VudCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gYWdlbnQgd2l0aCB0aGlzIGVtYWlsIGFscmVhZHkgZXhpc3RzLlwiIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBoYXNoZWRQYXNzd29yZCA9IGF3YWl0IGhhc2hQYXNzd29yZChwYXNzd29yZF91bnVzZWQpO1xuICAgICAgICBjb25zdCBhdmF0YXIgPSBgaHR0cHM6Ly9waWNzdW0ucGhvdG9zL3NlZWQvJHtuYW1lLnJlcGxhY2UoL1xccy9nLCAnJyl9LzEwMC8xMDBgO1xuXG4gICAgICAgIGNvbnN0IGFnZW50VG9JbnNlcnQ6IE9taXQ8QWdlbnQsICdpZCcgfCAnX2lkJz4gPSB7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgZW1haWw6IGVtYWlsLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICBwYXNzd29yZDogaGFzaGVkUGFzc3dvcmQsXG4gICAgICAgICAgICByb2xlLFxuICAgICAgICAgICAgYXZhdGFyLFxuICAgICAgICAgICAgcGhvbmU6ICcnLCBcbiAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZClcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmluc2VydE9uZShhZ2VudFRvSW5zZXJ0IGFzIGFueSk7XG5cbiAgICAgICAgaWYgKHJlc3VsdC5pbnNlcnRlZElkKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdBZ2VudCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IF9pZDogcmVzdWx0Lmluc2VydGVkSWQgfSk7XG4gICAgICAgICAgICBpZiAobmV3QWdlbnQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHBhc3N3b3JkLCAuLi5hZ2VudERhdGEgfSA9IG5ld0FnZW50O1xuICAgICAgICAgICAgICAgIGNvbnN0IGFnZW50V2l0aG91dFBhc3N3b3JkOiBBZ2VudCA9IHtcbiAgICAgICAgICAgICAgICAgIC4uLmFnZW50RGF0YSxcbiAgICAgICAgICAgICAgICAgIF9pZDogbmV3QWdlbnQuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICBpZDogbmV3QWdlbnQuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICBjb21wYW55SWQ6IG5ld0FnZW50LmNvbXBhbnlJZD8udG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGF3YWl0IGxvZ0FjdGl2aXR5KGNvbXBhbnlJZCwgY3JlYXRlZEJ5LCAnQ3JlYXRlIEFnZW50JywgYENyZWF0ZWQgYWdlbnQ6ICR7bmFtZX1gKTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBhZ2VudDogYWdlbnRXaXRob3V0UGFzc3dvcmQgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJGYWlsZWQgdG8gY3JlYXRlIGFnZW50LlwiIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkNyZWF0ZSBhZ2VudCBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIHdoaWxlIGNyZWF0aW5nIHRoZSBhZ2VudC5cIiB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZVNpZ25VcChuYW1lOiBzdHJpbmcsIGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkX3VudXNlZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U/OiBzdHJpbmc7IGFnZW50PzogQWdlbnQ7IH0+IHtcbiAgICBjb25zdCBkYiA9IGF3YWl0IGdldERiKCk7XG4gICAgY29uc3Qgc2Vzc2lvbiA9IGRiLmNsaWVudC5zdGFydFNlc3Npb24oKTtcbiAgICB0cnkge1xuICAgICAgICBsZXQgbmV3QWdlbnRSZXN1bHQ6IEFnZW50IHwgdW5kZWZpbmVkO1xuICAgICAgICBhd2FpdCBzZXNzaW9uLndpdGhUcmFuc2FjdGlvbihhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb21wYW5pZXNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q29tcGFuaWVzQ29sbGVjdGlvbigpO1xuICAgICAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nQWdlbnQgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBlbWFpbDogZW1haWwudG9Mb3dlckNhc2UoKSB9LCB7IHNlc3Npb24gfSk7XG5cbiAgICAgICAgICAgIGlmIChleGlzdGluZ0FnZW50KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQW4gYWdlbnQgd2l0aCB0aGlzIGVtYWlsIGFscmVhZHkgZXhpc3RzLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgY29tcGFueVJlc3VsdCA9IGF3YWl0IGNvbXBhbmllc0NvbGxlY3Rpb24uaW5zZXJ0T25lKHtcbiAgICAgICAgICAgICAgICBuYW1lOiBgJHtuYW1lfSdzIENvbXBhbnlgLFxuICAgICAgICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgICAgICAgIH0sIHsgc2Vzc2lvbiB9KTtcblxuICAgICAgICAgICAgaWYgKCFjb21wYW55UmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gY3JlYXRlIGNvbXBhbnkuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY29tcGFueUlkID0gY29tcGFueVJlc3VsdC5pbnNlcnRlZElkO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBoYXNoZWRQYXNzd29yZCA9IGF3YWl0IGhhc2hQYXNzd29yZChwYXNzd29yZF91bnVzZWQpO1xuICAgICAgICAgICAgY29uc3QgYXZhdGFyID0gYGh0dHBzOi8vcGljc3VtLnBob3Rvcy9zZWVkLyR7bmFtZS5yZXBsYWNlKC9cXHMvZywgJycpfS8xMDAvMTAwYDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgYWdlbnRUb0luc2VydDogT21pdDxBZ2VudCwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgIGVtYWlsOiBlbWFpbC50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBoYXNoZWRQYXNzd29yZCxcbiAgICAgICAgICAgICAgICByb2xlOiAnYWRtaW4nLFxuICAgICAgICAgICAgICAgIGF2YXRhcixcbiAgICAgICAgICAgICAgICBwaG9uZTogJycsXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBjb21wYW55SWQsXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCBhZ2VudFJlc3VsdCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uaW5zZXJ0T25lKGFnZW50VG9JbnNlcnQgYXMgYW55LCB7IHNlc3Npb24gfSk7XG5cbiAgICAgICAgICAgICBpZiAoIWFnZW50UmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gY3JlYXRlIGFkbWluIGFnZW50LlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgYXdhaXQgbG9nQWN0aXZpdHkoY29tcGFueUlkLCBuYW1lLCAnU2lnbiBVcCcsIGBDcmVhdGVkIG5ldyBjb21wYW55IGFuZCBhZG1pbiBhY2NvdW50LmApO1xuXG4gICAgICAgICAgICBjb25zdCBuZXdBZ2VudCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IF9pZDogYWdlbnRSZXN1bHQuaW5zZXJ0ZWRJZCB9LCB7IHNlc3Npb24gfSk7XG4gICAgICAgICAgICBpZiAobmV3QWdlbnQpIHtcbiAgICAgICAgICAgICAgICAgY29uc3QgeyBwYXNzd29yZCwgLi4uYWdlbnREYXRhIH0gPSBuZXdBZ2VudDtcbiAgICAgICAgICAgICAgICAgbmV3QWdlbnRSZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgICAgIC4uLmFnZW50RGF0YSxcbiAgICAgICAgICAgICAgICAgICAgX2lkOiBuZXdBZ2VudC5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IG5ld0FnZW50Ll9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBjb21wYW55SWQ6IG5ld0FnZW50LmNvbXBhbnlJZD8udG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFuZXdBZ2VudFJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIHJldHJpZXZlIHRoZSBjcmVhdGVkIGFnZW50LlwiIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGFnZW50OiBuZXdBZ2VudFJlc3VsdCB9O1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlNpZ24gdXAgdHJhbnNhY3Rpb24gZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgLy8gQWJvcnQgdHJhbnNhY3Rpb24gb24gZXJyb3IgaWYgaXQgd2FzIHN0YXJ0ZWRcbiAgICAgICAgaWYgKHNlc3Npb24uaW5UcmFuc2FjdGlvbigpKSB7XG4gICAgICAgICAgICBhd2FpdCBzZXNzaW9uLmFib3J0VHJhbnNhY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB8fCBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHNpZ24gdXAuXCIgfTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgICBhd2FpdCBzZXNzaW9uLmVuZFNlc3Npb24oKTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFjdGl2aXR5TG9ncyhjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8QWN0aXZpdHlMb2dbXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghY29tcGFueUlkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNvbXBhbnlJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsb2dzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFjdGl2aXR5TG9nc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgbG9ncyA9IGF3YWl0IGxvZ3NDb2xsZWN0aW9uLmZpbmQoeyBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpIH0pLnNvcnQoeyB0aW1lc3RhbXA6IC0xIH0pLmxpbWl0KDUwKS50b0FycmF5KCk7XG5cbiAgICAgICAgcmV0dXJuIGxvZ3MubWFwKGxvZyA9PiAoe1xuICAgICAgICAgICAgLi4ubG9nLFxuICAgICAgICAgICAgX2lkOiBsb2cuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBpZDogbG9nLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgY29tcGFueUlkOiBsb2cuY29tcGFueUlkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICB0aW1lc3RhbXA6IGxvZy50aW1lc3RhbXAudG9JU09TdHJpbmcoKSxcbiAgICAgICAgfSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBhY3Rpdml0eSBsb2dzOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IndSQXVVc0IifQ==
}}),
"[project]/src/app/page.tsx [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>Home)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$chat$2d$layout$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/chat-layout.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$vertical$2d$nav$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/vertical-nav.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$contacts$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/contacts-view.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$agents$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/agents-view.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$dashboard$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/dashboard-view.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$announcements$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/announcements-view.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$settings$2d$dialog$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/settings-dialog.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$campaigns$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/campaigns-view.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$my$2d$performance$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/my-performance-view.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$auth$2d$form$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/auth-form.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$app$2f$data$3a$23a835__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$text$2f$javascript$3e$__ = __turbopack_context__.i("[project]/src/app/data:23a835 [app-ssr] (ecmascript) <text/javascript>");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$app$2f$data$3a$155c26__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$text$2f$javascript$3e$__ = __turbopack_context__.i("[project]/src/app/data:155c26 [app-ssr] (ecmascript) <text/javascript>");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$hooks$2f$use$2d$toast$2e$ts__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/hooks/use-toast.ts [app-ssr] (ecmascript)");
"use client";
;
;
;
;
;
;
;
;
;
;
;
;
;
;
function Home({ params, searchParams }) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["use"])(params);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["use"])(searchParams);
    const [activeView, setActiveView] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])("Chat");
    const [isNavOpen, setIsNavOpen] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])(false);
    const [currentUser, setCurrentUser] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])(null);
    const [isSettingsOpen, setIsSettingsOpen] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])(false);
    const { toast } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$hooks$2f$use$2d$toast$2e$ts__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useToast"])();
    const onLogin = async (email, password_unused)=>{
        const result = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$app$2f$data$3a$23a835__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$text$2f$javascript$3e$__["handleLogin"])(email, password_unused);
        if (result.success && result.agent) {
            const agent = result.agent;
            setCurrentUser({
                id: agent.id,
                name: agent.name,
                avatar: agent.avatar,
                role: agent.role,
                email: agent.email,
                phone: agent.phone,
                companyId: agent.companyId
            });
            if (agent.role === 'admin') {
                setActiveView('Dashboard');
            } else {
                setActiveView('Chat');
            }
        }
        return {
            success: result.success,
            message: result.message
        };
    };
    const onSignUp = async (name, email, password_unused)=>{
        const result = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$app$2f$data$3a$155c26__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$text$2f$javascript$3e$__["handleSignUp"])(name, email, password_unused);
        if (result.success && result.agent) {
            toast({
                title: "Account Created!",
                description: "You can now sign in with your new credentials."
            });
            const agent = result.agent;
            setCurrentUser({
                id: agent.id,
                name: agent.name,
                avatar: agent.avatar,
                role: agent.role,
                email: agent.email,
                phone: agent.phone,
                companyId: agent.companyId
            });
            if (agent.role === 'admin') {
                setActiveView('Dashboard');
            } else {
                setActiveView('Chat');
            }
        }
        return result;
    };
    const handleLogout = ()=>{
        setCurrentUser(null);
        setActiveView('Chat');
    };
    const handleUpdateUser = (updatedUser)=>{
        setCurrentUser((prev)=>prev ? {
                ...prev,
                ...updatedUser
            } : null);
    };
    const renderView = ()=>{
        const props = {
            onMenuClick: ()=>setIsNavOpen(true),
            user: currentUser
        };
        switch(activeView){
            case "Chat":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$chat$2d$layout$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ChatLayout"], {
                    user: currentUser,
                    onMenuClick: ()=>setIsNavOpen(true)
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 95,
                    columnNumber: 16
                }, this);
            case "Contacts":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$contacts$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ContactsView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 97,
                    columnNumber: 16
                }, this);
            case "Agents":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$agents$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AgentsView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 99,
                    columnNumber: 16
                }, this);
            case "Dashboard":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$dashboard$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DashboardView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 101,
                    columnNumber: 16
                }, this);
            case "Announcements":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$announcements$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AnnouncementsView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 103,
                    columnNumber: 16
                }, this);
            case "My Performance":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$my$2d$performance$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MyPerformanceView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 105,
                    columnNumber: 16
                }, this);
            case "Campaigns":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$campaigns$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CampaignsView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 107,
                    columnNumber: 17
                }, this);
            default:
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$chat$2d$layout$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ChatLayout"], {
                    user: currentUser,
                    onMenuClick: ()=>setIsNavOpen(true)
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 109,
                    columnNumber: 16
                }, this);
        }
    };
    if (!currentUser) {
        return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])("main", {
            className: "flex h-screen w-full items-center justify-center bg-background p-4 overflow-hidden auth-page-background",
            children: /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$auth$2d$form$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AuthForm"], {
                onLogin: onLogin,
                onSignUp: onSignUp
            }, void 0, false, {
                fileName: "[project]/src/app/page.tsx",
                lineNumber: 116,
                columnNumber: 9
            }, this)
        }, void 0, false, {
            fileName: "[project]/src/app/page.tsx",
            lineNumber: 115,
            columnNumber: 7
        }, this);
    }
    return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])("main", {
        className: "flex h-screen bg-background",
        children: [
            /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$settings$2d$dialog$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SettingsDialog"], {
                open: isSettingsOpen,
                onOpenChange: setIsSettingsOpen,
                user: currentUser,
                onUserUpdate: handleUpdateUser
            }, void 0, false, {
                fileName: "[project]/src/app/page.tsx",
                lineNumber: 123,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$vertical$2d$nav$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["VerticalNav"], {
                activeView: activeView,
                setActiveView: setActiveView,
                user: currentUser,
                onLogout: handleLogout,
                isOpen: isNavOpen,
                setIsOpen: setIsNavOpen,
                onSettingsClick: ()=>setIsSettingsOpen(true)
            }, void 0, false, {
                fileName: "[project]/src/app/page.tsx",
                lineNumber: 129,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])("div", {
                className: "flex-1 md:pl-[70px] min-w-0",
                children: renderView()
            }, void 0, false, {
                fileName: "[project]/src/app/page.tsx",
                lineNumber: 138,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true, {
        fileName: "[project]/src/app/page.tsx",
        lineNumber: 122,
        columnNumber: 5
    }, this);
}
}}),

};

//# sourceMappingURL=src_app_042cc30d._.js.map