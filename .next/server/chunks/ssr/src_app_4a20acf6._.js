module.exports = {

"[project]/src/app/data:21a01b [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"7efa29b2bf7fa82364aadbf5011c649e7f21f09fbf":"createAgent"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "createAgent": (()=>createAgent)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var createAgent = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("7efa29b2bf7fa82364aadbf5011c649e7f21f09fbf", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "createAgent"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:2d58a5 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40d5d08abcb55310482395efa2b68b3d883c709e39":"getChatsByCompany"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getChatsByCompany": (()=>getChatsByCompany)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var getChatsByCompany = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("40d5d08abcb55310482395efa2b68b3d883c709e39", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getChatsByCompany"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:ae4ed8 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40534236dcc36f51af1a921f1d5dd985231fa0be2f":"getMessagesForChat"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getMessagesForChat": (()=>getMessagesForChat)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var getMessagesForChat = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("40534236dcc36f51af1a921f1d5dd985231fa0be2f", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getMessagesForChat"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:c11e18 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"70550f3a06ff63d8c1c6555f235fca6dc7330a34c0":"sendMessage"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "sendMessage": (()=>sendMessage)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var sendMessage = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("70550f3a06ff63d8c1c6555f235fca6dc7330a34c0", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "sendMessage"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:f27d23 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"609d4f76fb496a216c91066f2d4684c160f7fd02a4":"setChatbotStatus"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "setChatbotStatus": (()=>setChatbotStatus)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var setChatbotStatus = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("609d4f76fb496a216c91066f2d4684c160f7fd02a4", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "setChatbotStatus"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:9b90d8 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"78e1313773a3e1763f3457daecfd448d9fb5a79106":"startNewChats"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "startNewChats": (()=>startNewChats)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var startNewChats = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("78e1313773a3e1763f3457daecfd448d9fb5a79106", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "startNewChats"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:1c927f [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40ddb22e27e4cef48e6f8b4f4548db5d5d7b59d98c":"getContactsByCompany"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getContactsByCompany": (()=>getContactsByCompany)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var getContactsByCompany = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("40ddb22e27e4cef48e6f8b4f4548db5d5d7b59d98c", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getContactsByCompany"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:4c32f1 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"780997e968e3cabe30367154f3b8d33efe060f51bd":"addNoteToContact"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "addNoteToContact": (()=>addNoteToContact)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var addNoteToContact = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("780997e968e3cabe30367154f3b8d33efe060f51bd", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "addNoteToContact"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:edf8cc [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"60baf496c3062efe4fd326c7af2943c2196e029cce":"assignAgentToContact"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "assignAgentToContact": (()=>assignAgentToContact)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var assignAgentToContact = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("60baf496c3062efe4fd326c7af2943c2196e029cce", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "assignAgentToContact"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:5ac6ae [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"4087786a1113f54129434f2a7816d4f589ebf1b846":"getAgentsByCompany"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getAgentsByCompany": (()=>getAgentsByCompany)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var getAgentsByCompany = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("4087786a1113f54129434f2a7816d4f589ebf1b846", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getAgentsByCompany"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:199758 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"60d072bc1975e4e5f878dc1c3a7bbba30e68a6f871":"importContactsFromCSV"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "importContactsFromCSV": (()=>importContactsFromCSV)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var importContactsFromCSV = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("60d072bc1975e4e5f878dc1c3a7bbba30e68a6f871", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "importContactsFromCSV"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:704677 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"783b92989339fb5b73f8cf537b1cd9811ad31c6bdf":"createContact"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "createContact": (()=>createContact)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var createContact = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("783b92989339fb5b73f8cf537b1cd9811ad31c6bdf", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "createContact"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:3d4320 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"703df0e88d6b7f31da31805fe7c8d53353df7e0ee2":"deleteAgent"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "deleteAgent": (()=>deleteAgent)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var deleteAgent = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("703df0e88d6b7f31da31805fe7c8d53353df7e0ee2", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "deleteAgent"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:4de296 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"404d8f1b9c2cd44e439a3f4dba37f710171ff8f88b":"getActivityLogs"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getActivityLogs": (()=>getActivityLogs)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var getActivityLogs = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("404d8f1b9c2cd44e439a3f4dba37f710171ff8f88b", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getActivityLogs"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:7b62fb [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"7c4c24e8dc61bef49f2c2f8a8acc71b5dd4ffb33e3":"updateAgentProfile"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "updateAgentProfile": (()=>updateAgentProfile)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var updateAgentProfile = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("7c4c24e8dc61bef49f2c2f8a8acc71b5dd4ffb33e3", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "updateAgentProfile"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:97992a [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"60f2354c630933e8cfbda63a32de99ef4c111b10e4":"scheduleAnalyticsReport"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "scheduleAnalyticsReport": (()=>scheduleAnalyticsReport)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var scheduleAnalyticsReport = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("60f2354c630933e8cfbda63a32de99ef4c111b10e4", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "scheduleAnalyticsReport"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:97464e [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40ff6278859af3f524ec2ac84e79db5390255a1668":"createAnnouncement"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "createAnnouncement": (()=>createAnnouncement)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var createAnnouncement = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("40ff6278859af3f524ec2ac84e79db5390255a1668", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "createAnnouncement"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:f86e4a [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"409b841e613ce80e5c40df0364f6df47d80421d363":"getAnnouncementsByCompany"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getAnnouncementsByCompany": (()=>getAnnouncementsByCompany)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var getAnnouncementsByCompany = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("409b841e613ce80e5c40df0364f6df47d80421d363", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getAnnouncementsByCompany"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:38d18f [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"60daecd654edd9aad0f66818f3643edb5b83926f6b":"markAnnouncementAsRead"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "markAnnouncementAsRead": (()=>markAnnouncementAsRead)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var markAnnouncementAsRead = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("60daecd654edd9aad0f66818f3643edb5b83926f6b", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "markAnnouncementAsRead"); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4vYWN0aW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbid1c2Ugc2VydmVyJztcblxuaW1wb3J0IHsgZ2V0RGIgfSBmcm9tIFwiQC9saWIvZGJcIjtcbmltcG9ydCB7IGhhc2hQYXNzd29yZCwgdmVyaWZ5UGFzc3dvcmQgfSBmcm9tIFwiQC9saWIvYXV0aFwiO1xuaW1wb3J0IHR5cGUgeyBBZ2VudCwgQWdlbnRSb2xlLCBBbm5vdW5jZW1lbnQsIENvbXBhbnksIENvbW1lbnQsIEFjdGl2aXR5TG9nLCBVc2VyLCBOb3RlLCBDaGF0LCBNZXNzYWdlLCBDaGFubmVsLCBDYW1wYWlnbiB9IGZyb20gXCJAL3R5cGVzXCI7XG5pbXBvcnQgeyBDb2xsZWN0aW9uLCBEYiwgT2JqZWN0SWQgfSBmcm9tIFwibW9uZ29kYlwiO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRBZ2VudHNDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxBZ2VudD4+IHtcbiAgICBjb25zdCBkYjogRGIgPSBhd2FpdCBnZXREYigpO1xuICAgIHJldHVybiBkYi5jb2xsZWN0aW9uPEFnZW50PignYWdlbnRzJyk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDb21wYW5pZXNDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxDb21wYW55Pj4ge1xuICAgIGNvbnN0IGRiOiBEYiA9IGF3YWl0IGdldERiKCk7XG4gICAgcmV0dXJuIGRiLmNvbGxlY3Rpb248Q29tcGFueT4oJ2NvbXBhbmllcycpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRBbm5vdW5jZW1lbnRzQ29sbGVjdGlvbigpOiBQcm9taXNlPENvbGxlY3Rpb248QW5ub3VuY2VtZW50Pj4ge1xuICAgIGNvbnN0IGRiOiBEYiA9IGF3YWl0IGdldERiKCk7XG4gICAgcmV0dXJuIGRiLmNvbGxlY3Rpb248QW5ub3VuY2VtZW50PignYW5ub3VuY2VtZW50cycpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRBY3Rpdml0eUxvZ3NDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxBY3Rpdml0eUxvZz4+IHtcbiAgICBjb25zdCBkYjogRGIgPSBhd2FpdCBnZXREYigpO1xuICAgIHJldHVybiBkYi5jb2xsZWN0aW9uPEFjdGl2aXR5TG9nPignYWN0aXZpdHlfbG9ncycpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VXNlcnNDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxVc2VyPj4ge1xuICAgIGNvbnN0IGRiOiBEYiA9IGF3YWl0IGdldERiKCk7XG4gICAgcmV0dXJuIGRiLmNvbGxlY3Rpb248VXNlcj4oJ2NvbnRhY3RzJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENoYXRzQ29sbGVjdGlvbigpOiBQcm9taXNlPENvbGxlY3Rpb248Q2hhdD4+IHtcbiAgICBjb25zdCBkYjogRGIgPSBhd2FpdCBnZXREYigpO1xuICAgIHJldHVybiBkYi5jb2xsZWN0aW9uPENoYXQ+KCdjaGF0cycpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRNZXNzYWdlc0NvbGxlY3Rpb24oKTogUHJvbWlzZTxDb2xsZWN0aW9uPE1lc3NhZ2U+PiB7XG4gICAgY29uc3QgZGI6IERiID0gYXdhaXQgZ2V0RGIoKTtcbiAgICByZXR1cm4gZGIuY29sbGVjdGlvbjxNZXNzYWdlPignbWVzc2FnZXMnKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0Q2FtcGFpZ25zQ29sbGVjdGlvbigpOiBQcm9taXNlPENvbGxlY3Rpb248Q2FtcGFpZ24+PiB7XG4gICAgY29uc3QgZGI6IERiID0gYXdhaXQgZ2V0RGIoKTtcbiAgICByZXR1cm4gZGIuY29sbGVjdGlvbjxDYW1wYWlnbj4oJ2NhbXBhaWducycpO1xufVxuXG5cbmFzeW5jIGZ1bmN0aW9uIGxvZ0FjdGl2aXR5KGNvbXBhbnlJZDogc3RyaW5nIHwgT2JqZWN0SWQsIGFnZW50TmFtZTogc3RyaW5nLCBhY3Rpb246IHN0cmluZywgZGV0YWlsczogc3RyaW5nKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgbG9nc0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBY3Rpdml0eUxvZ3NDb2xsZWN0aW9uKCk7XG4gICAgICAgIGF3YWl0IGxvZ3NDb2xsZWN0aW9uLmluc2VydE9uZSh7XG4gICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpLFxuICAgICAgICAgICAgYWdlbnROYW1lLFxuICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgZGV0YWlscyxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBsb2cgYWN0aXZpdHk6XCIsIGVycm9yKTtcbiAgICB9XG59XG5cbi8vIEEgc2ltcGxlIGhhc2hpbmcgZnVuY3Rpb24gdG8gY3JlYXRlIGEgcHNldWRvLXJhbmRvbSBidXQgY29uc2lzdGVudCBudW1iZXIgZnJvbSBhIHN0cmluZy5cbmNvbnN0IHNpbXBsZUhhc2ggPSAoc3RyOiBzdHJpbmcpID0+IHtcbiAgbGV0IGhhc2ggPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNoYXIgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoID0gKGhhc2ggPDwgNSkgLSBoYXNoICsgY2hhcjtcbiAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICB9XG4gIHJldHVybiBNYXRoLmFicyhoYXNoKTtcbn07XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFnZW50c0J5Q29tcGFueShjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8QWdlbnRbXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghY29tcGFueUlkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNvbXBhbnlJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhZ2VudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWdlbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBtZXNzYWdlc0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRNZXNzYWdlc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgYWdlbnRzID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5maW5kKHsgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSB9LCB7IHByb2plY3Rpb246IHsgcGFzc3dvcmQ6IDAgfSB9KS50b0FycmF5KCk7XG5cbiAgICAgICAgY29uc3QgYWdlbnREYXRhV2l0aFN0YXRzID0gYXdhaXQgUHJvbWlzZS5hbGwoYWdlbnRzLm1hcChhc3luYyAoYWdlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIHRvZGF5LnNldEhvdXJzKDAsIDAsIDAsIDApO1xuXG4gICAgICAgICAgICBjb25zdCBjb252ZXJzYXRpb25zVG9kYXkgPSBhd2FpdCBtZXNzYWdlc0NvbGxlY3Rpb24uY291bnREb2N1bWVudHMoe1xuICAgICAgICAgICAgICAgIHNlbmRlcklkOiBhZ2VudC5faWQsXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wOiB7ICRndGU6IHRvZGF5LnRvSVNPU3RyaW5nKCkgfSBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBzdGF0dXNlczogQXJyYXk8J09ubGluZScgfCAnT2ZmbGluZScgfCAnQnVzeSc+ID0gWydPbmxpbmUnLCAnT2ZmbGluZScsICdCdXN5J107XG4gICAgICAgICAgICBjb25zdCBoYXNoID0gc2ltcGxlSGFzaChhZ2VudC5uYW1lKTtcbiAgICAgICAgICAgIGNvbnN0IHJhbmRvbVN0YXR1cyA9IHN0YXR1c2VzW2hhc2ggJSBzdGF0dXNlcy5sZW5ndGhdO1xuXG4gICAgICAgICAgICBsZXQgYXZnUmVzcG9uc2VUaW1lID0gXCJOL0FcIjtcbiAgICAgICAgICAgIGxldCBjc2F0OiBudW1iZXIgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIGlmIChjb252ZXJzYXRpb25zVG9kYXkgPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXZnUmVzcG9uc2VNaW51dGVzID0gKGhhc2ggJSA0KSArIDE7IC8vIDEgdG8gNCBtaW51dGVzXG4gICAgICAgICAgICAgICAgY29uc3QgYXZnUmVzcG9uc2VTZWNvbmRzID0gaGFzaCAlIDYwOyAvLyAwIHRvIDU5IHNlY29uZHNcbiAgICAgICAgICAgICAgICBhdmdSZXNwb25zZVRpbWUgPSBgJHthdmdSZXNwb25zZU1pbnV0ZXN9bSAke2F2Z1Jlc3BvbnNlU2Vjb25kc31zYDtcbiAgICAgICAgICAgICAgICBjc2F0ID0gODUgKyAoaGFzaCAlIDE1KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5hZ2VudCxcbiAgICAgICAgICAgICAgICBfaWQ6IGFnZW50Ll9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiBhZ2VudC5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IGFnZW50LmNvbXBhbnlJZD8udG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjb252ZXJzYXRpb25zVG9kYXksXG4gICAgICAgICAgICAgICAgc3RhdHVzOiByYW5kb21TdGF0dXMsXG4gICAgICAgICAgICAgICAgYXZnUmVzcG9uc2VUaW1lLFxuICAgICAgICAgICAgICAgIGNzYXQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gYWdlbnREYXRhV2l0aFN0YXRzO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBhZ2VudHMgYnkgY29tcGFueTpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlQW5ub3VuY2VtZW50KGRhdGE6IHsgdGl0bGU6IHN0cmluZzsgY29udGVudDogc3RyaW5nOyBjYXRlZ29yeTogc3RyaW5nOyBhdXRob3JJZDogc3RyaW5nOyBjb21wYW55SWQ6IHN0cmluZyB9KTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U/OiBzdHJpbmc7IGFubm91bmNlbWVudD86IEFubm91bmNlbWVudCB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYW5ub3VuY2VtZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBbm5vdW5jZW1lbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBhZ2VudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWdlbnRzQ29sbGVjdGlvbigpO1xuXG4gICAgICAgIGNvbnN0IGF1dGhvciA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IF9pZDogbmV3IE9iamVjdElkKGRhdGEuYXV0aG9ySWQpIH0pO1xuICAgICAgICBpZiAoIWF1dGhvcikge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQXV0aG9yIG5vdCBmb3VuZC5cIiB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbmV3QW5ub3VuY2VtZW50OiBPbWl0PEFubm91bmNlbWVudCwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgIHRpdGxlOiBkYXRhLnRpdGxlLFxuICAgICAgICAgICAgY29udGVudDogZGF0YS5jb250ZW50LFxuICAgICAgICAgICAgY2F0ZWdvcnk6IGRhdGEuY2F0ZWdvcnkgYXMgYW55LFxuICAgICAgICAgICAgYXV0aG9yOiB7XG4gICAgICAgICAgICAgICAgaWQ6IGF1dGhvci5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBuYW1lOiBhdXRob3IubmFtZSxcbiAgICAgICAgICAgICAgICBhdmF0YXI6IGF1dGhvci5hdmF0YXJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChkYXRhLmNvbXBhbnlJZCksXG4gICAgICAgICAgICBkYXRlOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICByZWFkQnk6IFtdLFxuICAgICAgICAgICAgY29tbWVudHM6IFtdLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uLmluc2VydE9uZShuZXdBbm5vdW5jZW1lbnQgYXMgYW55KTtcbiAgICAgICAgYXdhaXQgbG9nQWN0aXZpdHkoZGF0YS5jb21wYW55SWQsIGF1dGhvci5uYW1lLCAnQ3JlYXRlIEFubm91bmNlbWVudCcsIGBQdWJsaXNoZWQ6IFwiJHtkYXRhLnRpdGxlfVwiYCk7XG5cblxuICAgICAgICBpZiAocmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNyZWF0ZWRBbm5vdW5jZW1lbnQ6IEFubm91bmNlbWVudCA9IHtcbiAgICAgICAgICAgICAgICAuLi4obmV3QW5ub3VuY2VtZW50IGFzIE9taXQ8QW5ub3VuY2VtZW50LCAnX2lkJyB8ICdpZCc+KSxcbiAgICAgICAgICAgICAgICBfaWQ6IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgaWQ6IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoZGF0YS5jb21wYW55SWQpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgYW5ub3VuY2VtZW50OiBjcmVhdGVkQW5ub3VuY2VtZW50IH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJGYWlsZWQgdG8gY3JlYXRlIGFubm91bmNlbWVudC5cIiB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDcmVhdGUgYW5ub3VuY2VtZW50IGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQuXCIgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBbm5vdW5jZW1lbnRzQnlDb21wYW55KGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTxBbm5vdW5jZW1lbnRbXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghY29tcGFueUlkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNvbXBhbnlJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbm5vdW5jZW1lbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFubm91bmNlbWVudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGFubm91bmNlbWVudHMgPSBhd2FpdCBhbm5vdW5jZW1lbnRzQ29sbGVjdGlvbi5maW5kKHsgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSB9KS5zb3J0KHsgZGF0ZTogLTEgfSkudG9BcnJheSgpO1xuXG4gICAgICAgIHJldHVybiBhbm5vdW5jZW1lbnRzLm1hcChhbm5vdW5jZW1lbnQgPT4gKHtcbiAgICAgICAgICAgIC4uLmFubm91bmNlbWVudCxcbiAgICAgICAgICAgIF9pZDogYW5ub3VuY2VtZW50Ll9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgaWQ6IGFubm91bmNlbWVudC5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGNvbXBhbnlJZDogYW5ub3VuY2VtZW50LmNvbXBhbnlJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgcmVhZEJ5OiBhbm5vdW5jZW1lbnQucmVhZEJ5IHx8IFtdLFxuICAgICAgICAgICAgY29tbWVudHM6IChhbm5vdW5jZW1lbnQuY29tbWVudHMgfHwgW10pLm1hcCgoY29tbWVudDogQ29tbWVudCkgPT4gKHtcbiAgICAgICAgICAgICAgICAuLi5jb21tZW50LFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoY29tbWVudC50aW1lc3RhbXApLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICB9KSksXG4gICAgICAgIH0pKTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBhbm5vdW5jZW1lbnRzIGJ5IGNvbXBhbnk6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1hcmtBbm5vdW5jZW1lbnRBc1JlYWQoYW5ub3VuY2VtZW50SWQ6IHN0cmluZywgYWdlbnRJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW4gfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QW5ub3VuY2VtZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgYXdhaXQgYW5ub3VuY2VtZW50c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChhbm5vdW5jZW1lbnRJZCkgfSxcbiAgICAgICAgICAgIHsgJGFkZFRvU2V0OiB7IHJlYWRCeTogYWdlbnRJZCB9IH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXJrIGFzIHJlYWQgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhZGRDb21tZW50VG9Bbm5vdW5jZW1lbnQoYW5ub3VuY2VtZW50SWQ6IHN0cmluZywgYXV0aG9ySWQ6IHN0cmluZywgY29udGVudDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW4sIGNvbW1lbnQ/OiBDb21tZW50IH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBhZ2VudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWdlbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBhdXRob3IgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBfaWQ6IG5ldyBPYmplY3RJZChhdXRob3JJZCkgfSk7XG4gICAgICAgIGlmICghYXV0aG9yKSByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xuXG4gICAgICAgIGNvbnN0IG5ld0NvbW1lbnQ6IENvbW1lbnQgPSB7XG4gICAgICAgICAgICBpZDogbmV3IE9iamVjdElkKCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGF1dGhvcjoge1xuICAgICAgICAgICAgICAgIGlkOiBhdXRob3IuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgbmFtZTogYXV0aG9yLm5hbWUsXG4gICAgICAgICAgICAgICAgYXZhdGFyOiBhdXRob3IuYXZhdGFyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QW5ub3VuY2VtZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgYXdhaXQgYW5ub3VuY2VtZW50c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChhbm5vdW5jZW1lbnRJZCkgfSxcbiAgICAgICAgICAgIHsgJHB1c2g6IHsgY29tbWVudHM6IG5ld0NvbW1lbnQgfSB9XG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBjb21tZW50OiBuZXdDb21tZW50IH07XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQWRkIGNvbW1lbnQgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUFnZW50UHJvZmlsZShhZ2VudElkOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgZW1haWw6IHN0cmluZywgcGhvbmU6IHN0cmluZywgY29tcGFueUlkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgYWdlbnQ/OiBBZ2VudDsgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFnZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBZ2VudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCB1cGRhdGVSZXN1bHQgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICAgICAgICAgIHsgX2lkOiBuZXcgT2JqZWN0SWQoYWdlbnRJZCkgfSxcbiAgICAgICAgICAgIHsgJHNldDogeyBuYW1lLCBlbWFpbCwgcGhvbmUgfSB9XG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKHVwZGF0ZVJlc3VsdC5tb2RpZmllZENvdW50ID09PSAwICYmIHVwZGF0ZVJlc3VsdC5tYXRjaGVkQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFnZW50IG5vdCBmb3VuZC5cIiB9O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBhZ2VudFdpdGhTdGF0cyA9IGF3YWl0IGdldEFnZW50c0J5Q29tcGFueShjb21wYW55SWQpO1xuICAgICAgICBjb25zdCB1cGRhdGVkQWdlbnQgPSBhZ2VudFdpdGhTdGF0cy5maW5kKGEgPT4gYS5pZCA9PT0gYWdlbnRJZCk7XG5cblxuICAgICAgICBpZiAodXBkYXRlZEFnZW50KSB7XG4gICAgICAgICAgICBhd2FpdCBsb2dBY3Rpdml0eShjb21wYW55SWQsIHVwZGF0ZWRBZ2VudC5uYW1lLCAnVXBkYXRlIFByb2ZpbGUnLCBgVXBkYXRlZCBhZ2VudCBwcm9maWxlIGZvciAke25hbWV9YCk7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBhZ2VudDogdXBkYXRlZEFnZW50IH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJGYWlsZWQgdG8gcmV0cmlldmUgdXBkYXRlZCBhZ2VudC5cIiB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJVcGRhdGUgYWdlbnQgcHJvZmlsZSBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkLlwiIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlQWdlbnRQYXNzd29yZChhZ2VudElkOiBzdHJpbmcsIGN1cnJlbnRQYXNzd29yZDogc3RyaW5nLCBuZXdQYXNzd29yZDogc3RyaW5nLCBjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBtZXNzYWdlOiBzdHJpbmcgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFnZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBZ2VudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGFnZW50ID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5maW5kT25lKHsgX2lkOiBuZXcgT2JqZWN0SWQoYWdlbnRJZCkgfSk7XG5cbiAgICAgICAgaWYgKCFhZ2VudCB8fCAhYWdlbnQucGFzc3dvcmQpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFnZW50IG5vdCBmb3VuZC5cIiB9O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBpc1Bhc3N3b3JkVmFsaWQgPSBhd2FpdCB2ZXJpZnlQYXNzd29yZChjdXJyZW50UGFzc3dvcmQsIGFnZW50LnBhc3N3b3JkKTtcbiAgICAgICAgaWYgKCFpc1Bhc3N3b3JkVmFsaWQpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkluY29ycmVjdCBjdXJyZW50IHBhc3N3b3JkLlwiIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBuZXdIYXNoZWRQYXNzd29yZCA9IGF3YWl0IGhhc2hQYXNzd29yZChuZXdQYXNzd29yZCk7XG4gICAgICAgIGF3YWl0IGFnZW50c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChhZ2VudElkKSB9LFxuICAgICAgICAgICAgeyAkc2V0OiB7IHBhc3N3b3JkOiBuZXdIYXNoZWRQYXNzd29yZCB9IH1cbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIGF3YWl0IGxvZ0FjdGl2aXR5KGNvbXBhbnlJZCwgYWdlbnQubmFtZSwgJ1VwZGF0ZSBQYXNzd29yZCcsIGBDaGFuZ2VkIHBhc3N3b3JkYCk7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIG1lc3NhZ2U6IFwiUGFzc3dvcmQgdXBkYXRlZCBzdWNjZXNzZnVsbHkuXCIgfTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJVcGRhdGUgcGFzc3dvcmQgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZC5cIiB9O1xuICAgIH1cbn1cblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlTG9naW4oZW1haWw6IHN0cmluZywgcGFzc3dvcmRfdW51c2VkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgYWdlbnQ/OiBBZ2VudCB9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFnZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBZ2VudHNDb2xsZWN0aW9uKCk7XG4gICAgICBjb25zdCBhZ2VudERvYyA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IGVtYWlsOiBlbWFpbC50b0xvd2VyQ2FzZSgpIH0pO1xuXG4gICAgICBpZiAoYWdlbnREb2MgJiYgYWdlbnREb2MucGFzc3dvcmQpIHtcbiAgICAgICAgY29uc3QgaXNQYXNzd29yZFZhbGlkID0gYXdhaXQgdmVyaWZ5UGFzc3dvcmQocGFzc3dvcmRfdW51c2VkLCBhZ2VudERvYy5wYXNzd29yZCk7XG4gICAgICAgIGlmIChpc1Bhc3N3b3JkVmFsaWQpIHtcbiAgICAgICAgICBjb25zdCB7IHBhc3N3b3JkLCAuLi5hZ2VudERhdGEgfSA9IGFnZW50RG9jO1xuICAgICAgICAgIGNvbnN0IGFnZW50OiBBZ2VudCA9IHtcbiAgICAgICAgICAgIC4uLmFnZW50RGF0YSxcbiAgICAgICAgICAgIF9pZDogYWdlbnREb2MuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBpZDogYWdlbnREb2MuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBjb21wYW55SWQ6IGFnZW50RG9jLmNvbXBhbnlJZD8udG9TdHJpbmcoKSxcbiAgICAgICAgICB9O1xuICAgICAgICAgIGF3YWl0IGxvZ0FjdGl2aXR5KGFnZW50LmNvbXBhbnlJZCwgYWdlbnQubmFtZSwgJ0xvZ2luJywgYExvZ2dlZCBpbiBzdWNjZXNzZnVsbHlgKTtcbiAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBhZ2VudDogYWdlbnQgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiSW52YWxpZCBlbWFpbCBvciBwYXNzd29yZC5cIiB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiTG9naW4gZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkRhdGFiYXNlIGNvbm5lY3Rpb24gZXJyb3IuXCIgfTtcbiAgICB9XG59O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlQWdlbnQobmFtZTogc3RyaW5nLCBlbWFpbDogc3RyaW5nLCBwYXNzd29yZF91bnVzZWQ6IHN0cmluZywgcm9sZTogQWdlbnRSb2xlLCBjb21wYW55SWQ6IHN0cmluZywgY3JlYXRlZEJ5OiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgYWdlbnQ/OiBBZ2VudDsgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFnZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBZ2VudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nQWdlbnQgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBlbWFpbDogZW1haWwudG9Mb3dlckNhc2UoKSB9KTtcblxuICAgICAgICBpZiAoZXhpc3RpbmdBZ2VudCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gYWdlbnQgd2l0aCB0aGlzIGVtYWlsIGFscmVhZHkgZXhpc3RzLlwiIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBoYXNoZWRQYXNzd29yZCA9IGF3YWl0IGhhc2hQYXNzd29yZChwYXNzd29yZF91bnVzZWQpO1xuICAgICAgICBjb25zdCBhdmF0YXIgPSAnJztcblxuICAgICAgICBjb25zdCBhZ2VudFRvSW5zZXJ0OiBPbWl0PEFnZW50LCAnaWQnIHwgJ19pZCc+ID0ge1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGVtYWlsOiBlbWFpbC50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgcGFzc3dvcmQ6IGhhc2hlZFBhc3N3b3JkLFxuICAgICAgICAgICAgcm9sZSxcbiAgICAgICAgICAgIGF2YXRhcixcbiAgICAgICAgICAgIHBob25lOiAnJywgXG4gICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5pbnNlcnRPbmUoYWdlbnRUb0luc2VydCBhcyBhbnkpO1xuXG4gICAgICAgIGlmIChyZXN1bHQuaW5zZXJ0ZWRJZCkge1xuICAgICAgICAgICAgY29uc3QgYWdlbnRzV2l0aFN0YXRzID0gYXdhaXQgZ2V0QWdlbnRzQnlDb21wYW55KGNvbXBhbnlJZCk7XG4gICAgICAgICAgICBjb25zdCBuZXdBZ2VudCA9IGFnZW50c1dpdGhTdGF0cy5maW5kKGEgPT4gYS5pZCA9PT0gcmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSk7XG5cbiAgICAgICAgICAgIGlmIChuZXdBZ2VudCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IGxvZ0FjdGl2aXR5KGNvbXBhbnlJZCwgY3JlYXRlZEJ5LCAnQ3JlYXRlIEFnZW50JywgYENyZWF0ZWQgYWdlbnQ6ICR7bmFtZX1gKTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBhZ2VudDogbmV3QWdlbnQgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJGYWlsZWQgdG8gY3JlYXRlIGFnZW50LlwiIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkNyZWF0ZSBhZ2VudCBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIHdoaWxlIGNyZWF0aW5nIHRoZSBhZ2VudC5cIiB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUFnZW50KGFnZW50SWQ6IHN0cmluZywgY29tcGFueUlkPzogc3RyaW5nLCBkZWxldGVkQnk/OiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbiwgbWVzc2FnZT86IHN0cmluZyB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcblxuICAgICAgICBpZiAoIWFnZW50SWQgfHwgIU9iamVjdElkLmlzVmFsaWQoYWdlbnRJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkludmFsaWQgYWdlbnQgSUQuXCIgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGFnZW50VG9EZWxldGUgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBfaWQ6IG5ldyBPYmplY3RJZChhZ2VudElkKSB9KTtcbiAgICAgICAgaWYgKCFhZ2VudFRvRGVsZXRlKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBZ2VudCBub3QgZm91bmQuXCIgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFByZXZlbnQgZGVsZXRpbmcgdGhlIGxhc3QgYWRtaW5cbiAgICAgICAgaWYgKGFnZW50VG9EZWxldGUucm9sZSA9PT0gJ2FkbWluJykge1xuICAgICAgICAgICAgY29uc3QgYWRtaW5Db3VudCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uY291bnREb2N1bWVudHMoeyBjb21wYW55SWQ6IGFnZW50VG9EZWxldGUuY29tcGFueUlkLCByb2xlOiAnYWRtaW4nIH0pO1xuICAgICAgICAgICAgaWYgKGFkbWluQ291bnQgPD0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkNhbm5vdCByZW1vdmUgdGhlIGxhc3QgYWRtaW5pc3RyYXRvci5cIiB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmRlbGV0ZU9uZSh7IF9pZDogbmV3IE9iamVjdElkKGFnZW50SWQpIH0pO1xuXG4gICAgICAgIGlmIChyZXN1bHQuZGVsZXRlZENvdW50ID09PSAxKSB7XG4gICAgICAgICAgICBpZiAoY29tcGFueUlkICYmIGRlbGV0ZWRCeSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IGxvZ0FjdGl2aXR5KGNvbXBhbnlJZCwgZGVsZXRlZEJ5LCAnRGVsZXRlIEFnZW50JywgYFJlbW92ZWQgYWdlbnQ6ICR7YWdlbnRUb0RlbGV0ZS5uYW1lfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIHJlbW92ZSBhZ2VudC5cIiB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJEZWxldGUgYWdlbnQgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZC5cIiB9O1xuICAgIH1cbn1cblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWN0aXZpdHlMb2dzKGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTxBY3Rpdml0eUxvZ1tdPiB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKCFjb21wYW55SWQgfHwgIU9iamVjdElkLmlzVmFsaWQoY29tcGFueUlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxvZ3NDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWN0aXZpdHlMb2dzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBsb2dzID0gYXdhaXQgbG9nc0NvbGxlY3Rpb24uZmluZCh7IGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkgfSkuc29ydCh7IHRpbWVzdGFtcDogLTEgfSkubGltaXQoNTApLnRvQXJyYXkoKTtcblxuICAgICAgICByZXR1cm4gbG9ncy5tYXAobG9nID0+ICh7XG4gICAgICAgICAgICAuLi5sb2csXG4gICAgICAgICAgICBfaWQ6IGxvZy5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGlkOiBsb2cuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBjb21wYW55SWQ6IGxvZy5jb21wYW55SWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogbG9nLnRpbWVzdGFtcC50b0lTT1N0cmluZygpLFxuICAgICAgICB9KSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIGFjdGl2aXR5IGxvZ3M6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENvbnRhY3RzQnlDb21wYW55KGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTxVc2VyW10+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIWNvbXBhbnlJZCB8fCAhT2JqZWN0SWQuaXNWYWxpZChjb21wYW55SWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29udGFjdHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0VXNlcnNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzID0gYXdhaXQgY29udGFjdHNDb2xsZWN0aW9uLmZpbmQoeyBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpIH0pLnRvQXJyYXkoKTtcblxuICAgICAgICByZXR1cm4gY29udGFjdHMubWFwKGNvbnRhY3QgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBfaWQsIGNvbXBhbnlJZCwgLi4ucmVzdCB9ID0gY29udGFjdCBhcyBhbnk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgICAgICAgICAgX2lkOiBfaWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBpZDogX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBjb21wYW55SWQ/LnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgbm90ZXM6IChjb250YWN0Lm5vdGVzIHx8IFtdKS5tYXAoKG5vdGU6IE5vdGUpID0+ICh7XG4gICAgICAgICAgICAgICAgICAgIC4uLm5vdGUsXG4gICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUobm90ZS50aW1lc3RhbXApLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIGNvbnRhY3RzOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVDb250YWN0KG5hbWU6IHN0cmluZywgZW1haWw6IHN0cmluZywgcGhvbmU6IHN0cmluZywgY29tcGFueUlkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgY29udGFjdD86IFVzZXIgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzQ29sbGVjdGlvbiA9IGF3YWl0IGdldFVzZXJzQ29sbGVjdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZXhpc3RpbmdDb250YWN0ID0gYXdhaXQgY29udGFjdHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBlbWFpbDogZW1haWwudG9Mb3dlckNhc2UoKSwgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSB9KTtcbiAgICAgICAgaWYgKGV4aXN0aW5nQ29udGFjdCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQSBjb250YWN0IHdpdGggdGhpcyBlbWFpbCBhbHJlYWR5IGV4aXN0cy5cIiB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY29udGFjdFRvSW5zZXJ0OiBPbWl0PFVzZXIsICdpZCcgfCAnX2lkJz4gPSB7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgZW1haWw6IGVtYWlsLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICBwaG9uZSxcbiAgICAgICAgICAgIGF2YXRhcjogJycsXG4gICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpLFxuICAgICAgICAgICAgbm90ZXM6IFtdLFxuICAgICAgICAgICAgb25saW5lOiBmYWxzZSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb250YWN0c0NvbGxlY3Rpb24uaW5zZXJ0T25lKGNvbnRhY3RUb0luc2VydCBhcyBhbnkpO1xuICAgICAgICBcbiAgICAgICAgaWYgKHJlc3VsdC5pbnNlcnRlZElkKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdDb250YWN0OiBVc2VyID0ge1xuICAgICAgICAgICAgICAgIC4uLihjb250YWN0VG9JbnNlcnQgYXMgT21pdDxVc2VyLCAnX2lkJ3wnaWQnPiksXG4gICAgICAgICAgICAgICAgX2lkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBjb250YWN0OiBuZXdDb250YWN0IH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJGYWlsZWQgdG8gY3JlYXRlIGNvbnRhY3QuXCIgfTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDcmVhdGUgY29udGFjdCBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkLlwiIH07XG4gICAgfVxufVxuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhc3NpZ25BZ2VudFRvQ29udGFjdChjb250YWN0SWQ6IHN0cmluZywgYWdlbnRJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW4gfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzQ29sbGVjdGlvbiA9IGF3YWl0IGdldFVzZXJzQ29sbGVjdGlvbigpO1xuICAgICAgICBhd2FpdCBjb250YWN0c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChjb250YWN0SWQpIH0sXG4gICAgICAgICAgICB7ICRzZXQ6IHsgYXNzaWduZWRBZ2VudElkOiBhZ2VudElkIH0gfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFzc2lnbmluZyBhZ2VudDpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFkZE5vdGVUb0NvbnRhY3QoY29udGFjdElkOiBzdHJpbmcsIGFnZW50SWQ6IHN0cmluZywgYWdlbnROYW1lOiBzdHJpbmcsIHRleHQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBub3RlPzogTm90ZSB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY29udGFjdHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0VXNlcnNDb2xsZWN0aW9uKCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBuZXdOb3RlOiBOb3RlID0ge1xuICAgICAgICAgICAgaWQ6IG5ldyBPYmplY3RJZCgpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBhZ2VudElkLFxuICAgICAgICAgICAgYWdlbnROYW1lLFxuICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udGFjdHNDb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICAgICAgICAgIHsgX2lkOiBuZXcgT2JqZWN0SWQoY29udGFjdElkKSB9LFxuICAgICAgICAgICAgeyAkcHVzaDogeyBub3RlczogeyAkZWFjaDogW25ld05vdGVdLCAkcG9zaXRpb246IDAgfSB9IH1cbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChyZXN1bHQubW9kaWZpZWRDb3VudCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIG5vdGU6IG5ld05vdGUgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhZGRpbmcgbm90ZTpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldE5vdGVzRm9yQ29udGFjdChjb250YWN0SWQ6IHN0cmluZyk6IFByb21pc2U8Tm90ZVtdPiB7XG4gICAgIHRyeSB7XG4gICAgICAgIGlmICghY29udGFjdElkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNvbnRhY3RJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb250YWN0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRVc2Vyc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgY29udGFjdCA9IGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi5maW5kT25lKHsgX2lkOiBuZXcgT2JqZWN0SWQoY29udGFjdElkKSB9KTtcbiAgICAgICAgcmV0dXJuIChjb250YWN0Py5ub3RlcyB8fCBbXSkubWFwKChub3RlOiBOb3RlKSA9PiAoe1xuICAgICAgICAgICAgLi4ubm90ZSxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUobm90ZS50aW1lc3RhbXApLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIH0pKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgbm90ZXM6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENoYXRzQnlDb21wYW55KGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTxDaGF0W10+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIWNvbXBhbnlJZCB8fCAhT2JqZWN0SWQuaXNWYWxpZChjb21wYW55SWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2hhdHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q2hhdHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGNoYXRzID0gYXdhaXQgY2hhdHNDb2xsZWN0aW9uLmFnZ3JlZ2F0ZShbXG4gICAgICAgICAgICB7ICRtYXRjaDogeyBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpIH0gfSxcbiAgICAgICAgICAgIHsgJHNvcnQ6IHsgbGFzdEFjdGl2aXR5OiAtMSB9IH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgJGxvb2t1cDoge1xuICAgICAgICAgICAgICAgICAgICBmcm9tOiAnY29udGFjdHMnLFxuICAgICAgICAgICAgICAgICAgICBsb2NhbEZpZWxkOiAndXNlcklkJyxcbiAgICAgICAgICAgICAgICAgICAgZm9yZWlnbkZpZWxkOiAnX2lkJyxcbiAgICAgICAgICAgICAgICAgICAgYXM6ICd1c2VyJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7ICR1bndpbmQ6ICckdXNlcicgfVxuICAgICAgICBdKS50b0FycmF5KCk7XG5cbiAgICAgICAgcmV0dXJuIGNoYXRzLm1hcChjaGF0ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgX2lkLCBjb21wYW55SWQsIHVzZXJJZCwgLi4ucmVzdCB9ID0gY2hhdCBhcyBhbnk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgICAgICAgICAgX2lkOiBfaWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBpZDogX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBjb21wYW55SWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICB1c2VySWQ6IHVzZXJJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2VzOiBbXSwgLy8gTWVzc2FnZXMgd2lsbCBiZSBsYXp5LWxvYWRlZFxuICAgICAgICAgICAgICAgIHVzZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uY2hhdC51c2VyLFxuICAgICAgICAgICAgICAgICAgICBfaWQ6IGNoYXQudXNlci5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGNoYXQudXNlci5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGFueUlkOiBjaGF0LnVzZXIuY29tcGFueUlkID8gY2hhdC51c2VyLmNvbXBhbnlJZC50b1N0cmluZygpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBjaGF0cyBieSBjb21wYW55OlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRNZXNzYWdlc0ZvckNoYXQoY2hhdElkOiBzdHJpbmcpOiBQcm9taXNlPE1lc3NhZ2VbXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghY2hhdElkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNoYXRJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXNzYWdlc0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRNZXNzYWdlc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgLy8gQWxzbyBmZXRjaCBzZW5kZXIgZGV0YWlscyBpZiBpdCdzIGEgdXNlciwgbm90IGFuIGFnZW50ICgnbWUnKVxuICAgICAgICBjb25zdCBtZXNzYWdlcyA9IGF3YWl0IG1lc3NhZ2VzQ29sbGVjdGlvbi5hZ2dyZWdhdGUoW1xuICAgICAgICAgICAgeyAkbWF0Y2g6IHsgY2hhdElkOiBuZXcgT2JqZWN0SWQoY2hhdElkKSB9IH0sXG4gICAgICAgICAgICB7ICRzb3J0OiB7IHRpbWVzdGFtcDogMSB9IH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgJGxvb2t1cDoge1xuICAgICAgICAgICAgICAgICAgICBmcm9tOiAnY29udGFjdHMnLFxuICAgICAgICAgICAgICAgICAgICBsb2NhbEZpZWxkOiAnc2VuZGVySWQnLFxuICAgICAgICAgICAgICAgICAgICBmb3JlaWduRmllbGQ6ICdfaWQnLFxuICAgICAgICAgICAgICAgICAgICBhczogJ3NlbmRlckluZm8nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdKS50b0FycmF5KCk7XG5cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2VzLm1hcChtc2cgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBfaWQsIGNoYXRJZCwgc2VuZGVySWQsIHNlbmRlckluZm8sIC4uLnJlc3QgfSA9IG1zZyBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBzZW5kZXIgPSBtc2cuc2VuZGVyID09PSAnbWUnID8gJ21lJyA6IChzZW5kZXJJbmZvWzBdIHx8IG51bGwpO1xuXG4gICAgICAgICAgICBpZiAoc2VuZGVyICYmIHNlbmRlciAhPT0gJ21lJykge1xuICAgICAgICAgICAgICAgIHNlbmRlci5pZCA9IHNlbmRlci5faWQudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5yZXN0LFxuICAgICAgICAgICAgICAgIGlkOiBfaWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBzZW5kZXIsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgbWVzc2FnZXM6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlbmRNZXNzYWdlKGNoYXRJZDogc3RyaW5nLCB0ZXh0OiBzdHJpbmcsIGFnZW50SWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBuZXdNZXNzYWdlPzogTWVzc2FnZSB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgbWVzc2FnZXNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0TWVzc2FnZXNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGNoYXRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldENoYXRzQ29sbGVjdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKTtcbiAgICAgICAgY29uc3QgbmV3TWVzc2FnZVRvSW5zZXJ0OiBPbWl0PE1lc3NhZ2UsICdpZCcgfCAnX2lkJz4gPSB7XG4gICAgICAgICAgICBjaGF0SWQ6IG5ldyBPYmplY3RJZChjaGF0SWQpLFxuICAgICAgICAgICAgc2VuZGVyOiAnbWUnLCAvLyAnbWUnIGRlbm90ZXMgdGhlIGFnZW50XG4gICAgICAgICAgICBzZW5kZXJJZDogbmV3IE9iamVjdElkKGFnZW50SWQpLFxuICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogdGltZXN0YW1wLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbWVzc2FnZXNDb2xsZWN0aW9uLmluc2VydE9uZShuZXdNZXNzYWdlVG9JbnNlcnQgYXMgYW55KTtcblxuICAgICAgICBpZiAocmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgIGF3YWl0IGNoYXRzQ29sbGVjdGlvbi51cGRhdGVPbmUoXG4gICAgICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChjaGF0SWQpIH0sXG4gICAgICAgICAgICAgICAgeyAkc2V0OiB7IFxuICAgICAgICAgICAgICAgICAgICBsYXN0TWVzc2FnZTogdGV4dCwgXG4gICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogdGltZXN0YW1wLnRvTG9jYWxlVGltZVN0cmluZyhbXSwgeyBob3VyOiAnMi1kaWdpdCcsIG1pbnV0ZTogJzItZGlnaXQnIH0pLFxuICAgICAgICAgICAgICAgICAgICBsYXN0QWN0aXZpdHk6IHRpbWVzdGFtcCBcbiAgICAgICAgICAgICAgICB9IH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGZpbmFsTmV3TWVzc2FnZTogTWVzc2FnZSA9IHtcbiAgICAgICAgICAgICAgICAuLi4obmV3TWVzc2FnZVRvSW5zZXJ0IGFzIE9taXQ8TWVzc2FnZSwgJ19pZCd8J2lkJz4pLFxuICAgICAgICAgICAgICAgIF9pZDogcmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBpZDogcmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjaGF0SWQ6IG5ld01lc3NhZ2VUb0luc2VydC5jaGF0SWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBzZW5kZXJJZDogbmV3TWVzc2FnZVRvSW5zZXJ0LnNlbmRlcklkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4geyBcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLCBcbiAgICAgICAgICAgICAgICBuZXdNZXNzYWdlOiBmaW5hbE5ld01lc3NhZ2VcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igc2VuZGluZyBtZXNzYWdlOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2V0Q2hhdGJvdFN0YXR1cyhjaGF0SWQ6IHN0cmluZywgaXNBY3RpdmU6IGJvb2xlYW4pOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbiB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY2hhdHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q2hhdHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGF3YWl0IGNoYXRzQ29sbGVjdGlvbi51cGRhdGVPbmUoXG4gICAgICAgICAgICB7IF9pZDogbmV3IE9iamVjdElkKGNoYXRJZCkgfSxcbiAgICAgICAgICAgIHsgJHNldDogeyBpc0NoYXRib3RBY3RpdmU6IGlzQWN0aXZlIH0gfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHNldHRpbmcgY2hhdGJvdCBzdGF0dXM6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzdGFydE5ld0NoYXRzKHVzZXJzOiBVc2VyW10sIG1lc3NhZ2U6IHN0cmluZywgY29tcGFueUlkOiBzdHJpbmcsIGFnZW50SWQ6IHN0cmluZyk6IFByb21pc2U8Q2hhdFtdPiB7XG4gICAgY29uc3QgY2hhdHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q2hhdHNDb2xsZWN0aW9uKCk7XG4gICAgY29uc3QgbmV3T3JVcGRhdGVkQ2hhdHM6IENoYXRbXSA9IFtdO1xuXG4gICAgZm9yIChjb25zdCB1c2VyIG9mIHVzZXJzKSB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nQ2hhdERvYyA9IGF3YWl0IGNoYXRzQ29sbGVjdGlvbi5maW5kT25lKHtcbiAgICAgICAgICAgIHVzZXJJZDogbmV3IE9iamVjdElkKHVzZXIuaWQpLFxuICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoZXhpc3RpbmdDaGF0RG9jKSB7XG4gICAgICAgICAgICBhd2FpdCBzZW5kTWVzc2FnZShleGlzdGluZ0NoYXREb2MuX2lkLnRvU3RyaW5nKCksIG1lc3NhZ2UsIGFnZW50SWQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCB1cGRhdGVkQ2hhdDogQ2hhdCA9IHtcbiAgICAgICAgICAgICAgICAuLi4oZXhpc3RpbmdDaGF0RG9jIGFzIGFueSksXG4gICAgICAgICAgICAgICAgX2lkOiBleGlzdGluZ0NoYXREb2MuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgaWQ6IGV4aXN0aW5nQ2hhdERvYy5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICB1c2VySWQ6IGV4aXN0aW5nQ2hhdERvYy51c2VySWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IGV4aXN0aW5nQ2hhdERvYy5jb21wYW55SWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBsYXN0TWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9Mb2NhbGVUaW1lU3RyaW5nKFtdLCB7IGhvdXI6ICcyLWRpZ2l0JywgbWludXRlOiAnMi1kaWdpdCcgfSksXG4gICAgICAgICAgICAgICAgbGFzdEFjdGl2aXR5OiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgICAgIHVzZXI6IHVzZXIsXG4gICAgICAgICAgICAgICAgbWVzc2FnZXM6IFtdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG5ld09yVXBkYXRlZENoYXRzLnB1c2godXBkYXRlZENoYXQpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgY29uc3QgbmV3Q2hhdERhdGE6IE9taXQ8Q2hhdCwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgICAgICB1c2VySWQ6IG5ldyBPYmplY3RJZCh1c2VyLmlkKSxcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpLFxuICAgICAgICAgICAgICAgIGxhc3RNZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogdGltZXN0YW1wLnRvTG9jYWxlVGltZVN0cmluZyhbXSwgeyBob3VyOiAnMi1kaWdpdCcsIG1pbnV0ZTogJzItZGlnaXQnIH0pLFxuICAgICAgICAgICAgICAgIGxhc3RBY3Rpdml0eTogdGltZXN0YW1wLFxuICAgICAgICAgICAgICAgIHVucmVhZENvdW50OiAwLFxuICAgICAgICAgICAgICAgIHByaW9yaXR5OiAnbm9ybWFsJyxcbiAgICAgICAgICAgICAgICBjaGFubmVsOiAnV2ViY2hhdCcsXG4gICAgICAgICAgICAgICAgaXNDaGF0Ym90QWN0aXZlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlczogW11cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBjaGF0UmVzdWx0ID0gYXdhaXQgY2hhdHNDb2xsZWN0aW9uLmluc2VydE9uZShuZXdDaGF0RGF0YSBhcyBhbnkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoY2hhdFJlc3VsdC5pbnNlcnRlZElkKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgc2VuZE1lc3NhZ2UoY2hhdFJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksIG1lc3NhZ2UsIGFnZW50SWQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNyZWF0ZWRDaGF0OiBDaGF0ID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi4obmV3Q2hhdERhdGEgYXMgYW55KSxcbiAgICAgICAgICAgICAgICAgICAgX2lkOiBjaGF0UmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGNoYXRSZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICB1c2VySWQ6IG5ld0NoYXREYXRhLnVzZXJJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBjb21wYW55SWQ6IG5ld0NoYXREYXRhLmNvbXBhbnlJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICB1c2VyOiB1c2VyLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlczogW10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBuZXdPclVwZGF0ZWRDaGF0cy5wdXNoKGNyZWF0ZWRDaGF0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3T3JVcGRhdGVkQ2hhdHM7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVDYW1wYWlnbihkYXRhOiBQYXJ0aWFsPENhbXBhaWduPiAmIHsgc2NoZWR1bGVUeXBlPzogJ25vdycgfCAnbGF0ZXInIH0sIGNvbXBhbnlJZDogc3RyaW5nLCBhZ2VudElkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgY2FtcGFpZ24/OiBDYW1wYWlnbjsgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNhbXBhaWduc0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRDYW1wYWlnbnNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzQ29sbGVjdGlvbiA9IGF3YWl0IGdldFVzZXJzQ29sbGVjdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgbGV0IHN0YXR1czogQ2FtcGFpZ25bJ3N0YXR1cyddID0gJ0RyYWZ0JztcbiAgICAgICAgbGV0IHNlbnRBdDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgZGVsaXZlcnkgPSAwO1xuICAgICAgICBsZXQgZW5nYWdlbWVudCA9IDA7XG4gICAgICAgIGxldCBjb252ZXJzaW9uID0gMDtcblxuICAgICAgICBpZiAoZGF0YS5zY2hlZHVsZVR5cGUgPT09ICdub3cnKSB7XG4gICAgICAgICAgICBzdGF0dXMgPSAnQ29tcGxldGVkJztcbiAgICAgICAgICAgIHNlbnRBdCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgIC8vIEdlbmVyYXRlIG1vY2sgcGVyZm9ybWFuY2UgZGF0YSBmb3IgaW1tZWRpYXRlIGNhbXBhaWduc1xuICAgICAgICAgICAgZGVsaXZlcnkgPSA5NSArIE1hdGgucmFuZG9tKCkgKiA1OyBcbiAgICAgICAgICAgIGVuZ2FnZW1lbnQgPSAxMCArIE1hdGgucmFuZG9tKCkgKiAxNTtcbiAgICAgICAgICAgIGNvbnZlcnNpb24gPSAyICsgTWF0aC5yYW5kb20oKSAqIDg7IFxuXG4gICAgICAgICAgICAvLyBBY3R1YWxseSBzZW5kIHRoZSBtZXNzYWdlc1xuICAgICAgICAgICAgaWYgKGRhdGEuYXVkaWVuY2UgJiYgZGF0YS5tZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXVkaWVuY2VDb250YWN0cyA9IGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi5maW5kKHsgX2lkOiB7ICRpbjogZGF0YS5hdWRpZW5jZS5tYXAoaWQgPT4gbmV3IE9iamVjdElkKGlkKSkgfSB9KS50b0FycmF5KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdXNlcnMgPSBhdWRpZW5jZUNvbnRhY3RzLm1hcChjID0+ICh7XG4gICAgICAgICAgICAgICAgICAgIC4uLmMsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBjLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBfaWQ6IGMuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgfSkpIGFzIFVzZXJbXTtcblxuICAgICAgICAgICAgICAgIGF3YWl0IHN0YXJ0TmV3Q2hhdHModXNlcnMsIGRhdGEubWVzc2FnZSwgY29tcGFueUlkLCBhZ2VudElkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChkYXRhLnNjaGVkdWxlVHlwZSA9PT0gJ2xhdGVyJykge1xuICAgICAgICAgICAgc3RhdHVzID0gJ1NjaGVkdWxlZCc7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBuZXdDYW1wYWlnbjogT21pdDxDYW1wYWlnbiwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgIHRpdGxlOiBkYXRhLnRpdGxlISxcbiAgICAgICAgICAgIHR5cGU6IGRhdGEudHlwZSB8fCAnQnJvYWRjYXN0JyxcbiAgICAgICAgICAgIHN0YXR1czogc3RhdHVzLFxuICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSxcbiAgICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgYXVkaWVuY2U6IGRhdGEuYXVkaWVuY2UgfHwgW10sXG4gICAgICAgICAgICBtZXNzYWdlOiBkYXRhLm1lc3NhZ2UgfHwgXCJcIixcbiAgICAgICAgICAgIHNlbnRBdDogc2VudEF0LFxuICAgICAgICAgICAgZGVsaXZlcnksXG4gICAgICAgICAgICBlbmdhZ2VtZW50LFxuICAgICAgICAgICAgY29udmVyc2lvbixcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjYW1wYWlnbnNDb2xsZWN0aW9uLmluc2VydE9uZShuZXdDYW1wYWlnbiBhcyBhbnkpO1xuICAgICAgICBpZiAocmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNyZWF0ZWRDYW1wYWlnbjogQ2FtcGFpZ24gPSB7XG4gICAgICAgICAgICAgICAgLi4ubmV3Q2FtcGFpZ24sXG4gICAgICAgICAgICAgICAgX2lkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBjYW1wYWlnbjogY3JlYXRlZENhbXBhaWduIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIGNyZWF0ZSBjYW1wYWlnbi5cIiB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDcmVhdGUgY2FtcGFpZ24gZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZC5cIiB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENhbXBhaWduc0J5Q29tcGFueShjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8Q2FtcGFpZ25bXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghY29tcGFueUlkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNvbXBhbnlJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjYW1wYWlnbnNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q2FtcGFpZ25zQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBjYW1wYWlnbnMgPSBhd2FpdCBjYW1wYWlnbnNDb2xsZWN0aW9uLmZpbmQoeyBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpIH0pLnNvcnQoeyBjcmVhdGVkQXQ6IC0xIH0pLnRvQXJyYXkoKTtcblxuICAgICAgICByZXR1cm4gY2FtcGFpZ25zLm1hcChjYW1wYWlnbiA9PiAoe1xuICAgICAgICAgICAgLi4uY2FtcGFpZ24sXG4gICAgICAgICAgICBfaWQ6IGNhbXBhaWduLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgaWQ6IGNhbXBhaWduLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgY29tcGFueUlkOiBjYW1wYWlnbi5jb21wYW55SWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoY2FtcGFpZ24uY3JlYXRlZEF0KS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgc2VudEF0OiBjYW1wYWlnbi5zZW50QXQgPyBuZXcgRGF0ZShjYW1wYWlnbi5zZW50QXQpLnRvSVNPU3RyaW5nKCkgOiB1bmRlZmluZWQsXG4gICAgICAgIH0pKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgY2FtcGFpZ25zOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbXBvcnRDb250YWN0c0Zyb21DU1YoY29udGFjdHNEYXRhOiB7IG5hbWU6IHN0cmluZzsgZW1haWw6IHN0cmluZzsgcGhvbmU6IHN0cmluZyB9W10sIGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U6IHN0cmluZzsgbmV3Q29udGFjdHM6IFVzZXJbXTsgaW1wb3J0ZWRDb3VudDogbnVtYmVyOyBza2lwcGVkQ291bnQ6IG51bWJlcjsgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzQ29sbGVjdGlvbiA9IGF3YWl0IGdldFVzZXJzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBuZXdDb250YWN0czogVXNlcltdID0gW107XG4gICAgICAgIGxldCBpbXBvcnRlZENvdW50ID0gMDtcbiAgICAgICAgbGV0IHNraXBwZWRDb3VudCA9IDA7XG5cbiAgICAgICAgY29uc3QgY29tcGFueU9iaklkID0gbmV3IE9iamVjdElkKGNvbXBhbnlJZCk7XG5cbiAgICAgICAgZm9yIChjb25zdCBjb250YWN0IG9mIGNvbnRhY3RzRGF0YSkge1xuICAgICAgICAgICAgbGV0IGV4aXN0aW5nQ29udGFjdCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoY29udGFjdC5lbWFpbCkge1xuICAgICAgICAgICAgICAgIGV4aXN0aW5nQ29udGFjdCA9IGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi5maW5kT25lKHtcbiAgICAgICAgICAgICAgICAgICAgZW1haWw6IGNvbnRhY3QuZW1haWwudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGFueUlkOiBjb21wYW55T2JqSWRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGV4aXN0aW5nQ29udGFjdCkge1xuICAgICAgICAgICAgICAgIHNraXBwZWRDb3VudCsrO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBjb250YWN0VG9JbnNlcnQ6IE9taXQ8VXNlciwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBjb250YWN0Lm5hbWUsXG4gICAgICAgICAgICAgICAgZW1haWw6IGNvbnRhY3QuZW1haWwudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICAgICBwaG9uZTogY29udGFjdC5waG9uZSxcbiAgICAgICAgICAgICAgICBhdmF0YXI6ICcnLFxuICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogY29tcGFueU9iaklkLFxuICAgICAgICAgICAgICAgIG5vdGVzOiBbXSxcbiAgICAgICAgICAgICAgICBvbmxpbmU6IGZhbHNlLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udGFjdHNDb2xsZWN0aW9uLmluc2VydE9uZShjb250YWN0VG9JbnNlcnQgYXMgYW55KTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQuaW5zZXJ0ZWRJZCkge1xuICAgICAgICAgICAgICAgIGltcG9ydGVkQ291bnQrKztcbiAgICAgICAgICAgICAgICBuZXdDb250YWN0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgLi4uKGNvbnRhY3RUb0luc2VydCBhcyBPbWl0PFVzZXIsICdpZCcgfCAnX2lkJz4pLFxuICAgICAgICAgICAgICAgICAgICBfaWQ6IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIGlkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBjb21wYW55SWQ6IGNvbXBhbnlJZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgbWVzc2FnZTogYEltcG9ydCBjb21wbGV0ZS4gQWRkZWQgJHtpbXBvcnRlZENvdW50fSBuZXcgY29udGFjdHMsIHNraXBwZWQgJHtza2lwcGVkQ291bnR9IGR1cGxpY2F0ZXMuYCxcbiAgICAgICAgICAgIG5ld0NvbnRhY3RzLFxuICAgICAgICAgICAgaW1wb3J0ZWRDb3VudCxcbiAgICAgICAgICAgIHNraXBwZWRDb3VudFxuICAgICAgICB9O1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkNTViBpbXBvcnQgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZCBkdXJpbmcgaW1wb3J0LlwiLCBuZXdDb250YWN0czogW10sIGltcG9ydGVkQ291bnQ6IDAsIHNraXBwZWRDb3VudDogMCB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUFnZW50QXZhdGFyKGFnZW50SWQ6IHN0cmluZywgYXZhdGFyOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgYXZhdGFyPzogc3RyaW5nOyB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHVwZGF0ZVJlc3VsdCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChhZ2VudElkKSB9LFxuICAgICAgICAgICAgeyAkc2V0OiB7IGF2YXRhciB9IH1cbiAgICAgICAgKTtcblxuICAgICAgICBpZiAodXBkYXRlUmVzdWx0Lm1vZGlmaWVkQ291bnQgPT09IDAgJiYgdXBkYXRlUmVzdWx0Lm1hdGNoZWRDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQWdlbnQgbm90IGZvdW5kLlwiIH07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIExvZyBhY3Rpdml0eVxuICAgICAgICBjb25zdCBhZ2VudCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IF9pZDogbmV3IE9iamVjdElkKGFnZW50SWQpIH0pO1xuICAgICAgICBpZiAoYWdlbnQpIHtcbiAgICAgICAgICAgICBhd2FpdCBsb2dBY3Rpdml0eShhZ2VudC5jb21wYW55SWQsIGFnZW50Lm5hbWUsICdVcGRhdGUgUHJvZmlsZScsIGBVcGRhdGVkIHByb2ZpbGUgcGljdHVyZWApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgYXZhdGFyOiBhdmF0YXIgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVXBkYXRlIGFnZW50IGF2YXRhciBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkLlwiIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2NoZWR1bGVBbmFseXRpY3NSZXBvcnQoZW1haWw6IHN0cmluZywgZnJlcXVlbmN5OiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZTogc3RyaW5nOyB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gSW4gYSByZWFsIGFwcGxpY2F0aW9uLCB5b3Ugd291bGQgY29ubmVjdCB0byBhIGpvYiBzY2hlZHVsZXIgKGUuZy4sIEJ1bGxNUSwgY3JvbilcbiAgICAgICAgLy8gYW5kIHF1ZXVlIGEgam9iIHRvIHNlbmQgYW4gZW1haWwgcmVwb3J0IGJhc2VkIG9uIHRoZSBmcmVxdWVuY3kuXG4gICAgICAgIC8vIEZvciB0aGlzIGRlbW8sIHdlJ2xsIGp1c3QgbG9nIGl0IHRvIHRoZSBjb25zb2xlLlxuICAgICAgICBjb25zb2xlLmxvZyhgQW5hbHl0aWNzIHJlcG9ydCBzY2hlZHVsZWQgZm9yICR7ZW1haWx9IHdpdGggZnJlcXVlbmN5OiAke2ZyZXF1ZW5jeX1gKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFlvdSBjb3VsZCBhbHNvIGxvZyB0aGlzIGFzIGEgc3lzdGVtIGFjdGl2aXR5XG4gICAgICAgIC8vIGF3YWl0IGxvZ0FjdGl2aXR5KGNvbXBhbnlJZCwgJ1N5c3RlbScsICdTY2hlZHVsZSBSZXBvcnQnLCBgQW5hbHl0aWNzIHJlcG9ydCBzY2hlZHVsZWQgZm9yICR7ZW1haWx9ICgke2ZyZXF1ZW5jeX0pYCk7XG5cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgbWVzc2FnZTogYFJlcG9ydCBzdWNjZXNzZnVsbHkgc2NoZWR1bGVkIGZvciAke2VtYWlsfS5gIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlNjaGVkdWxlIHJlcG9ydCBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIHdoaWxlIHNjaGVkdWxpbmcgdGhlIHJlcG9ydC5cIiB9O1xuICAgIH1cbn1cbiAgICBcblxuICAgIFxuXG4gICAgXG5cblxuXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6ImtTQXVNc0IifQ==
}}),
"[project]/src/app/data:22d56d [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"70fcfed8bffc4caf060f93474e4a8996b303b4b0fc":"addCommentToAnnouncement"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "addCommentToAnnouncement": (()=>addCommentToAnnouncement)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var addCommentToAnnouncement = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("70fcfed8bffc4caf060f93474e4a8996b303b4b0fc", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "addCommentToAnnouncement"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:734872 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"602c899fcfd2f9f3ff717cf7b6992bb14c9e5acee8":"updateAgentAvatar"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "updateAgentAvatar": (()=>updateAgentAvatar)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var updateAgentAvatar = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("602c899fcfd2f9f3ff717cf7b6992bb14c9e5acee8", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "updateAgentAvatar"); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4vYWN0aW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbid1c2Ugc2VydmVyJztcblxuaW1wb3J0IHsgZ2V0RGIgfSBmcm9tIFwiQC9saWIvZGJcIjtcbmltcG9ydCB7IGhhc2hQYXNzd29yZCwgdmVyaWZ5UGFzc3dvcmQgfSBmcm9tIFwiQC9saWIvYXV0aFwiO1xuaW1wb3J0IHR5cGUgeyBBZ2VudCwgQWdlbnRSb2xlLCBBbm5vdW5jZW1lbnQsIENvbXBhbnksIENvbW1lbnQsIEFjdGl2aXR5TG9nLCBVc2VyLCBOb3RlLCBDaGF0LCBNZXNzYWdlLCBDaGFubmVsLCBDYW1wYWlnbiB9IGZyb20gXCJAL3R5cGVzXCI7XG5pbXBvcnQgeyBDb2xsZWN0aW9uLCBEYiwgT2JqZWN0SWQgfSBmcm9tIFwibW9uZ29kYlwiO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRBZ2VudHNDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxBZ2VudD4+IHtcbiAgICBjb25zdCBkYjogRGIgPSBhd2FpdCBnZXREYigpO1xuICAgIHJldHVybiBkYi5jb2xsZWN0aW9uPEFnZW50PignYWdlbnRzJyk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDb21wYW5pZXNDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxDb21wYW55Pj4ge1xuICAgIGNvbnN0IGRiOiBEYiA9IGF3YWl0IGdldERiKCk7XG4gICAgcmV0dXJuIGRiLmNvbGxlY3Rpb248Q29tcGFueT4oJ2NvbXBhbmllcycpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRBbm5vdW5jZW1lbnRzQ29sbGVjdGlvbigpOiBQcm9taXNlPENvbGxlY3Rpb248QW5ub3VuY2VtZW50Pj4ge1xuICAgIGNvbnN0IGRiOiBEYiA9IGF3YWl0IGdldERiKCk7XG4gICAgcmV0dXJuIGRiLmNvbGxlY3Rpb248QW5ub3VuY2VtZW50PignYW5ub3VuY2VtZW50cycpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRBY3Rpdml0eUxvZ3NDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxBY3Rpdml0eUxvZz4+IHtcbiAgICBjb25zdCBkYjogRGIgPSBhd2FpdCBnZXREYigpO1xuICAgIHJldHVybiBkYi5jb2xsZWN0aW9uPEFjdGl2aXR5TG9nPignYWN0aXZpdHlfbG9ncycpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VXNlcnNDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxVc2VyPj4ge1xuICAgIGNvbnN0IGRiOiBEYiA9IGF3YWl0IGdldERiKCk7XG4gICAgcmV0dXJuIGRiLmNvbGxlY3Rpb248VXNlcj4oJ2NvbnRhY3RzJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENoYXRzQ29sbGVjdGlvbigpOiBQcm9taXNlPENvbGxlY3Rpb248Q2hhdD4+IHtcbiAgICBjb25zdCBkYjogRGIgPSBhd2FpdCBnZXREYigpO1xuICAgIHJldHVybiBkYi5jb2xsZWN0aW9uPENoYXQ+KCdjaGF0cycpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRNZXNzYWdlc0NvbGxlY3Rpb24oKTogUHJvbWlzZTxDb2xsZWN0aW9uPE1lc3NhZ2U+PiB7XG4gICAgY29uc3QgZGI6IERiID0gYXdhaXQgZ2V0RGIoKTtcbiAgICByZXR1cm4gZGIuY29sbGVjdGlvbjxNZXNzYWdlPignbWVzc2FnZXMnKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0Q2FtcGFpZ25zQ29sbGVjdGlvbigpOiBQcm9taXNlPENvbGxlY3Rpb248Q2FtcGFpZ24+PiB7XG4gICAgY29uc3QgZGI6IERiID0gYXdhaXQgZ2V0RGIoKTtcbiAgICByZXR1cm4gZGIuY29sbGVjdGlvbjxDYW1wYWlnbj4oJ2NhbXBhaWducycpO1xufVxuXG5cbmFzeW5jIGZ1bmN0aW9uIGxvZ0FjdGl2aXR5KGNvbXBhbnlJZDogc3RyaW5nIHwgT2JqZWN0SWQsIGFnZW50TmFtZTogc3RyaW5nLCBhY3Rpb246IHN0cmluZywgZGV0YWlsczogc3RyaW5nKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgbG9nc0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBY3Rpdml0eUxvZ3NDb2xsZWN0aW9uKCk7XG4gICAgICAgIGF3YWl0IGxvZ3NDb2xsZWN0aW9uLmluc2VydE9uZSh7XG4gICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpLFxuICAgICAgICAgICAgYWdlbnROYW1lLFxuICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgZGV0YWlscyxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBsb2cgYWN0aXZpdHk6XCIsIGVycm9yKTtcbiAgICB9XG59XG5cbi8vIEEgc2ltcGxlIGhhc2hpbmcgZnVuY3Rpb24gdG8gY3JlYXRlIGEgcHNldWRvLXJhbmRvbSBidXQgY29uc2lzdGVudCBudW1iZXIgZnJvbSBhIHN0cmluZy5cbmNvbnN0IHNpbXBsZUhhc2ggPSAoc3RyOiBzdHJpbmcpID0+IHtcbiAgbGV0IGhhc2ggPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNoYXIgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoID0gKGhhc2ggPDwgNSkgLSBoYXNoICsgY2hhcjtcbiAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICB9XG4gIHJldHVybiBNYXRoLmFicyhoYXNoKTtcbn07XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFnZW50c0J5Q29tcGFueShjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8QWdlbnRbXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghY29tcGFueUlkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNvbXBhbnlJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhZ2VudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWdlbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBtZXNzYWdlc0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRNZXNzYWdlc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgYWdlbnRzID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5maW5kKHsgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSB9LCB7IHByb2plY3Rpb246IHsgcGFzc3dvcmQ6IDAgfSB9KS50b0FycmF5KCk7XG5cbiAgICAgICAgY29uc3QgYWdlbnREYXRhV2l0aFN0YXRzID0gYXdhaXQgUHJvbWlzZS5hbGwoYWdlbnRzLm1hcChhc3luYyAoYWdlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIHRvZGF5LnNldEhvdXJzKDAsIDAsIDAsIDApO1xuXG4gICAgICAgICAgICBjb25zdCBjb252ZXJzYXRpb25zVG9kYXkgPSBhd2FpdCBtZXNzYWdlc0NvbGxlY3Rpb24uY291bnREb2N1bWVudHMoe1xuICAgICAgICAgICAgICAgIHNlbmRlcklkOiBhZ2VudC5faWQsXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wOiB7ICRndGU6IHRvZGF5LnRvSVNPU3RyaW5nKCkgfSBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBzdGF0dXNlczogQXJyYXk8J09ubGluZScgfCAnT2ZmbGluZScgfCAnQnVzeSc+ID0gWydPbmxpbmUnLCAnT2ZmbGluZScsICdCdXN5J107XG4gICAgICAgICAgICBjb25zdCBoYXNoID0gc2ltcGxlSGFzaChhZ2VudC5uYW1lKTtcbiAgICAgICAgICAgIGNvbnN0IHJhbmRvbVN0YXR1cyA9IHN0YXR1c2VzW2hhc2ggJSBzdGF0dXNlcy5sZW5ndGhdO1xuXG4gICAgICAgICAgICBsZXQgYXZnUmVzcG9uc2VUaW1lID0gXCJOL0FcIjtcbiAgICAgICAgICAgIGxldCBjc2F0OiBudW1iZXIgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIGlmIChjb252ZXJzYXRpb25zVG9kYXkgPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXZnUmVzcG9uc2VNaW51dGVzID0gKGhhc2ggJSA0KSArIDE7IC8vIDEgdG8gNCBtaW51dGVzXG4gICAgICAgICAgICAgICAgY29uc3QgYXZnUmVzcG9uc2VTZWNvbmRzID0gaGFzaCAlIDYwOyAvLyAwIHRvIDU5IHNlY29uZHNcbiAgICAgICAgICAgICAgICBhdmdSZXNwb25zZVRpbWUgPSBgJHthdmdSZXNwb25zZU1pbnV0ZXN9bSAke2F2Z1Jlc3BvbnNlU2Vjb25kc31zYDtcbiAgICAgICAgICAgICAgICBjc2F0ID0gODUgKyAoaGFzaCAlIDE1KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5hZ2VudCxcbiAgICAgICAgICAgICAgICBfaWQ6IGFnZW50Ll9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiBhZ2VudC5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IGFnZW50LmNvbXBhbnlJZD8udG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjb252ZXJzYXRpb25zVG9kYXksXG4gICAgICAgICAgICAgICAgc3RhdHVzOiByYW5kb21TdGF0dXMsXG4gICAgICAgICAgICAgICAgYXZnUmVzcG9uc2VUaW1lLFxuICAgICAgICAgICAgICAgIGNzYXQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gYWdlbnREYXRhV2l0aFN0YXRzO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBhZ2VudHMgYnkgY29tcGFueTpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlQW5ub3VuY2VtZW50KGRhdGE6IHsgdGl0bGU6IHN0cmluZzsgY29udGVudDogc3RyaW5nOyBjYXRlZ29yeTogc3RyaW5nOyBhdXRob3JJZDogc3RyaW5nOyBjb21wYW55SWQ6IHN0cmluZyB9KTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U/OiBzdHJpbmc7IGFubm91bmNlbWVudD86IEFubm91bmNlbWVudCB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYW5ub3VuY2VtZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBbm5vdW5jZW1lbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBhZ2VudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWdlbnRzQ29sbGVjdGlvbigpO1xuXG4gICAgICAgIGNvbnN0IGF1dGhvciA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IF9pZDogbmV3IE9iamVjdElkKGRhdGEuYXV0aG9ySWQpIH0pO1xuICAgICAgICBpZiAoIWF1dGhvcikge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQXV0aG9yIG5vdCBmb3VuZC5cIiB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbmV3QW5ub3VuY2VtZW50OiBPbWl0PEFubm91bmNlbWVudCwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgIHRpdGxlOiBkYXRhLnRpdGxlLFxuICAgICAgICAgICAgY29udGVudDogZGF0YS5jb250ZW50LFxuICAgICAgICAgICAgY2F0ZWdvcnk6IGRhdGEuY2F0ZWdvcnkgYXMgYW55LFxuICAgICAgICAgICAgYXV0aG9yOiB7XG4gICAgICAgICAgICAgICAgaWQ6IGF1dGhvci5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBuYW1lOiBhdXRob3IubmFtZSxcbiAgICAgICAgICAgICAgICBhdmF0YXI6IGF1dGhvci5hdmF0YXJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChkYXRhLmNvbXBhbnlJZCksXG4gICAgICAgICAgICBkYXRlOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICByZWFkQnk6IFtdLFxuICAgICAgICAgICAgY29tbWVudHM6IFtdLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uLmluc2VydE9uZShuZXdBbm5vdW5jZW1lbnQgYXMgYW55KTtcbiAgICAgICAgYXdhaXQgbG9nQWN0aXZpdHkoZGF0YS5jb21wYW55SWQsIGF1dGhvci5uYW1lLCAnQ3JlYXRlIEFubm91bmNlbWVudCcsIGBQdWJsaXNoZWQ6IFwiJHtkYXRhLnRpdGxlfVwiYCk7XG5cblxuICAgICAgICBpZiAocmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNyZWF0ZWRBbm5vdW5jZW1lbnQ6IEFubm91bmNlbWVudCA9IHtcbiAgICAgICAgICAgICAgICAuLi4obmV3QW5ub3VuY2VtZW50IGFzIE9taXQ8QW5ub3VuY2VtZW50LCAnX2lkJyB8ICdpZCc+KSxcbiAgICAgICAgICAgICAgICBfaWQ6IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgaWQ6IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoZGF0YS5jb21wYW55SWQpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgYW5ub3VuY2VtZW50OiBjcmVhdGVkQW5ub3VuY2VtZW50IH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJGYWlsZWQgdG8gY3JlYXRlIGFubm91bmNlbWVudC5cIiB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDcmVhdGUgYW5ub3VuY2VtZW50IGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQuXCIgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBbm5vdW5jZW1lbnRzQnlDb21wYW55KGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTxBbm5vdW5jZW1lbnRbXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghY29tcGFueUlkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNvbXBhbnlJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbm5vdW5jZW1lbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFubm91bmNlbWVudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGFubm91bmNlbWVudHMgPSBhd2FpdCBhbm5vdW5jZW1lbnRzQ29sbGVjdGlvbi5maW5kKHsgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSB9KS5zb3J0KHsgZGF0ZTogLTEgfSkudG9BcnJheSgpO1xuXG4gICAgICAgIHJldHVybiBhbm5vdW5jZW1lbnRzLm1hcChhbm5vdW5jZW1lbnQgPT4gKHtcbiAgICAgICAgICAgIC4uLmFubm91bmNlbWVudCxcbiAgICAgICAgICAgIF9pZDogYW5ub3VuY2VtZW50Ll9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgaWQ6IGFubm91bmNlbWVudC5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGNvbXBhbnlJZDogYW5ub3VuY2VtZW50LmNvbXBhbnlJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgcmVhZEJ5OiBhbm5vdW5jZW1lbnQucmVhZEJ5IHx8IFtdLFxuICAgICAgICAgICAgY29tbWVudHM6IChhbm5vdW5jZW1lbnQuY29tbWVudHMgfHwgW10pLm1hcCgoY29tbWVudDogQ29tbWVudCkgPT4gKHtcbiAgICAgICAgICAgICAgICAuLi5jb21tZW50LFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoY29tbWVudC50aW1lc3RhbXApLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICB9KSksXG4gICAgICAgIH0pKTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBhbm5vdW5jZW1lbnRzIGJ5IGNvbXBhbnk6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1hcmtBbm5vdW5jZW1lbnRBc1JlYWQoYW5ub3VuY2VtZW50SWQ6IHN0cmluZywgYWdlbnRJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW4gfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QW5ub3VuY2VtZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgYXdhaXQgYW5ub3VuY2VtZW50c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChhbm5vdW5jZW1lbnRJZCkgfSxcbiAgICAgICAgICAgIHsgJGFkZFRvU2V0OiB7IHJlYWRCeTogYWdlbnRJZCB9IH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXJrIGFzIHJlYWQgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhZGRDb21tZW50VG9Bbm5vdW5jZW1lbnQoYW5ub3VuY2VtZW50SWQ6IHN0cmluZywgYXV0aG9ySWQ6IHN0cmluZywgY29udGVudDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW4sIGNvbW1lbnQ/OiBDb21tZW50IH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBhZ2VudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWdlbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBhdXRob3IgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBfaWQ6IG5ldyBPYmplY3RJZChhdXRob3JJZCkgfSk7XG4gICAgICAgIGlmICghYXV0aG9yKSByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xuXG4gICAgICAgIGNvbnN0IG5ld0NvbW1lbnQ6IENvbW1lbnQgPSB7XG4gICAgICAgICAgICBpZDogbmV3IE9iamVjdElkKCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGF1dGhvcjoge1xuICAgICAgICAgICAgICAgIGlkOiBhdXRob3IuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgbmFtZTogYXV0aG9yLm5hbWUsXG4gICAgICAgICAgICAgICAgYXZhdGFyOiBhdXRob3IuYXZhdGFyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QW5ub3VuY2VtZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgYXdhaXQgYW5ub3VuY2VtZW50c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChhbm5vdW5jZW1lbnRJZCkgfSxcbiAgICAgICAgICAgIHsgJHB1c2g6IHsgY29tbWVudHM6IG5ld0NvbW1lbnQgfSB9XG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBjb21tZW50OiBuZXdDb21tZW50IH07XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQWRkIGNvbW1lbnQgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUFnZW50UHJvZmlsZShhZ2VudElkOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgZW1haWw6IHN0cmluZywgcGhvbmU6IHN0cmluZywgY29tcGFueUlkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgYWdlbnQ/OiBBZ2VudDsgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFnZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBZ2VudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCB1cGRhdGVSZXN1bHQgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICAgICAgICAgIHsgX2lkOiBuZXcgT2JqZWN0SWQoYWdlbnRJZCkgfSxcbiAgICAgICAgICAgIHsgJHNldDogeyBuYW1lLCBlbWFpbCwgcGhvbmUgfSB9XG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKHVwZGF0ZVJlc3VsdC5tb2RpZmllZENvdW50ID09PSAwICYmIHVwZGF0ZVJlc3VsdC5tYXRjaGVkQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFnZW50IG5vdCBmb3VuZC5cIiB9O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBhZ2VudFdpdGhTdGF0cyA9IGF3YWl0IGdldEFnZW50c0J5Q29tcGFueShjb21wYW55SWQpO1xuICAgICAgICBjb25zdCB1cGRhdGVkQWdlbnQgPSBhZ2VudFdpdGhTdGF0cy5maW5kKGEgPT4gYS5pZCA9PT0gYWdlbnRJZCk7XG5cblxuICAgICAgICBpZiAodXBkYXRlZEFnZW50KSB7XG4gICAgICAgICAgICBhd2FpdCBsb2dBY3Rpdml0eShjb21wYW55SWQsIHVwZGF0ZWRBZ2VudC5uYW1lLCAnVXBkYXRlIFByb2ZpbGUnLCBgVXBkYXRlZCBhZ2VudCBwcm9maWxlIGZvciAke25hbWV9YCk7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBhZ2VudDogdXBkYXRlZEFnZW50IH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJGYWlsZWQgdG8gcmV0cmlldmUgdXBkYXRlZCBhZ2VudC5cIiB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJVcGRhdGUgYWdlbnQgcHJvZmlsZSBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkLlwiIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlQWdlbnRQYXNzd29yZChhZ2VudElkOiBzdHJpbmcsIGN1cnJlbnRQYXNzd29yZDogc3RyaW5nLCBuZXdQYXNzd29yZDogc3RyaW5nLCBjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBtZXNzYWdlOiBzdHJpbmcgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFnZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBZ2VudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGFnZW50ID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5maW5kT25lKHsgX2lkOiBuZXcgT2JqZWN0SWQoYWdlbnRJZCkgfSk7XG5cbiAgICAgICAgaWYgKCFhZ2VudCB8fCAhYWdlbnQucGFzc3dvcmQpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFnZW50IG5vdCBmb3VuZC5cIiB9O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBpc1Bhc3N3b3JkVmFsaWQgPSBhd2FpdCB2ZXJpZnlQYXNzd29yZChjdXJyZW50UGFzc3dvcmQsIGFnZW50LnBhc3N3b3JkKTtcbiAgICAgICAgaWYgKCFpc1Bhc3N3b3JkVmFsaWQpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkluY29ycmVjdCBjdXJyZW50IHBhc3N3b3JkLlwiIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBuZXdIYXNoZWRQYXNzd29yZCA9IGF3YWl0IGhhc2hQYXNzd29yZChuZXdQYXNzd29yZCk7XG4gICAgICAgIGF3YWl0IGFnZW50c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChhZ2VudElkKSB9LFxuICAgICAgICAgICAgeyAkc2V0OiB7IHBhc3N3b3JkOiBuZXdIYXNoZWRQYXNzd29yZCB9IH1cbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIGF3YWl0IGxvZ0FjdGl2aXR5KGNvbXBhbnlJZCwgYWdlbnQubmFtZSwgJ1VwZGF0ZSBQYXNzd29yZCcsIGBDaGFuZ2VkIHBhc3N3b3JkYCk7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIG1lc3NhZ2U6IFwiUGFzc3dvcmQgdXBkYXRlZCBzdWNjZXNzZnVsbHkuXCIgfTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJVcGRhdGUgcGFzc3dvcmQgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZC5cIiB9O1xuICAgIH1cbn1cblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlTG9naW4oZW1haWw6IHN0cmluZywgcGFzc3dvcmRfdW51c2VkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgYWdlbnQ/OiBBZ2VudCB9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFnZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBZ2VudHNDb2xsZWN0aW9uKCk7XG4gICAgICBjb25zdCBhZ2VudERvYyA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IGVtYWlsOiBlbWFpbC50b0xvd2VyQ2FzZSgpIH0pO1xuXG4gICAgICBpZiAoYWdlbnREb2MgJiYgYWdlbnREb2MucGFzc3dvcmQpIHtcbiAgICAgICAgY29uc3QgaXNQYXNzd29yZFZhbGlkID0gYXdhaXQgdmVyaWZ5UGFzc3dvcmQocGFzc3dvcmRfdW51c2VkLCBhZ2VudERvYy5wYXNzd29yZCk7XG4gICAgICAgIGlmIChpc1Bhc3N3b3JkVmFsaWQpIHtcbiAgICAgICAgICBjb25zdCB7IHBhc3N3b3JkLCAuLi5hZ2VudERhdGEgfSA9IGFnZW50RG9jO1xuICAgICAgICAgIGNvbnN0IGFnZW50OiBBZ2VudCA9IHtcbiAgICAgICAgICAgIC4uLmFnZW50RGF0YSxcbiAgICAgICAgICAgIF9pZDogYWdlbnREb2MuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBpZDogYWdlbnREb2MuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBjb21wYW55SWQ6IGFnZW50RG9jLmNvbXBhbnlJZD8udG9TdHJpbmcoKSxcbiAgICAgICAgICB9O1xuICAgICAgICAgIGF3YWl0IGxvZ0FjdGl2aXR5KGFnZW50LmNvbXBhbnlJZCwgYWdlbnQubmFtZSwgJ0xvZ2luJywgYExvZ2dlZCBpbiBzdWNjZXNzZnVsbHlgKTtcbiAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBhZ2VudDogYWdlbnQgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiSW52YWxpZCBlbWFpbCBvciBwYXNzd29yZC5cIiB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiTG9naW4gZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkRhdGFiYXNlIGNvbm5lY3Rpb24gZXJyb3IuXCIgfTtcbiAgICB9XG59O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlQWdlbnQobmFtZTogc3RyaW5nLCBlbWFpbDogc3RyaW5nLCBwYXNzd29yZF91bnVzZWQ6IHN0cmluZywgcm9sZTogQWdlbnRSb2xlLCBjb21wYW55SWQ6IHN0cmluZywgY3JlYXRlZEJ5OiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgYWdlbnQ/OiBBZ2VudDsgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFnZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBZ2VudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nQWdlbnQgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBlbWFpbDogZW1haWwudG9Mb3dlckNhc2UoKSB9KTtcblxuICAgICAgICBpZiAoZXhpc3RpbmdBZ2VudCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gYWdlbnQgd2l0aCB0aGlzIGVtYWlsIGFscmVhZHkgZXhpc3RzLlwiIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBoYXNoZWRQYXNzd29yZCA9IGF3YWl0IGhhc2hQYXNzd29yZChwYXNzd29yZF91bnVzZWQpO1xuICAgICAgICBjb25zdCBhdmF0YXIgPSAnJztcblxuICAgICAgICBjb25zdCBhZ2VudFRvSW5zZXJ0OiBPbWl0PEFnZW50LCAnaWQnIHwgJ19pZCc+ID0ge1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGVtYWlsOiBlbWFpbC50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgcGFzc3dvcmQ6IGhhc2hlZFBhc3N3b3JkLFxuICAgICAgICAgICAgcm9sZSxcbiAgICAgICAgICAgIGF2YXRhcixcbiAgICAgICAgICAgIHBob25lOiAnJywgXG4gICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5pbnNlcnRPbmUoYWdlbnRUb0luc2VydCBhcyBhbnkpO1xuXG4gICAgICAgIGlmIChyZXN1bHQuaW5zZXJ0ZWRJZCkge1xuICAgICAgICAgICAgY29uc3QgYWdlbnRzV2l0aFN0YXRzID0gYXdhaXQgZ2V0QWdlbnRzQnlDb21wYW55KGNvbXBhbnlJZCk7XG4gICAgICAgICAgICBjb25zdCBuZXdBZ2VudCA9IGFnZW50c1dpdGhTdGF0cy5maW5kKGEgPT4gYS5pZCA9PT0gcmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSk7XG5cbiAgICAgICAgICAgIGlmIChuZXdBZ2VudCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IGxvZ0FjdGl2aXR5KGNvbXBhbnlJZCwgY3JlYXRlZEJ5LCAnQ3JlYXRlIEFnZW50JywgYENyZWF0ZWQgYWdlbnQ6ICR7bmFtZX1gKTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBhZ2VudDogbmV3QWdlbnQgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJGYWlsZWQgdG8gY3JlYXRlIGFnZW50LlwiIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkNyZWF0ZSBhZ2VudCBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIHdoaWxlIGNyZWF0aW5nIHRoZSBhZ2VudC5cIiB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUFnZW50KGFnZW50SWQ6IHN0cmluZywgY29tcGFueUlkPzogc3RyaW5nLCBkZWxldGVkQnk/OiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbiwgbWVzc2FnZT86IHN0cmluZyB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcblxuICAgICAgICBpZiAoIWFnZW50SWQgfHwgIU9iamVjdElkLmlzVmFsaWQoYWdlbnRJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkludmFsaWQgYWdlbnQgSUQuXCIgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGFnZW50VG9EZWxldGUgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBfaWQ6IG5ldyBPYmplY3RJZChhZ2VudElkKSB9KTtcbiAgICAgICAgaWYgKCFhZ2VudFRvRGVsZXRlKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBZ2VudCBub3QgZm91bmQuXCIgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFByZXZlbnQgZGVsZXRpbmcgdGhlIGxhc3QgYWRtaW5cbiAgICAgICAgaWYgKGFnZW50VG9EZWxldGUucm9sZSA9PT0gJ2FkbWluJykge1xuICAgICAgICAgICAgY29uc3QgYWRtaW5Db3VudCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uY291bnREb2N1bWVudHMoeyBjb21wYW55SWQ6IGFnZW50VG9EZWxldGUuY29tcGFueUlkLCByb2xlOiAnYWRtaW4nIH0pO1xuICAgICAgICAgICAgaWYgKGFkbWluQ291bnQgPD0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkNhbm5vdCByZW1vdmUgdGhlIGxhc3QgYWRtaW5pc3RyYXRvci5cIiB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmRlbGV0ZU9uZSh7IF9pZDogbmV3IE9iamVjdElkKGFnZW50SWQpIH0pO1xuXG4gICAgICAgIGlmIChyZXN1bHQuZGVsZXRlZENvdW50ID09PSAxKSB7XG4gICAgICAgICAgICBpZiAoY29tcGFueUlkICYmIGRlbGV0ZWRCeSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IGxvZ0FjdGl2aXR5KGNvbXBhbnlJZCwgZGVsZXRlZEJ5LCAnRGVsZXRlIEFnZW50JywgYFJlbW92ZWQgYWdlbnQ6ICR7YWdlbnRUb0RlbGV0ZS5uYW1lfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIHJlbW92ZSBhZ2VudC5cIiB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJEZWxldGUgYWdlbnQgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZC5cIiB9O1xuICAgIH1cbn1cblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWN0aXZpdHlMb2dzKGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTxBY3Rpdml0eUxvZ1tdPiB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKCFjb21wYW55SWQgfHwgIU9iamVjdElkLmlzVmFsaWQoY29tcGFueUlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxvZ3NDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWN0aXZpdHlMb2dzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBsb2dzID0gYXdhaXQgbG9nc0NvbGxlY3Rpb24uZmluZCh7IGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkgfSkuc29ydCh7IHRpbWVzdGFtcDogLTEgfSkubGltaXQoNTApLnRvQXJyYXkoKTtcblxuICAgICAgICByZXR1cm4gbG9ncy5tYXAobG9nID0+ICh7XG4gICAgICAgICAgICAuLi5sb2csXG4gICAgICAgICAgICBfaWQ6IGxvZy5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGlkOiBsb2cuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBjb21wYW55SWQ6IGxvZy5jb21wYW55SWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogbG9nLnRpbWVzdGFtcC50b0lTT1N0cmluZygpLFxuICAgICAgICB9KSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIGFjdGl2aXR5IGxvZ3M6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENvbnRhY3RzQnlDb21wYW55KGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTxVc2VyW10+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIWNvbXBhbnlJZCB8fCAhT2JqZWN0SWQuaXNWYWxpZChjb21wYW55SWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29udGFjdHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0VXNlcnNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzID0gYXdhaXQgY29udGFjdHNDb2xsZWN0aW9uLmZpbmQoeyBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpIH0pLnRvQXJyYXkoKTtcblxuICAgICAgICByZXR1cm4gY29udGFjdHMubWFwKGNvbnRhY3QgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBfaWQsIGNvbXBhbnlJZCwgLi4ucmVzdCB9ID0gY29udGFjdCBhcyBhbnk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgICAgICAgICAgX2lkOiBfaWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBpZDogX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBjb21wYW55SWQ/LnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgbm90ZXM6IChjb250YWN0Lm5vdGVzIHx8IFtdKS5tYXAoKG5vdGU6IE5vdGUpID0+ICh7XG4gICAgICAgICAgICAgICAgICAgIC4uLm5vdGUsXG4gICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUobm90ZS50aW1lc3RhbXApLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIGNvbnRhY3RzOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVDb250YWN0KG5hbWU6IHN0cmluZywgZW1haWw6IHN0cmluZywgcGhvbmU6IHN0cmluZywgY29tcGFueUlkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgY29udGFjdD86IFVzZXIgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzQ29sbGVjdGlvbiA9IGF3YWl0IGdldFVzZXJzQ29sbGVjdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZXhpc3RpbmdDb250YWN0ID0gYXdhaXQgY29udGFjdHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBlbWFpbDogZW1haWwudG9Mb3dlckNhc2UoKSwgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSB9KTtcbiAgICAgICAgaWYgKGV4aXN0aW5nQ29udGFjdCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQSBjb250YWN0IHdpdGggdGhpcyBlbWFpbCBhbHJlYWR5IGV4aXN0cy5cIiB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY29udGFjdFRvSW5zZXJ0OiBPbWl0PFVzZXIsICdpZCcgfCAnX2lkJz4gPSB7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgZW1haWw6IGVtYWlsLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICBwaG9uZSxcbiAgICAgICAgICAgIGF2YXRhcjogJycsXG4gICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpLFxuICAgICAgICAgICAgbm90ZXM6IFtdLFxuICAgICAgICAgICAgb25saW5lOiBmYWxzZSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb250YWN0c0NvbGxlY3Rpb24uaW5zZXJ0T25lKGNvbnRhY3RUb0luc2VydCBhcyBhbnkpO1xuICAgICAgICBcbiAgICAgICAgaWYgKHJlc3VsdC5pbnNlcnRlZElkKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdDb250YWN0OiBVc2VyID0ge1xuICAgICAgICAgICAgICAgIC4uLihjb250YWN0VG9JbnNlcnQgYXMgT21pdDxVc2VyLCAnX2lkJ3wnaWQnPiksXG4gICAgICAgICAgICAgICAgX2lkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBjb250YWN0OiBuZXdDb250YWN0IH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJGYWlsZWQgdG8gY3JlYXRlIGNvbnRhY3QuXCIgfTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDcmVhdGUgY29udGFjdCBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkLlwiIH07XG4gICAgfVxufVxuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhc3NpZ25BZ2VudFRvQ29udGFjdChjb250YWN0SWQ6IHN0cmluZywgYWdlbnRJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW4gfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzQ29sbGVjdGlvbiA9IGF3YWl0IGdldFVzZXJzQ29sbGVjdGlvbigpO1xuICAgICAgICBhd2FpdCBjb250YWN0c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChjb250YWN0SWQpIH0sXG4gICAgICAgICAgICB7ICRzZXQ6IHsgYXNzaWduZWRBZ2VudElkOiBhZ2VudElkIH0gfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFzc2lnbmluZyBhZ2VudDpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFkZE5vdGVUb0NvbnRhY3QoY29udGFjdElkOiBzdHJpbmcsIGFnZW50SWQ6IHN0cmluZywgYWdlbnROYW1lOiBzdHJpbmcsIHRleHQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBub3RlPzogTm90ZSB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY29udGFjdHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0VXNlcnNDb2xsZWN0aW9uKCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBuZXdOb3RlOiBOb3RlID0ge1xuICAgICAgICAgICAgaWQ6IG5ldyBPYmplY3RJZCgpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBhZ2VudElkLFxuICAgICAgICAgICAgYWdlbnROYW1lLFxuICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udGFjdHNDb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICAgICAgICAgIHsgX2lkOiBuZXcgT2JqZWN0SWQoY29udGFjdElkKSB9LFxuICAgICAgICAgICAgeyAkcHVzaDogeyBub3RlczogeyAkZWFjaDogW25ld05vdGVdLCAkcG9zaXRpb246IDAgfSB9IH1cbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChyZXN1bHQubW9kaWZpZWRDb3VudCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIG5vdGU6IG5ld05vdGUgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhZGRpbmcgbm90ZTpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldE5vdGVzRm9yQ29udGFjdChjb250YWN0SWQ6IHN0cmluZyk6IFByb21pc2U8Tm90ZVtdPiB7XG4gICAgIHRyeSB7XG4gICAgICAgIGlmICghY29udGFjdElkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNvbnRhY3RJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb250YWN0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRVc2Vyc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgY29udGFjdCA9IGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi5maW5kT25lKHsgX2lkOiBuZXcgT2JqZWN0SWQoY29udGFjdElkKSB9KTtcbiAgICAgICAgcmV0dXJuIChjb250YWN0Py5ub3RlcyB8fCBbXSkubWFwKChub3RlOiBOb3RlKSA9PiAoe1xuICAgICAgICAgICAgLi4ubm90ZSxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUobm90ZS50aW1lc3RhbXApLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIH0pKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgbm90ZXM6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENoYXRzQnlDb21wYW55KGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTxDaGF0W10+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIWNvbXBhbnlJZCB8fCAhT2JqZWN0SWQuaXNWYWxpZChjb21wYW55SWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2hhdHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q2hhdHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGNoYXRzID0gYXdhaXQgY2hhdHNDb2xsZWN0aW9uLmFnZ3JlZ2F0ZShbXG4gICAgICAgICAgICB7ICRtYXRjaDogeyBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpIH0gfSxcbiAgICAgICAgICAgIHsgJHNvcnQ6IHsgbGFzdEFjdGl2aXR5OiAtMSB9IH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgJGxvb2t1cDoge1xuICAgICAgICAgICAgICAgICAgICBmcm9tOiAnY29udGFjdHMnLFxuICAgICAgICAgICAgICAgICAgICBsb2NhbEZpZWxkOiAndXNlcklkJyxcbiAgICAgICAgICAgICAgICAgICAgZm9yZWlnbkZpZWxkOiAnX2lkJyxcbiAgICAgICAgICAgICAgICAgICAgYXM6ICd1c2VyJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7ICR1bndpbmQ6ICckdXNlcicgfVxuICAgICAgICBdKS50b0FycmF5KCk7XG5cbiAgICAgICAgcmV0dXJuIGNoYXRzLm1hcChjaGF0ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgX2lkLCBjb21wYW55SWQsIHVzZXJJZCwgLi4ucmVzdCB9ID0gY2hhdCBhcyBhbnk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgICAgICAgICAgX2lkOiBfaWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBpZDogX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBjb21wYW55SWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICB1c2VySWQ6IHVzZXJJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2VzOiBbXSwgLy8gTWVzc2FnZXMgd2lsbCBiZSBsYXp5LWxvYWRlZFxuICAgICAgICAgICAgICAgIHVzZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uY2hhdC51c2VyLFxuICAgICAgICAgICAgICAgICAgICBfaWQ6IGNoYXQudXNlci5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGNoYXQudXNlci5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGFueUlkOiBjaGF0LnVzZXIuY29tcGFueUlkID8gY2hhdC51c2VyLmNvbXBhbnlJZC50b1N0cmluZygpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBjaGF0cyBieSBjb21wYW55OlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRNZXNzYWdlc0ZvckNoYXQoY2hhdElkOiBzdHJpbmcpOiBQcm9taXNlPE1lc3NhZ2VbXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghY2hhdElkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNoYXRJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXNzYWdlc0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRNZXNzYWdlc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgLy8gQWxzbyBmZXRjaCBzZW5kZXIgZGV0YWlscyBpZiBpdCdzIGEgdXNlciwgbm90IGFuIGFnZW50ICgnbWUnKVxuICAgICAgICBjb25zdCBtZXNzYWdlcyA9IGF3YWl0IG1lc3NhZ2VzQ29sbGVjdGlvbi5hZ2dyZWdhdGUoW1xuICAgICAgICAgICAgeyAkbWF0Y2g6IHsgY2hhdElkOiBuZXcgT2JqZWN0SWQoY2hhdElkKSB9IH0sXG4gICAgICAgICAgICB7ICRzb3J0OiB7IHRpbWVzdGFtcDogMSB9IH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgJGxvb2t1cDoge1xuICAgICAgICAgICAgICAgICAgICBmcm9tOiAnY29udGFjdHMnLFxuICAgICAgICAgICAgICAgICAgICBsb2NhbEZpZWxkOiAnc2VuZGVySWQnLFxuICAgICAgICAgICAgICAgICAgICBmb3JlaWduRmllbGQ6ICdfaWQnLFxuICAgICAgICAgICAgICAgICAgICBhczogJ3NlbmRlckluZm8nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdKS50b0FycmF5KCk7XG5cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2VzLm1hcChtc2cgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBfaWQsIGNoYXRJZCwgc2VuZGVySWQsIHNlbmRlckluZm8sIC4uLnJlc3QgfSA9IG1zZyBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBzZW5kZXIgPSBtc2cuc2VuZGVyID09PSAnbWUnID8gJ21lJyA6IChzZW5kZXJJbmZvWzBdIHx8IG51bGwpO1xuXG4gICAgICAgICAgICBpZiAoc2VuZGVyICYmIHNlbmRlciAhPT0gJ21lJykge1xuICAgICAgICAgICAgICAgIHNlbmRlci5pZCA9IHNlbmRlci5faWQudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5yZXN0LFxuICAgICAgICAgICAgICAgIGlkOiBfaWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBzZW5kZXIsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgbWVzc2FnZXM6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlbmRNZXNzYWdlKGNoYXRJZDogc3RyaW5nLCB0ZXh0OiBzdHJpbmcsIGFnZW50SWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBuZXdNZXNzYWdlPzogTWVzc2FnZSB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgbWVzc2FnZXNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0TWVzc2FnZXNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGNoYXRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldENoYXRzQ29sbGVjdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKTtcbiAgICAgICAgY29uc3QgbmV3TWVzc2FnZVRvSW5zZXJ0OiBPbWl0PE1lc3NhZ2UsICdpZCcgfCAnX2lkJz4gPSB7XG4gICAgICAgICAgICBjaGF0SWQ6IG5ldyBPYmplY3RJZChjaGF0SWQpLFxuICAgICAgICAgICAgc2VuZGVyOiAnbWUnLCAvLyAnbWUnIGRlbm90ZXMgdGhlIGFnZW50XG4gICAgICAgICAgICBzZW5kZXJJZDogbmV3IE9iamVjdElkKGFnZW50SWQpLFxuICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogdGltZXN0YW1wLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbWVzc2FnZXNDb2xsZWN0aW9uLmluc2VydE9uZShuZXdNZXNzYWdlVG9JbnNlcnQgYXMgYW55KTtcblxuICAgICAgICBpZiAocmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgIGF3YWl0IGNoYXRzQ29sbGVjdGlvbi51cGRhdGVPbmUoXG4gICAgICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChjaGF0SWQpIH0sXG4gICAgICAgICAgICAgICAgeyAkc2V0OiB7IFxuICAgICAgICAgICAgICAgICAgICBsYXN0TWVzc2FnZTogdGV4dCwgXG4gICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogdGltZXN0YW1wLnRvTG9jYWxlVGltZVN0cmluZyhbXSwgeyBob3VyOiAnMi1kaWdpdCcsIG1pbnV0ZTogJzItZGlnaXQnIH0pLFxuICAgICAgICAgICAgICAgICAgICBsYXN0QWN0aXZpdHk6IHRpbWVzdGFtcCBcbiAgICAgICAgICAgICAgICB9IH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGZpbmFsTmV3TWVzc2FnZTogTWVzc2FnZSA9IHtcbiAgICAgICAgICAgICAgICAuLi4obmV3TWVzc2FnZVRvSW5zZXJ0IGFzIE9taXQ8TWVzc2FnZSwgJ19pZCd8J2lkJz4pLFxuICAgICAgICAgICAgICAgIF9pZDogcmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBpZDogcmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjaGF0SWQ6IG5ld01lc3NhZ2VUb0luc2VydC5jaGF0SWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBzZW5kZXJJZDogbmV3TWVzc2FnZVRvSW5zZXJ0LnNlbmRlcklkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4geyBcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLCBcbiAgICAgICAgICAgICAgICBuZXdNZXNzYWdlOiBmaW5hbE5ld01lc3NhZ2VcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igc2VuZGluZyBtZXNzYWdlOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2V0Q2hhdGJvdFN0YXR1cyhjaGF0SWQ6IHN0cmluZywgaXNBY3RpdmU6IGJvb2xlYW4pOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbiB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY2hhdHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q2hhdHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGF3YWl0IGNoYXRzQ29sbGVjdGlvbi51cGRhdGVPbmUoXG4gICAgICAgICAgICB7IF9pZDogbmV3IE9iamVjdElkKGNoYXRJZCkgfSxcbiAgICAgICAgICAgIHsgJHNldDogeyBpc0NoYXRib3RBY3RpdmU6IGlzQWN0aXZlIH0gfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHNldHRpbmcgY2hhdGJvdCBzdGF0dXM6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzdGFydE5ld0NoYXRzKHVzZXJzOiBVc2VyW10sIG1lc3NhZ2U6IHN0cmluZywgY29tcGFueUlkOiBzdHJpbmcsIGFnZW50SWQ6IHN0cmluZyk6IFByb21pc2U8Q2hhdFtdPiB7XG4gICAgY29uc3QgY2hhdHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q2hhdHNDb2xsZWN0aW9uKCk7XG4gICAgY29uc3QgbmV3T3JVcGRhdGVkQ2hhdHM6IENoYXRbXSA9IFtdO1xuXG4gICAgZm9yIChjb25zdCB1c2VyIG9mIHVzZXJzKSB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nQ2hhdERvYyA9IGF3YWl0IGNoYXRzQ29sbGVjdGlvbi5maW5kT25lKHtcbiAgICAgICAgICAgIHVzZXJJZDogbmV3IE9iamVjdElkKHVzZXIuaWQpLFxuICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoZXhpc3RpbmdDaGF0RG9jKSB7XG4gICAgICAgICAgICBhd2FpdCBzZW5kTWVzc2FnZShleGlzdGluZ0NoYXREb2MuX2lkLnRvU3RyaW5nKCksIG1lc3NhZ2UsIGFnZW50SWQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCB1cGRhdGVkQ2hhdDogQ2hhdCA9IHtcbiAgICAgICAgICAgICAgICAuLi4oZXhpc3RpbmdDaGF0RG9jIGFzIGFueSksXG4gICAgICAgICAgICAgICAgX2lkOiBleGlzdGluZ0NoYXREb2MuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgaWQ6IGV4aXN0aW5nQ2hhdERvYy5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICB1c2VySWQ6IGV4aXN0aW5nQ2hhdERvYy51c2VySWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IGV4aXN0aW5nQ2hhdERvYy5jb21wYW55SWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBsYXN0TWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9Mb2NhbGVUaW1lU3RyaW5nKFtdLCB7IGhvdXI6ICcyLWRpZ2l0JywgbWludXRlOiAnMi1kaWdpdCcgfSksXG4gICAgICAgICAgICAgICAgbGFzdEFjdGl2aXR5OiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgICAgIHVzZXI6IHVzZXIsXG4gICAgICAgICAgICAgICAgbWVzc2FnZXM6IFtdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG5ld09yVXBkYXRlZENoYXRzLnB1c2godXBkYXRlZENoYXQpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgY29uc3QgbmV3Q2hhdERhdGE6IE9taXQ8Q2hhdCwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgICAgICB1c2VySWQ6IG5ldyBPYmplY3RJZCh1c2VyLmlkKSxcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpLFxuICAgICAgICAgICAgICAgIGxhc3RNZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogdGltZXN0YW1wLnRvTG9jYWxlVGltZVN0cmluZyhbXSwgeyBob3VyOiAnMi1kaWdpdCcsIG1pbnV0ZTogJzItZGlnaXQnIH0pLFxuICAgICAgICAgICAgICAgIGxhc3RBY3Rpdml0eTogdGltZXN0YW1wLFxuICAgICAgICAgICAgICAgIHVucmVhZENvdW50OiAwLFxuICAgICAgICAgICAgICAgIHByaW9yaXR5OiAnbm9ybWFsJyxcbiAgICAgICAgICAgICAgICBjaGFubmVsOiAnV2ViY2hhdCcsXG4gICAgICAgICAgICAgICAgaXNDaGF0Ym90QWN0aXZlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlczogW11cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBjaGF0UmVzdWx0ID0gYXdhaXQgY2hhdHNDb2xsZWN0aW9uLmluc2VydE9uZShuZXdDaGF0RGF0YSBhcyBhbnkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoY2hhdFJlc3VsdC5pbnNlcnRlZElkKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgc2VuZE1lc3NhZ2UoY2hhdFJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksIG1lc3NhZ2UsIGFnZW50SWQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNyZWF0ZWRDaGF0OiBDaGF0ID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi4obmV3Q2hhdERhdGEgYXMgYW55KSxcbiAgICAgICAgICAgICAgICAgICAgX2lkOiBjaGF0UmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGNoYXRSZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICB1c2VySWQ6IG5ld0NoYXREYXRhLnVzZXJJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBjb21wYW55SWQ6IG5ld0NoYXREYXRhLmNvbXBhbnlJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICB1c2VyOiB1c2VyLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlczogW10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBuZXdPclVwZGF0ZWRDaGF0cy5wdXNoKGNyZWF0ZWRDaGF0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3T3JVcGRhdGVkQ2hhdHM7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVDYW1wYWlnbihkYXRhOiBQYXJ0aWFsPENhbXBhaWduPiAmIHsgc2NoZWR1bGVUeXBlPzogJ25vdycgfCAnbGF0ZXInIH0sIGNvbXBhbnlJZDogc3RyaW5nLCBhZ2VudElkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgY2FtcGFpZ24/OiBDYW1wYWlnbjsgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNhbXBhaWduc0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRDYW1wYWlnbnNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzQ29sbGVjdGlvbiA9IGF3YWl0IGdldFVzZXJzQ29sbGVjdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgbGV0IHN0YXR1czogQ2FtcGFpZ25bJ3N0YXR1cyddID0gJ0RyYWZ0JztcbiAgICAgICAgbGV0IHNlbnRBdDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgZGVsaXZlcnkgPSAwO1xuICAgICAgICBsZXQgZW5nYWdlbWVudCA9IDA7XG4gICAgICAgIGxldCBjb252ZXJzaW9uID0gMDtcblxuICAgICAgICBpZiAoZGF0YS5zY2hlZHVsZVR5cGUgPT09ICdub3cnKSB7XG4gICAgICAgICAgICBzdGF0dXMgPSAnQ29tcGxldGVkJztcbiAgICAgICAgICAgIHNlbnRBdCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgIC8vIEdlbmVyYXRlIG1vY2sgcGVyZm9ybWFuY2UgZGF0YSBmb3IgaW1tZWRpYXRlIGNhbXBhaWduc1xuICAgICAgICAgICAgZGVsaXZlcnkgPSA5NSArIE1hdGgucmFuZG9tKCkgKiA1OyBcbiAgICAgICAgICAgIGVuZ2FnZW1lbnQgPSAxMCArIE1hdGgucmFuZG9tKCkgKiAxNTtcbiAgICAgICAgICAgIGNvbnZlcnNpb24gPSAyICsgTWF0aC5yYW5kb20oKSAqIDg7IFxuXG4gICAgICAgICAgICAvLyBBY3R1YWxseSBzZW5kIHRoZSBtZXNzYWdlc1xuICAgICAgICAgICAgaWYgKGRhdGEuYXVkaWVuY2UgJiYgZGF0YS5tZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXVkaWVuY2VDb250YWN0cyA9IGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi5maW5kKHsgX2lkOiB7ICRpbjogZGF0YS5hdWRpZW5jZS5tYXAoaWQgPT4gbmV3IE9iamVjdElkKGlkKSkgfSB9KS50b0FycmF5KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdXNlcnMgPSBhdWRpZW5jZUNvbnRhY3RzLm1hcChjID0+ICh7XG4gICAgICAgICAgICAgICAgICAgIC4uLmMsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBjLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBfaWQ6IGMuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgfSkpIGFzIFVzZXJbXTtcblxuICAgICAgICAgICAgICAgIGF3YWl0IHN0YXJ0TmV3Q2hhdHModXNlcnMsIGRhdGEubWVzc2FnZSwgY29tcGFueUlkLCBhZ2VudElkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChkYXRhLnNjaGVkdWxlVHlwZSA9PT0gJ2xhdGVyJykge1xuICAgICAgICAgICAgc3RhdHVzID0gJ1NjaGVkdWxlZCc7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBuZXdDYW1wYWlnbjogT21pdDxDYW1wYWlnbiwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgIHRpdGxlOiBkYXRhLnRpdGxlISxcbiAgICAgICAgICAgIHR5cGU6IGRhdGEudHlwZSB8fCAnQnJvYWRjYXN0JyxcbiAgICAgICAgICAgIHN0YXR1czogc3RhdHVzLFxuICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSxcbiAgICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgYXVkaWVuY2U6IGRhdGEuYXVkaWVuY2UgfHwgW10sXG4gICAgICAgICAgICBtZXNzYWdlOiBkYXRhLm1lc3NhZ2UgfHwgXCJcIixcbiAgICAgICAgICAgIHNlbnRBdDogc2VudEF0LFxuICAgICAgICAgICAgZGVsaXZlcnksXG4gICAgICAgICAgICBlbmdhZ2VtZW50LFxuICAgICAgICAgICAgY29udmVyc2lvbixcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjYW1wYWlnbnNDb2xsZWN0aW9uLmluc2VydE9uZShuZXdDYW1wYWlnbiBhcyBhbnkpO1xuICAgICAgICBpZiAocmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNyZWF0ZWRDYW1wYWlnbjogQ2FtcGFpZ24gPSB7XG4gICAgICAgICAgICAgICAgLi4ubmV3Q2FtcGFpZ24sXG4gICAgICAgICAgICAgICAgX2lkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBjYW1wYWlnbjogY3JlYXRlZENhbXBhaWduIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIGNyZWF0ZSBjYW1wYWlnbi5cIiB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDcmVhdGUgY2FtcGFpZ24gZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZC5cIiB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENhbXBhaWduc0J5Q29tcGFueShjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8Q2FtcGFpZ25bXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghY29tcGFueUlkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNvbXBhbnlJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjYW1wYWlnbnNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q2FtcGFpZ25zQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBjYW1wYWlnbnMgPSBhd2FpdCBjYW1wYWlnbnNDb2xsZWN0aW9uLmZpbmQoeyBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpIH0pLnNvcnQoeyBjcmVhdGVkQXQ6IC0xIH0pLnRvQXJyYXkoKTtcblxuICAgICAgICByZXR1cm4gY2FtcGFpZ25zLm1hcChjYW1wYWlnbiA9PiAoe1xuICAgICAgICAgICAgLi4uY2FtcGFpZ24sXG4gICAgICAgICAgICBfaWQ6IGNhbXBhaWduLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgaWQ6IGNhbXBhaWduLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgY29tcGFueUlkOiBjYW1wYWlnbi5jb21wYW55SWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoY2FtcGFpZ24uY3JlYXRlZEF0KS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgc2VudEF0OiBjYW1wYWlnbi5zZW50QXQgPyBuZXcgRGF0ZShjYW1wYWlnbi5zZW50QXQpLnRvSVNPU3RyaW5nKCkgOiB1bmRlZmluZWQsXG4gICAgICAgIH0pKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgY2FtcGFpZ25zOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbXBvcnRDb250YWN0c0Zyb21DU1YoY29udGFjdHNEYXRhOiB7IG5hbWU6IHN0cmluZzsgZW1haWw6IHN0cmluZzsgcGhvbmU6IHN0cmluZyB9W10sIGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U6IHN0cmluZzsgbmV3Q29udGFjdHM6IFVzZXJbXTsgaW1wb3J0ZWRDb3VudDogbnVtYmVyOyBza2lwcGVkQ291bnQ6IG51bWJlcjsgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzQ29sbGVjdGlvbiA9IGF3YWl0IGdldFVzZXJzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBuZXdDb250YWN0czogVXNlcltdID0gW107XG4gICAgICAgIGxldCBpbXBvcnRlZENvdW50ID0gMDtcbiAgICAgICAgbGV0IHNraXBwZWRDb3VudCA9IDA7XG5cbiAgICAgICAgY29uc3QgY29tcGFueU9iaklkID0gbmV3IE9iamVjdElkKGNvbXBhbnlJZCk7XG5cbiAgICAgICAgZm9yIChjb25zdCBjb250YWN0IG9mIGNvbnRhY3RzRGF0YSkge1xuICAgICAgICAgICAgbGV0IGV4aXN0aW5nQ29udGFjdCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoY29udGFjdC5lbWFpbCkge1xuICAgICAgICAgICAgICAgIGV4aXN0aW5nQ29udGFjdCA9IGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi5maW5kT25lKHtcbiAgICAgICAgICAgICAgICAgICAgZW1haWw6IGNvbnRhY3QuZW1haWwudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGFueUlkOiBjb21wYW55T2JqSWRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGV4aXN0aW5nQ29udGFjdCkge1xuICAgICAgICAgICAgICAgIHNraXBwZWRDb3VudCsrO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBjb250YWN0VG9JbnNlcnQ6IE9taXQ8VXNlciwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBjb250YWN0Lm5hbWUsXG4gICAgICAgICAgICAgICAgZW1haWw6IGNvbnRhY3QuZW1haWwudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICAgICBwaG9uZTogY29udGFjdC5waG9uZSxcbiAgICAgICAgICAgICAgICBhdmF0YXI6ICcnLFxuICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogY29tcGFueU9iaklkLFxuICAgICAgICAgICAgICAgIG5vdGVzOiBbXSxcbiAgICAgICAgICAgICAgICBvbmxpbmU6IGZhbHNlLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udGFjdHNDb2xsZWN0aW9uLmluc2VydE9uZShjb250YWN0VG9JbnNlcnQgYXMgYW55KTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQuaW5zZXJ0ZWRJZCkge1xuICAgICAgICAgICAgICAgIGltcG9ydGVkQ291bnQrKztcbiAgICAgICAgICAgICAgICBuZXdDb250YWN0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgLi4uKGNvbnRhY3RUb0luc2VydCBhcyBPbWl0PFVzZXIsICdpZCcgfCAnX2lkJz4pLFxuICAgICAgICAgICAgICAgICAgICBfaWQ6IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIGlkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBjb21wYW55SWQ6IGNvbXBhbnlJZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgbWVzc2FnZTogYEltcG9ydCBjb21wbGV0ZS4gQWRkZWQgJHtpbXBvcnRlZENvdW50fSBuZXcgY29udGFjdHMsIHNraXBwZWQgJHtza2lwcGVkQ291bnR9IGR1cGxpY2F0ZXMuYCxcbiAgICAgICAgICAgIG5ld0NvbnRhY3RzLFxuICAgICAgICAgICAgaW1wb3J0ZWRDb3VudCxcbiAgICAgICAgICAgIHNraXBwZWRDb3VudFxuICAgICAgICB9O1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkNTViBpbXBvcnQgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZCBkdXJpbmcgaW1wb3J0LlwiLCBuZXdDb250YWN0czogW10sIGltcG9ydGVkQ291bnQ6IDAsIHNraXBwZWRDb3VudDogMCB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUFnZW50QXZhdGFyKGFnZW50SWQ6IHN0cmluZywgYXZhdGFyOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgYXZhdGFyPzogc3RyaW5nOyB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHVwZGF0ZVJlc3VsdCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChhZ2VudElkKSB9LFxuICAgICAgICAgICAgeyAkc2V0OiB7IGF2YXRhciB9IH1cbiAgICAgICAgKTtcblxuICAgICAgICBpZiAodXBkYXRlUmVzdWx0Lm1vZGlmaWVkQ291bnQgPT09IDAgJiYgdXBkYXRlUmVzdWx0Lm1hdGNoZWRDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQWdlbnQgbm90IGZvdW5kLlwiIH07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIExvZyBhY3Rpdml0eVxuICAgICAgICBjb25zdCBhZ2VudCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IF9pZDogbmV3IE9iamVjdElkKGFnZW50SWQpIH0pO1xuICAgICAgICBpZiAoYWdlbnQpIHtcbiAgICAgICAgICAgICBhd2FpdCBsb2dBY3Rpdml0eShhZ2VudC5jb21wYW55SWQsIGFnZW50Lm5hbWUsICdVcGRhdGUgUHJvZmlsZScsIGBVcGRhdGVkIHByb2ZpbGUgcGljdHVyZWApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgYXZhdGFyOiBhdmF0YXIgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVXBkYXRlIGFnZW50IGF2YXRhciBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkLlwiIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2NoZWR1bGVBbmFseXRpY3NSZXBvcnQoZW1haWw6IHN0cmluZywgZnJlcXVlbmN5OiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZTogc3RyaW5nOyB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gSW4gYSByZWFsIGFwcGxpY2F0aW9uLCB5b3Ugd291bGQgY29ubmVjdCB0byBhIGpvYiBzY2hlZHVsZXIgKGUuZy4sIEJ1bGxNUSwgY3JvbilcbiAgICAgICAgLy8gYW5kIHF1ZXVlIGEgam9iIHRvIHNlbmQgYW4gZW1haWwgcmVwb3J0IGJhc2VkIG9uIHRoZSBmcmVxdWVuY3kuXG4gICAgICAgIC8vIEZvciB0aGlzIGRlbW8sIHdlJ2xsIGp1c3QgbG9nIGl0IHRvIHRoZSBjb25zb2xlLlxuICAgICAgICBjb25zb2xlLmxvZyhgQW5hbHl0aWNzIHJlcG9ydCBzY2hlZHVsZWQgZm9yICR7ZW1haWx9IHdpdGggZnJlcXVlbmN5OiAke2ZyZXF1ZW5jeX1gKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFlvdSBjb3VsZCBhbHNvIGxvZyB0aGlzIGFzIGEgc3lzdGVtIGFjdGl2aXR5XG4gICAgICAgIC8vIGF3YWl0IGxvZ0FjdGl2aXR5KGNvbXBhbnlJZCwgJ1N5c3RlbScsICdTY2hlZHVsZSBSZXBvcnQnLCBgQW5hbHl0aWNzIHJlcG9ydCBzY2hlZHVsZWQgZm9yICR7ZW1haWx9ICgke2ZyZXF1ZW5jeX0pYCk7XG5cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgbWVzc2FnZTogYFJlcG9ydCBzdWNjZXNzZnVsbHkgc2NoZWR1bGVkIGZvciAke2VtYWlsfS5gIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlNjaGVkdWxlIHJlcG9ydCBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIHdoaWxlIHNjaGVkdWxpbmcgdGhlIHJlcG9ydC5cIiB9O1xuICAgIH1cbn1cbiAgICBcblxuICAgIFxuXG4gICAgXG5cblxuXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjZSQXc0QnNCIn0=
}}),
"[project]/src/app/data:eca4d8 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"7802a2a3c0c2bb253b917e951020eb8b5beaa029c6":"updateAgentPassword"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "updateAgentPassword": (()=>updateAgentPassword)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var updateAgentPassword = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("7802a2a3c0c2bb253b917e951020eb8b5beaa029c6", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "updateAgentPassword"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:5c9203 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40038480f4f658c87505338e9dcd7c2a9a8544e267":"getCampaignsByCompany"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getCampaignsByCompany": (()=>getCampaignsByCompany)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var getCampaignsByCompany = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("40038480f4f658c87505338e9dcd7c2a9a8544e267", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getCampaignsByCompany"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:fe7082 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"70a879e7bd08c30d234a83e75003b58f7cb4bfd128":"createCampaign"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "createCampaign": (()=>createCampaign)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var createCampaign = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("70a879e7bd08c30d234a83e75003b58f7cb4bfd128", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "createCampaign"); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4vYWN0aW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbid1c2Ugc2VydmVyJztcblxuaW1wb3J0IHsgZ2V0RGIgfSBmcm9tIFwiQC9saWIvZGJcIjtcbmltcG9ydCB7IGhhc2hQYXNzd29yZCwgdmVyaWZ5UGFzc3dvcmQgfSBmcm9tIFwiQC9saWIvYXV0aFwiO1xuaW1wb3J0IHR5cGUgeyBBZ2VudCwgQWdlbnRSb2xlLCBBbm5vdW5jZW1lbnQsIENvbXBhbnksIENvbW1lbnQsIEFjdGl2aXR5TG9nLCBVc2VyLCBOb3RlLCBDaGF0LCBNZXNzYWdlLCBDaGFubmVsLCBDYW1wYWlnbiB9IGZyb20gXCJAL3R5cGVzXCI7XG5pbXBvcnQgeyBDb2xsZWN0aW9uLCBEYiwgT2JqZWN0SWQgfSBmcm9tIFwibW9uZ29kYlwiO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRBZ2VudHNDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxBZ2VudD4+IHtcbiAgICBjb25zdCBkYjogRGIgPSBhd2FpdCBnZXREYigpO1xuICAgIHJldHVybiBkYi5jb2xsZWN0aW9uPEFnZW50PignYWdlbnRzJyk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDb21wYW5pZXNDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxDb21wYW55Pj4ge1xuICAgIGNvbnN0IGRiOiBEYiA9IGF3YWl0IGdldERiKCk7XG4gICAgcmV0dXJuIGRiLmNvbGxlY3Rpb248Q29tcGFueT4oJ2NvbXBhbmllcycpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRBbm5vdW5jZW1lbnRzQ29sbGVjdGlvbigpOiBQcm9taXNlPENvbGxlY3Rpb248QW5ub3VuY2VtZW50Pj4ge1xuICAgIGNvbnN0IGRiOiBEYiA9IGF3YWl0IGdldERiKCk7XG4gICAgcmV0dXJuIGRiLmNvbGxlY3Rpb248QW5ub3VuY2VtZW50PignYW5ub3VuY2VtZW50cycpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRBY3Rpdml0eUxvZ3NDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxBY3Rpdml0eUxvZz4+IHtcbiAgICBjb25zdCBkYjogRGIgPSBhd2FpdCBnZXREYigpO1xuICAgIHJldHVybiBkYi5jb2xsZWN0aW9uPEFjdGl2aXR5TG9nPignYWN0aXZpdHlfbG9ncycpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VXNlcnNDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxVc2VyPj4ge1xuICAgIGNvbnN0IGRiOiBEYiA9IGF3YWl0IGdldERiKCk7XG4gICAgcmV0dXJuIGRiLmNvbGxlY3Rpb248VXNlcj4oJ2NvbnRhY3RzJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENoYXRzQ29sbGVjdGlvbigpOiBQcm9taXNlPENvbGxlY3Rpb248Q2hhdD4+IHtcbiAgICBjb25zdCBkYjogRGIgPSBhd2FpdCBnZXREYigpO1xuICAgIHJldHVybiBkYi5jb2xsZWN0aW9uPENoYXQ+KCdjaGF0cycpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRNZXNzYWdlc0NvbGxlY3Rpb24oKTogUHJvbWlzZTxDb2xsZWN0aW9uPE1lc3NhZ2U+PiB7XG4gICAgY29uc3QgZGI6IERiID0gYXdhaXQgZ2V0RGIoKTtcbiAgICByZXR1cm4gZGIuY29sbGVjdGlvbjxNZXNzYWdlPignbWVzc2FnZXMnKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0Q2FtcGFpZ25zQ29sbGVjdGlvbigpOiBQcm9taXNlPENvbGxlY3Rpb248Q2FtcGFpZ24+PiB7XG4gICAgY29uc3QgZGI6IERiID0gYXdhaXQgZ2V0RGIoKTtcbiAgICByZXR1cm4gZGIuY29sbGVjdGlvbjxDYW1wYWlnbj4oJ2NhbXBhaWducycpO1xufVxuXG5cbmFzeW5jIGZ1bmN0aW9uIGxvZ0FjdGl2aXR5KGNvbXBhbnlJZDogc3RyaW5nIHwgT2JqZWN0SWQsIGFnZW50TmFtZTogc3RyaW5nLCBhY3Rpb246IHN0cmluZywgZGV0YWlsczogc3RyaW5nKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgbG9nc0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBY3Rpdml0eUxvZ3NDb2xsZWN0aW9uKCk7XG4gICAgICAgIGF3YWl0IGxvZ3NDb2xsZWN0aW9uLmluc2VydE9uZSh7XG4gICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpLFxuICAgICAgICAgICAgYWdlbnROYW1lLFxuICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgZGV0YWlscyxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBsb2cgYWN0aXZpdHk6XCIsIGVycm9yKTtcbiAgICB9XG59XG5cbi8vIEEgc2ltcGxlIGhhc2hpbmcgZnVuY3Rpb24gdG8gY3JlYXRlIGEgcHNldWRvLXJhbmRvbSBidXQgY29uc2lzdGVudCBudW1iZXIgZnJvbSBhIHN0cmluZy5cbmNvbnN0IHNpbXBsZUhhc2ggPSAoc3RyOiBzdHJpbmcpID0+IHtcbiAgbGV0IGhhc2ggPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNoYXIgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoID0gKGhhc2ggPDwgNSkgLSBoYXNoICsgY2hhcjtcbiAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICB9XG4gIHJldHVybiBNYXRoLmFicyhoYXNoKTtcbn07XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFnZW50c0J5Q29tcGFueShjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8QWdlbnRbXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghY29tcGFueUlkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNvbXBhbnlJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhZ2VudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWdlbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBtZXNzYWdlc0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRNZXNzYWdlc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgYWdlbnRzID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5maW5kKHsgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSB9LCB7IHByb2plY3Rpb246IHsgcGFzc3dvcmQ6IDAgfSB9KS50b0FycmF5KCk7XG5cbiAgICAgICAgY29uc3QgYWdlbnREYXRhV2l0aFN0YXRzID0gYXdhaXQgUHJvbWlzZS5hbGwoYWdlbnRzLm1hcChhc3luYyAoYWdlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIHRvZGF5LnNldEhvdXJzKDAsIDAsIDAsIDApO1xuXG4gICAgICAgICAgICBjb25zdCBjb252ZXJzYXRpb25zVG9kYXkgPSBhd2FpdCBtZXNzYWdlc0NvbGxlY3Rpb24uY291bnREb2N1bWVudHMoe1xuICAgICAgICAgICAgICAgIHNlbmRlcklkOiBhZ2VudC5faWQsXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wOiB7ICRndGU6IHRvZGF5LnRvSVNPU3RyaW5nKCkgfSBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBzdGF0dXNlczogQXJyYXk8J09ubGluZScgfCAnT2ZmbGluZScgfCAnQnVzeSc+ID0gWydPbmxpbmUnLCAnT2ZmbGluZScsICdCdXN5J107XG4gICAgICAgICAgICBjb25zdCBoYXNoID0gc2ltcGxlSGFzaChhZ2VudC5uYW1lKTtcbiAgICAgICAgICAgIGNvbnN0IHJhbmRvbVN0YXR1cyA9IHN0YXR1c2VzW2hhc2ggJSBzdGF0dXNlcy5sZW5ndGhdO1xuXG4gICAgICAgICAgICBsZXQgYXZnUmVzcG9uc2VUaW1lID0gXCJOL0FcIjtcbiAgICAgICAgICAgIGxldCBjc2F0OiBudW1iZXIgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIGlmIChjb252ZXJzYXRpb25zVG9kYXkgPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXZnUmVzcG9uc2VNaW51dGVzID0gKGhhc2ggJSA0KSArIDE7IC8vIDEgdG8gNCBtaW51dGVzXG4gICAgICAgICAgICAgICAgY29uc3QgYXZnUmVzcG9uc2VTZWNvbmRzID0gaGFzaCAlIDYwOyAvLyAwIHRvIDU5IHNlY29uZHNcbiAgICAgICAgICAgICAgICBhdmdSZXNwb25zZVRpbWUgPSBgJHthdmdSZXNwb25zZU1pbnV0ZXN9bSAke2F2Z1Jlc3BvbnNlU2Vjb25kc31zYDtcbiAgICAgICAgICAgICAgICBjc2F0ID0gODUgKyAoaGFzaCAlIDE1KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5hZ2VudCxcbiAgICAgICAgICAgICAgICBfaWQ6IGFnZW50Ll9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiBhZ2VudC5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IGFnZW50LmNvbXBhbnlJZD8udG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjb252ZXJzYXRpb25zVG9kYXksXG4gICAgICAgICAgICAgICAgc3RhdHVzOiByYW5kb21TdGF0dXMsXG4gICAgICAgICAgICAgICAgYXZnUmVzcG9uc2VUaW1lLFxuICAgICAgICAgICAgICAgIGNzYXQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gYWdlbnREYXRhV2l0aFN0YXRzO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBhZ2VudHMgYnkgY29tcGFueTpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlQW5ub3VuY2VtZW50KGRhdGE6IHsgdGl0bGU6IHN0cmluZzsgY29udGVudDogc3RyaW5nOyBjYXRlZ29yeTogc3RyaW5nOyBhdXRob3JJZDogc3RyaW5nOyBjb21wYW55SWQ6IHN0cmluZyB9KTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U/OiBzdHJpbmc7IGFubm91bmNlbWVudD86IEFubm91bmNlbWVudCB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYW5ub3VuY2VtZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBbm5vdW5jZW1lbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBhZ2VudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWdlbnRzQ29sbGVjdGlvbigpO1xuXG4gICAgICAgIGNvbnN0IGF1dGhvciA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IF9pZDogbmV3IE9iamVjdElkKGRhdGEuYXV0aG9ySWQpIH0pO1xuICAgICAgICBpZiAoIWF1dGhvcikge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQXV0aG9yIG5vdCBmb3VuZC5cIiB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbmV3QW5ub3VuY2VtZW50OiBPbWl0PEFubm91bmNlbWVudCwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgIHRpdGxlOiBkYXRhLnRpdGxlLFxuICAgICAgICAgICAgY29udGVudDogZGF0YS5jb250ZW50LFxuICAgICAgICAgICAgY2F0ZWdvcnk6IGRhdGEuY2F0ZWdvcnkgYXMgYW55LFxuICAgICAgICAgICAgYXV0aG9yOiB7XG4gICAgICAgICAgICAgICAgaWQ6IGF1dGhvci5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBuYW1lOiBhdXRob3IubmFtZSxcbiAgICAgICAgICAgICAgICBhdmF0YXI6IGF1dGhvci5hdmF0YXJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChkYXRhLmNvbXBhbnlJZCksXG4gICAgICAgICAgICBkYXRlOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICByZWFkQnk6IFtdLFxuICAgICAgICAgICAgY29tbWVudHM6IFtdLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uLmluc2VydE9uZShuZXdBbm5vdW5jZW1lbnQgYXMgYW55KTtcbiAgICAgICAgYXdhaXQgbG9nQWN0aXZpdHkoZGF0YS5jb21wYW55SWQsIGF1dGhvci5uYW1lLCAnQ3JlYXRlIEFubm91bmNlbWVudCcsIGBQdWJsaXNoZWQ6IFwiJHtkYXRhLnRpdGxlfVwiYCk7XG5cblxuICAgICAgICBpZiAocmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNyZWF0ZWRBbm5vdW5jZW1lbnQ6IEFubm91bmNlbWVudCA9IHtcbiAgICAgICAgICAgICAgICAuLi4obmV3QW5ub3VuY2VtZW50IGFzIE9taXQ8QW5ub3VuY2VtZW50LCAnX2lkJyB8ICdpZCc+KSxcbiAgICAgICAgICAgICAgICBfaWQ6IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgaWQ6IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoZGF0YS5jb21wYW55SWQpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgYW5ub3VuY2VtZW50OiBjcmVhdGVkQW5ub3VuY2VtZW50IH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJGYWlsZWQgdG8gY3JlYXRlIGFubm91bmNlbWVudC5cIiB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDcmVhdGUgYW5ub3VuY2VtZW50IGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQuXCIgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBbm5vdW5jZW1lbnRzQnlDb21wYW55KGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTxBbm5vdW5jZW1lbnRbXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghY29tcGFueUlkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNvbXBhbnlJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbm5vdW5jZW1lbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFubm91bmNlbWVudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGFubm91bmNlbWVudHMgPSBhd2FpdCBhbm5vdW5jZW1lbnRzQ29sbGVjdGlvbi5maW5kKHsgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSB9KS5zb3J0KHsgZGF0ZTogLTEgfSkudG9BcnJheSgpO1xuXG4gICAgICAgIHJldHVybiBhbm5vdW5jZW1lbnRzLm1hcChhbm5vdW5jZW1lbnQgPT4gKHtcbiAgICAgICAgICAgIC4uLmFubm91bmNlbWVudCxcbiAgICAgICAgICAgIF9pZDogYW5ub3VuY2VtZW50Ll9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgaWQ6IGFubm91bmNlbWVudC5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGNvbXBhbnlJZDogYW5ub3VuY2VtZW50LmNvbXBhbnlJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgcmVhZEJ5OiBhbm5vdW5jZW1lbnQucmVhZEJ5IHx8IFtdLFxuICAgICAgICAgICAgY29tbWVudHM6IChhbm5vdW5jZW1lbnQuY29tbWVudHMgfHwgW10pLm1hcCgoY29tbWVudDogQ29tbWVudCkgPT4gKHtcbiAgICAgICAgICAgICAgICAuLi5jb21tZW50LFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoY29tbWVudC50aW1lc3RhbXApLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICB9KSksXG4gICAgICAgIH0pKTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBhbm5vdW5jZW1lbnRzIGJ5IGNvbXBhbnk6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1hcmtBbm5vdW5jZW1lbnRBc1JlYWQoYW5ub3VuY2VtZW50SWQ6IHN0cmluZywgYWdlbnRJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW4gfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QW5ub3VuY2VtZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgYXdhaXQgYW5ub3VuY2VtZW50c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChhbm5vdW5jZW1lbnRJZCkgfSxcbiAgICAgICAgICAgIHsgJGFkZFRvU2V0OiB7IHJlYWRCeTogYWdlbnRJZCB9IH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXJrIGFzIHJlYWQgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhZGRDb21tZW50VG9Bbm5vdW5jZW1lbnQoYW5ub3VuY2VtZW50SWQ6IHN0cmluZywgYXV0aG9ySWQ6IHN0cmluZywgY29udGVudDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW4sIGNvbW1lbnQ/OiBDb21tZW50IH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBhZ2VudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWdlbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBhdXRob3IgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBfaWQ6IG5ldyBPYmplY3RJZChhdXRob3JJZCkgfSk7XG4gICAgICAgIGlmICghYXV0aG9yKSByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xuXG4gICAgICAgIGNvbnN0IG5ld0NvbW1lbnQ6IENvbW1lbnQgPSB7XG4gICAgICAgICAgICBpZDogbmV3IE9iamVjdElkKCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGF1dGhvcjoge1xuICAgICAgICAgICAgICAgIGlkOiBhdXRob3IuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgbmFtZTogYXV0aG9yLm5hbWUsXG4gICAgICAgICAgICAgICAgYXZhdGFyOiBhdXRob3IuYXZhdGFyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QW5ub3VuY2VtZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgYXdhaXQgYW5ub3VuY2VtZW50c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChhbm5vdW5jZW1lbnRJZCkgfSxcbiAgICAgICAgICAgIHsgJHB1c2g6IHsgY29tbWVudHM6IG5ld0NvbW1lbnQgfSB9XG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBjb21tZW50OiBuZXdDb21tZW50IH07XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQWRkIGNvbW1lbnQgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUFnZW50UHJvZmlsZShhZ2VudElkOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgZW1haWw6IHN0cmluZywgcGhvbmU6IHN0cmluZywgY29tcGFueUlkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgYWdlbnQ/OiBBZ2VudDsgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFnZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBZ2VudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCB1cGRhdGVSZXN1bHQgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICAgICAgICAgIHsgX2lkOiBuZXcgT2JqZWN0SWQoYWdlbnRJZCkgfSxcbiAgICAgICAgICAgIHsgJHNldDogeyBuYW1lLCBlbWFpbCwgcGhvbmUgfSB9XG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKHVwZGF0ZVJlc3VsdC5tb2RpZmllZENvdW50ID09PSAwICYmIHVwZGF0ZVJlc3VsdC5tYXRjaGVkQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFnZW50IG5vdCBmb3VuZC5cIiB9O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBhZ2VudFdpdGhTdGF0cyA9IGF3YWl0IGdldEFnZW50c0J5Q29tcGFueShjb21wYW55SWQpO1xuICAgICAgICBjb25zdCB1cGRhdGVkQWdlbnQgPSBhZ2VudFdpdGhTdGF0cy5maW5kKGEgPT4gYS5pZCA9PT0gYWdlbnRJZCk7XG5cblxuICAgICAgICBpZiAodXBkYXRlZEFnZW50KSB7XG4gICAgICAgICAgICBhd2FpdCBsb2dBY3Rpdml0eShjb21wYW55SWQsIHVwZGF0ZWRBZ2VudC5uYW1lLCAnVXBkYXRlIFByb2ZpbGUnLCBgVXBkYXRlZCBhZ2VudCBwcm9maWxlIGZvciAke25hbWV9YCk7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBhZ2VudDogdXBkYXRlZEFnZW50IH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJGYWlsZWQgdG8gcmV0cmlldmUgdXBkYXRlZCBhZ2VudC5cIiB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJVcGRhdGUgYWdlbnQgcHJvZmlsZSBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkLlwiIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlQWdlbnRQYXNzd29yZChhZ2VudElkOiBzdHJpbmcsIGN1cnJlbnRQYXNzd29yZDogc3RyaW5nLCBuZXdQYXNzd29yZDogc3RyaW5nLCBjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBtZXNzYWdlOiBzdHJpbmcgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFnZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBZ2VudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGFnZW50ID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5maW5kT25lKHsgX2lkOiBuZXcgT2JqZWN0SWQoYWdlbnRJZCkgfSk7XG5cbiAgICAgICAgaWYgKCFhZ2VudCB8fCAhYWdlbnQucGFzc3dvcmQpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFnZW50IG5vdCBmb3VuZC5cIiB9O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBpc1Bhc3N3b3JkVmFsaWQgPSBhd2FpdCB2ZXJpZnlQYXNzd29yZChjdXJyZW50UGFzc3dvcmQsIGFnZW50LnBhc3N3b3JkKTtcbiAgICAgICAgaWYgKCFpc1Bhc3N3b3JkVmFsaWQpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkluY29ycmVjdCBjdXJyZW50IHBhc3N3b3JkLlwiIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBuZXdIYXNoZWRQYXNzd29yZCA9IGF3YWl0IGhhc2hQYXNzd29yZChuZXdQYXNzd29yZCk7XG4gICAgICAgIGF3YWl0IGFnZW50c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChhZ2VudElkKSB9LFxuICAgICAgICAgICAgeyAkc2V0OiB7IHBhc3N3b3JkOiBuZXdIYXNoZWRQYXNzd29yZCB9IH1cbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIGF3YWl0IGxvZ0FjdGl2aXR5KGNvbXBhbnlJZCwgYWdlbnQubmFtZSwgJ1VwZGF0ZSBQYXNzd29yZCcsIGBDaGFuZ2VkIHBhc3N3b3JkYCk7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIG1lc3NhZ2U6IFwiUGFzc3dvcmQgdXBkYXRlZCBzdWNjZXNzZnVsbHkuXCIgfTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJVcGRhdGUgcGFzc3dvcmQgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZC5cIiB9O1xuICAgIH1cbn1cblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlTG9naW4oZW1haWw6IHN0cmluZywgcGFzc3dvcmRfdW51c2VkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgYWdlbnQ/OiBBZ2VudCB9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFnZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBZ2VudHNDb2xsZWN0aW9uKCk7XG4gICAgICBjb25zdCBhZ2VudERvYyA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IGVtYWlsOiBlbWFpbC50b0xvd2VyQ2FzZSgpIH0pO1xuXG4gICAgICBpZiAoYWdlbnREb2MgJiYgYWdlbnREb2MucGFzc3dvcmQpIHtcbiAgICAgICAgY29uc3QgaXNQYXNzd29yZFZhbGlkID0gYXdhaXQgdmVyaWZ5UGFzc3dvcmQocGFzc3dvcmRfdW51c2VkLCBhZ2VudERvYy5wYXNzd29yZCk7XG4gICAgICAgIGlmIChpc1Bhc3N3b3JkVmFsaWQpIHtcbiAgICAgICAgICBjb25zdCB7IHBhc3N3b3JkLCAuLi5hZ2VudERhdGEgfSA9IGFnZW50RG9jO1xuICAgICAgICAgIGNvbnN0IGFnZW50OiBBZ2VudCA9IHtcbiAgICAgICAgICAgIC4uLmFnZW50RGF0YSxcbiAgICAgICAgICAgIF9pZDogYWdlbnREb2MuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBpZDogYWdlbnREb2MuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBjb21wYW55SWQ6IGFnZW50RG9jLmNvbXBhbnlJZD8udG9TdHJpbmcoKSxcbiAgICAgICAgICB9O1xuICAgICAgICAgIGF3YWl0IGxvZ0FjdGl2aXR5KGFnZW50LmNvbXBhbnlJZCwgYWdlbnQubmFtZSwgJ0xvZ2luJywgYExvZ2dlZCBpbiBzdWNjZXNzZnVsbHlgKTtcbiAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBhZ2VudDogYWdlbnQgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiSW52YWxpZCBlbWFpbCBvciBwYXNzd29yZC5cIiB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiTG9naW4gZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkRhdGFiYXNlIGNvbm5lY3Rpb24gZXJyb3IuXCIgfTtcbiAgICB9XG59O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlQWdlbnQobmFtZTogc3RyaW5nLCBlbWFpbDogc3RyaW5nLCBwYXNzd29yZF91bnVzZWQ6IHN0cmluZywgcm9sZTogQWdlbnRSb2xlLCBjb21wYW55SWQ6IHN0cmluZywgY3JlYXRlZEJ5OiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgYWdlbnQ/OiBBZ2VudDsgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFnZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBZ2VudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nQWdlbnQgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBlbWFpbDogZW1haWwudG9Mb3dlckNhc2UoKSB9KTtcblxuICAgICAgICBpZiAoZXhpc3RpbmdBZ2VudCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gYWdlbnQgd2l0aCB0aGlzIGVtYWlsIGFscmVhZHkgZXhpc3RzLlwiIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBoYXNoZWRQYXNzd29yZCA9IGF3YWl0IGhhc2hQYXNzd29yZChwYXNzd29yZF91bnVzZWQpO1xuICAgICAgICBjb25zdCBhdmF0YXIgPSAnJztcblxuICAgICAgICBjb25zdCBhZ2VudFRvSW5zZXJ0OiBPbWl0PEFnZW50LCAnaWQnIHwgJ19pZCc+ID0ge1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGVtYWlsOiBlbWFpbC50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgcGFzc3dvcmQ6IGhhc2hlZFBhc3N3b3JkLFxuICAgICAgICAgICAgcm9sZSxcbiAgICAgICAgICAgIGF2YXRhcixcbiAgICAgICAgICAgIHBob25lOiAnJywgXG4gICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5pbnNlcnRPbmUoYWdlbnRUb0luc2VydCBhcyBhbnkpO1xuXG4gICAgICAgIGlmIChyZXN1bHQuaW5zZXJ0ZWRJZCkge1xuICAgICAgICAgICAgY29uc3QgYWdlbnRzV2l0aFN0YXRzID0gYXdhaXQgZ2V0QWdlbnRzQnlDb21wYW55KGNvbXBhbnlJZCk7XG4gICAgICAgICAgICBjb25zdCBuZXdBZ2VudCA9IGFnZW50c1dpdGhTdGF0cy5maW5kKGEgPT4gYS5pZCA9PT0gcmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSk7XG5cbiAgICAgICAgICAgIGlmIChuZXdBZ2VudCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IGxvZ0FjdGl2aXR5KGNvbXBhbnlJZCwgY3JlYXRlZEJ5LCAnQ3JlYXRlIEFnZW50JywgYENyZWF0ZWQgYWdlbnQ6ICR7bmFtZX1gKTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBhZ2VudDogbmV3QWdlbnQgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJGYWlsZWQgdG8gY3JlYXRlIGFnZW50LlwiIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkNyZWF0ZSBhZ2VudCBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIHdoaWxlIGNyZWF0aW5nIHRoZSBhZ2VudC5cIiB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUFnZW50KGFnZW50SWQ6IHN0cmluZywgY29tcGFueUlkPzogc3RyaW5nLCBkZWxldGVkQnk/OiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbiwgbWVzc2FnZT86IHN0cmluZyB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcblxuICAgICAgICBpZiAoIWFnZW50SWQgfHwgIU9iamVjdElkLmlzVmFsaWQoYWdlbnRJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkludmFsaWQgYWdlbnQgSUQuXCIgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGFnZW50VG9EZWxldGUgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBfaWQ6IG5ldyBPYmplY3RJZChhZ2VudElkKSB9KTtcbiAgICAgICAgaWYgKCFhZ2VudFRvRGVsZXRlKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBZ2VudCBub3QgZm91bmQuXCIgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFByZXZlbnQgZGVsZXRpbmcgdGhlIGxhc3QgYWRtaW5cbiAgICAgICAgaWYgKGFnZW50VG9EZWxldGUucm9sZSA9PT0gJ2FkbWluJykge1xuICAgICAgICAgICAgY29uc3QgYWRtaW5Db3VudCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uY291bnREb2N1bWVudHMoeyBjb21wYW55SWQ6IGFnZW50VG9EZWxldGUuY29tcGFueUlkLCByb2xlOiAnYWRtaW4nIH0pO1xuICAgICAgICAgICAgaWYgKGFkbWluQ291bnQgPD0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkNhbm5vdCByZW1vdmUgdGhlIGxhc3QgYWRtaW5pc3RyYXRvci5cIiB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmRlbGV0ZU9uZSh7IF9pZDogbmV3IE9iamVjdElkKGFnZW50SWQpIH0pO1xuXG4gICAgICAgIGlmIChyZXN1bHQuZGVsZXRlZENvdW50ID09PSAxKSB7XG4gICAgICAgICAgICBpZiAoY29tcGFueUlkICYmIGRlbGV0ZWRCeSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IGxvZ0FjdGl2aXR5KGNvbXBhbnlJZCwgZGVsZXRlZEJ5LCAnRGVsZXRlIEFnZW50JywgYFJlbW92ZWQgYWdlbnQ6ICR7YWdlbnRUb0RlbGV0ZS5uYW1lfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIHJlbW92ZSBhZ2VudC5cIiB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJEZWxldGUgYWdlbnQgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZC5cIiB9O1xuICAgIH1cbn1cblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWN0aXZpdHlMb2dzKGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTxBY3Rpdml0eUxvZ1tdPiB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKCFjb21wYW55SWQgfHwgIU9iamVjdElkLmlzVmFsaWQoY29tcGFueUlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxvZ3NDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWN0aXZpdHlMb2dzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBsb2dzID0gYXdhaXQgbG9nc0NvbGxlY3Rpb24uZmluZCh7IGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkgfSkuc29ydCh7IHRpbWVzdGFtcDogLTEgfSkubGltaXQoNTApLnRvQXJyYXkoKTtcblxuICAgICAgICByZXR1cm4gbG9ncy5tYXAobG9nID0+ICh7XG4gICAgICAgICAgICAuLi5sb2csXG4gICAgICAgICAgICBfaWQ6IGxvZy5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGlkOiBsb2cuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBjb21wYW55SWQ6IGxvZy5jb21wYW55SWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogbG9nLnRpbWVzdGFtcC50b0lTT1N0cmluZygpLFxuICAgICAgICB9KSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIGFjdGl2aXR5IGxvZ3M6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENvbnRhY3RzQnlDb21wYW55KGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTxVc2VyW10+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIWNvbXBhbnlJZCB8fCAhT2JqZWN0SWQuaXNWYWxpZChjb21wYW55SWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29udGFjdHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0VXNlcnNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzID0gYXdhaXQgY29udGFjdHNDb2xsZWN0aW9uLmZpbmQoeyBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpIH0pLnRvQXJyYXkoKTtcblxuICAgICAgICByZXR1cm4gY29udGFjdHMubWFwKGNvbnRhY3QgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBfaWQsIGNvbXBhbnlJZCwgLi4ucmVzdCB9ID0gY29udGFjdCBhcyBhbnk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgICAgICAgICAgX2lkOiBfaWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBpZDogX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBjb21wYW55SWQ/LnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgbm90ZXM6IChjb250YWN0Lm5vdGVzIHx8IFtdKS5tYXAoKG5vdGU6IE5vdGUpID0+ICh7XG4gICAgICAgICAgICAgICAgICAgIC4uLm5vdGUsXG4gICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUobm90ZS50aW1lc3RhbXApLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIGNvbnRhY3RzOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVDb250YWN0KG5hbWU6IHN0cmluZywgZW1haWw6IHN0cmluZywgcGhvbmU6IHN0cmluZywgY29tcGFueUlkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgY29udGFjdD86IFVzZXIgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzQ29sbGVjdGlvbiA9IGF3YWl0IGdldFVzZXJzQ29sbGVjdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZXhpc3RpbmdDb250YWN0ID0gYXdhaXQgY29udGFjdHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBlbWFpbDogZW1haWwudG9Mb3dlckNhc2UoKSwgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSB9KTtcbiAgICAgICAgaWYgKGV4aXN0aW5nQ29udGFjdCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQSBjb250YWN0IHdpdGggdGhpcyBlbWFpbCBhbHJlYWR5IGV4aXN0cy5cIiB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY29udGFjdFRvSW5zZXJ0OiBPbWl0PFVzZXIsICdpZCcgfCAnX2lkJz4gPSB7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgZW1haWw6IGVtYWlsLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICBwaG9uZSxcbiAgICAgICAgICAgIGF2YXRhcjogJycsXG4gICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpLFxuICAgICAgICAgICAgbm90ZXM6IFtdLFxuICAgICAgICAgICAgb25saW5lOiBmYWxzZSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb250YWN0c0NvbGxlY3Rpb24uaW5zZXJ0T25lKGNvbnRhY3RUb0luc2VydCBhcyBhbnkpO1xuICAgICAgICBcbiAgICAgICAgaWYgKHJlc3VsdC5pbnNlcnRlZElkKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdDb250YWN0OiBVc2VyID0ge1xuICAgICAgICAgICAgICAgIC4uLihjb250YWN0VG9JbnNlcnQgYXMgT21pdDxVc2VyLCAnX2lkJ3wnaWQnPiksXG4gICAgICAgICAgICAgICAgX2lkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBjb250YWN0OiBuZXdDb250YWN0IH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJGYWlsZWQgdG8gY3JlYXRlIGNvbnRhY3QuXCIgfTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDcmVhdGUgY29udGFjdCBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkLlwiIH07XG4gICAgfVxufVxuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhc3NpZ25BZ2VudFRvQ29udGFjdChjb250YWN0SWQ6IHN0cmluZywgYWdlbnRJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW4gfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzQ29sbGVjdGlvbiA9IGF3YWl0IGdldFVzZXJzQ29sbGVjdGlvbigpO1xuICAgICAgICBhd2FpdCBjb250YWN0c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChjb250YWN0SWQpIH0sXG4gICAgICAgICAgICB7ICRzZXQ6IHsgYXNzaWduZWRBZ2VudElkOiBhZ2VudElkIH0gfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFzc2lnbmluZyBhZ2VudDpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFkZE5vdGVUb0NvbnRhY3QoY29udGFjdElkOiBzdHJpbmcsIGFnZW50SWQ6IHN0cmluZywgYWdlbnROYW1lOiBzdHJpbmcsIHRleHQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBub3RlPzogTm90ZSB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY29udGFjdHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0VXNlcnNDb2xsZWN0aW9uKCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBuZXdOb3RlOiBOb3RlID0ge1xuICAgICAgICAgICAgaWQ6IG5ldyBPYmplY3RJZCgpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBhZ2VudElkLFxuICAgICAgICAgICAgYWdlbnROYW1lLFxuICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udGFjdHNDb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICAgICAgICAgIHsgX2lkOiBuZXcgT2JqZWN0SWQoY29udGFjdElkKSB9LFxuICAgICAgICAgICAgeyAkcHVzaDogeyBub3RlczogeyAkZWFjaDogW25ld05vdGVdLCAkcG9zaXRpb246IDAgfSB9IH1cbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChyZXN1bHQubW9kaWZpZWRDb3VudCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIG5vdGU6IG5ld05vdGUgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhZGRpbmcgbm90ZTpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldE5vdGVzRm9yQ29udGFjdChjb250YWN0SWQ6IHN0cmluZyk6IFByb21pc2U8Tm90ZVtdPiB7XG4gICAgIHRyeSB7XG4gICAgICAgIGlmICghY29udGFjdElkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNvbnRhY3RJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb250YWN0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRVc2Vyc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgY29udGFjdCA9IGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi5maW5kT25lKHsgX2lkOiBuZXcgT2JqZWN0SWQoY29udGFjdElkKSB9KTtcbiAgICAgICAgcmV0dXJuIChjb250YWN0Py5ub3RlcyB8fCBbXSkubWFwKChub3RlOiBOb3RlKSA9PiAoe1xuICAgICAgICAgICAgLi4ubm90ZSxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUobm90ZS50aW1lc3RhbXApLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIH0pKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgbm90ZXM6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENoYXRzQnlDb21wYW55KGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTxDaGF0W10+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIWNvbXBhbnlJZCB8fCAhT2JqZWN0SWQuaXNWYWxpZChjb21wYW55SWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2hhdHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q2hhdHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGNoYXRzID0gYXdhaXQgY2hhdHNDb2xsZWN0aW9uLmFnZ3JlZ2F0ZShbXG4gICAgICAgICAgICB7ICRtYXRjaDogeyBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpIH0gfSxcbiAgICAgICAgICAgIHsgJHNvcnQ6IHsgbGFzdEFjdGl2aXR5OiAtMSB9IH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgJGxvb2t1cDoge1xuICAgICAgICAgICAgICAgICAgICBmcm9tOiAnY29udGFjdHMnLFxuICAgICAgICAgICAgICAgICAgICBsb2NhbEZpZWxkOiAndXNlcklkJyxcbiAgICAgICAgICAgICAgICAgICAgZm9yZWlnbkZpZWxkOiAnX2lkJyxcbiAgICAgICAgICAgICAgICAgICAgYXM6ICd1c2VyJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7ICR1bndpbmQ6ICckdXNlcicgfVxuICAgICAgICBdKS50b0FycmF5KCk7XG5cbiAgICAgICAgcmV0dXJuIGNoYXRzLm1hcChjaGF0ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgX2lkLCBjb21wYW55SWQsIHVzZXJJZCwgLi4ucmVzdCB9ID0gY2hhdCBhcyBhbnk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgICAgICAgICAgX2lkOiBfaWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBpZDogX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBjb21wYW55SWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICB1c2VySWQ6IHVzZXJJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2VzOiBbXSwgLy8gTWVzc2FnZXMgd2lsbCBiZSBsYXp5LWxvYWRlZFxuICAgICAgICAgICAgICAgIHVzZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uY2hhdC51c2VyLFxuICAgICAgICAgICAgICAgICAgICBfaWQ6IGNoYXQudXNlci5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGNoYXQudXNlci5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGFueUlkOiBjaGF0LnVzZXIuY29tcGFueUlkID8gY2hhdC51c2VyLmNvbXBhbnlJZC50b1N0cmluZygpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBjaGF0cyBieSBjb21wYW55OlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRNZXNzYWdlc0ZvckNoYXQoY2hhdElkOiBzdHJpbmcpOiBQcm9taXNlPE1lc3NhZ2VbXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghY2hhdElkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNoYXRJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXNzYWdlc0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRNZXNzYWdlc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgLy8gQWxzbyBmZXRjaCBzZW5kZXIgZGV0YWlscyBpZiBpdCdzIGEgdXNlciwgbm90IGFuIGFnZW50ICgnbWUnKVxuICAgICAgICBjb25zdCBtZXNzYWdlcyA9IGF3YWl0IG1lc3NhZ2VzQ29sbGVjdGlvbi5hZ2dyZWdhdGUoW1xuICAgICAgICAgICAgeyAkbWF0Y2g6IHsgY2hhdElkOiBuZXcgT2JqZWN0SWQoY2hhdElkKSB9IH0sXG4gICAgICAgICAgICB7ICRzb3J0OiB7IHRpbWVzdGFtcDogMSB9IH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgJGxvb2t1cDoge1xuICAgICAgICAgICAgICAgICAgICBmcm9tOiAnY29udGFjdHMnLFxuICAgICAgICAgICAgICAgICAgICBsb2NhbEZpZWxkOiAnc2VuZGVySWQnLFxuICAgICAgICAgICAgICAgICAgICBmb3JlaWduRmllbGQ6ICdfaWQnLFxuICAgICAgICAgICAgICAgICAgICBhczogJ3NlbmRlckluZm8nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdKS50b0FycmF5KCk7XG5cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2VzLm1hcChtc2cgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBfaWQsIGNoYXRJZCwgc2VuZGVySWQsIHNlbmRlckluZm8sIC4uLnJlc3QgfSA9IG1zZyBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBzZW5kZXIgPSBtc2cuc2VuZGVyID09PSAnbWUnID8gJ21lJyA6IChzZW5kZXJJbmZvWzBdIHx8IG51bGwpO1xuXG4gICAgICAgICAgICBpZiAoc2VuZGVyICYmIHNlbmRlciAhPT0gJ21lJykge1xuICAgICAgICAgICAgICAgIHNlbmRlci5pZCA9IHNlbmRlci5faWQudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5yZXN0LFxuICAgICAgICAgICAgICAgIGlkOiBfaWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBzZW5kZXIsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgbWVzc2FnZXM6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlbmRNZXNzYWdlKGNoYXRJZDogc3RyaW5nLCB0ZXh0OiBzdHJpbmcsIGFnZW50SWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBuZXdNZXNzYWdlPzogTWVzc2FnZSB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgbWVzc2FnZXNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0TWVzc2FnZXNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGNoYXRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldENoYXRzQ29sbGVjdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKTtcbiAgICAgICAgY29uc3QgbmV3TWVzc2FnZVRvSW5zZXJ0OiBPbWl0PE1lc3NhZ2UsICdpZCcgfCAnX2lkJz4gPSB7XG4gICAgICAgICAgICBjaGF0SWQ6IG5ldyBPYmplY3RJZChjaGF0SWQpLFxuICAgICAgICAgICAgc2VuZGVyOiAnbWUnLCAvLyAnbWUnIGRlbm90ZXMgdGhlIGFnZW50XG4gICAgICAgICAgICBzZW5kZXJJZDogbmV3IE9iamVjdElkKGFnZW50SWQpLFxuICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogdGltZXN0YW1wLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbWVzc2FnZXNDb2xsZWN0aW9uLmluc2VydE9uZShuZXdNZXNzYWdlVG9JbnNlcnQgYXMgYW55KTtcblxuICAgICAgICBpZiAocmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgIGF3YWl0IGNoYXRzQ29sbGVjdGlvbi51cGRhdGVPbmUoXG4gICAgICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChjaGF0SWQpIH0sXG4gICAgICAgICAgICAgICAgeyAkc2V0OiB7IFxuICAgICAgICAgICAgICAgICAgICBsYXN0TWVzc2FnZTogdGV4dCwgXG4gICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogdGltZXN0YW1wLnRvTG9jYWxlVGltZVN0cmluZyhbXSwgeyBob3VyOiAnMi1kaWdpdCcsIG1pbnV0ZTogJzItZGlnaXQnIH0pLFxuICAgICAgICAgICAgICAgICAgICBsYXN0QWN0aXZpdHk6IHRpbWVzdGFtcCBcbiAgICAgICAgICAgICAgICB9IH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGZpbmFsTmV3TWVzc2FnZTogTWVzc2FnZSA9IHtcbiAgICAgICAgICAgICAgICAuLi4obmV3TWVzc2FnZVRvSW5zZXJ0IGFzIE9taXQ8TWVzc2FnZSwgJ19pZCd8J2lkJz4pLFxuICAgICAgICAgICAgICAgIF9pZDogcmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBpZDogcmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjaGF0SWQ6IG5ld01lc3NhZ2VUb0luc2VydC5jaGF0SWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBzZW5kZXJJZDogbmV3TWVzc2FnZVRvSW5zZXJ0LnNlbmRlcklkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4geyBcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLCBcbiAgICAgICAgICAgICAgICBuZXdNZXNzYWdlOiBmaW5hbE5ld01lc3NhZ2VcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igc2VuZGluZyBtZXNzYWdlOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2V0Q2hhdGJvdFN0YXR1cyhjaGF0SWQ6IHN0cmluZywgaXNBY3RpdmU6IGJvb2xlYW4pOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbiB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY2hhdHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q2hhdHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGF3YWl0IGNoYXRzQ29sbGVjdGlvbi51cGRhdGVPbmUoXG4gICAgICAgICAgICB7IF9pZDogbmV3IE9iamVjdElkKGNoYXRJZCkgfSxcbiAgICAgICAgICAgIHsgJHNldDogeyBpc0NoYXRib3RBY3RpdmU6IGlzQWN0aXZlIH0gfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHNldHRpbmcgY2hhdGJvdCBzdGF0dXM6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzdGFydE5ld0NoYXRzKHVzZXJzOiBVc2VyW10sIG1lc3NhZ2U6IHN0cmluZywgY29tcGFueUlkOiBzdHJpbmcsIGFnZW50SWQ6IHN0cmluZyk6IFByb21pc2U8Q2hhdFtdPiB7XG4gICAgY29uc3QgY2hhdHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q2hhdHNDb2xsZWN0aW9uKCk7XG4gICAgY29uc3QgbmV3T3JVcGRhdGVkQ2hhdHM6IENoYXRbXSA9IFtdO1xuXG4gICAgZm9yIChjb25zdCB1c2VyIG9mIHVzZXJzKSB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nQ2hhdERvYyA9IGF3YWl0IGNoYXRzQ29sbGVjdGlvbi5maW5kT25lKHtcbiAgICAgICAgICAgIHVzZXJJZDogbmV3IE9iamVjdElkKHVzZXIuaWQpLFxuICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoZXhpc3RpbmdDaGF0RG9jKSB7XG4gICAgICAgICAgICBhd2FpdCBzZW5kTWVzc2FnZShleGlzdGluZ0NoYXREb2MuX2lkLnRvU3RyaW5nKCksIG1lc3NhZ2UsIGFnZW50SWQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCB1cGRhdGVkQ2hhdDogQ2hhdCA9IHtcbiAgICAgICAgICAgICAgICAuLi4oZXhpc3RpbmdDaGF0RG9jIGFzIGFueSksXG4gICAgICAgICAgICAgICAgX2lkOiBleGlzdGluZ0NoYXREb2MuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgaWQ6IGV4aXN0aW5nQ2hhdERvYy5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICB1c2VySWQ6IGV4aXN0aW5nQ2hhdERvYy51c2VySWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IGV4aXN0aW5nQ2hhdERvYy5jb21wYW55SWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBsYXN0TWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9Mb2NhbGVUaW1lU3RyaW5nKFtdLCB7IGhvdXI6ICcyLWRpZ2l0JywgbWludXRlOiAnMi1kaWdpdCcgfSksXG4gICAgICAgICAgICAgICAgbGFzdEFjdGl2aXR5OiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgICAgIHVzZXI6IHVzZXIsXG4gICAgICAgICAgICAgICAgbWVzc2FnZXM6IFtdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG5ld09yVXBkYXRlZENoYXRzLnB1c2godXBkYXRlZENoYXQpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgY29uc3QgbmV3Q2hhdERhdGE6IE9taXQ8Q2hhdCwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgICAgICB1c2VySWQ6IG5ldyBPYmplY3RJZCh1c2VyLmlkKSxcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpLFxuICAgICAgICAgICAgICAgIGxhc3RNZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogdGltZXN0YW1wLnRvTG9jYWxlVGltZVN0cmluZyhbXSwgeyBob3VyOiAnMi1kaWdpdCcsIG1pbnV0ZTogJzItZGlnaXQnIH0pLFxuICAgICAgICAgICAgICAgIGxhc3RBY3Rpdml0eTogdGltZXN0YW1wLFxuICAgICAgICAgICAgICAgIHVucmVhZENvdW50OiAwLFxuICAgICAgICAgICAgICAgIHByaW9yaXR5OiAnbm9ybWFsJyxcbiAgICAgICAgICAgICAgICBjaGFubmVsOiAnV2ViY2hhdCcsXG4gICAgICAgICAgICAgICAgaXNDaGF0Ym90QWN0aXZlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlczogW11cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBjaGF0UmVzdWx0ID0gYXdhaXQgY2hhdHNDb2xsZWN0aW9uLmluc2VydE9uZShuZXdDaGF0RGF0YSBhcyBhbnkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoY2hhdFJlc3VsdC5pbnNlcnRlZElkKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgc2VuZE1lc3NhZ2UoY2hhdFJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksIG1lc3NhZ2UsIGFnZW50SWQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNyZWF0ZWRDaGF0OiBDaGF0ID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi4obmV3Q2hhdERhdGEgYXMgYW55KSxcbiAgICAgICAgICAgICAgICAgICAgX2lkOiBjaGF0UmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGNoYXRSZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICB1c2VySWQ6IG5ld0NoYXREYXRhLnVzZXJJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBjb21wYW55SWQ6IG5ld0NoYXREYXRhLmNvbXBhbnlJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICB1c2VyOiB1c2VyLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlczogW10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBuZXdPclVwZGF0ZWRDaGF0cy5wdXNoKGNyZWF0ZWRDaGF0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3T3JVcGRhdGVkQ2hhdHM7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVDYW1wYWlnbihkYXRhOiBQYXJ0aWFsPENhbXBhaWduPiAmIHsgc2NoZWR1bGVUeXBlPzogJ25vdycgfCAnbGF0ZXInIH0sIGNvbXBhbnlJZDogc3RyaW5nLCBhZ2VudElkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgY2FtcGFpZ24/OiBDYW1wYWlnbjsgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNhbXBhaWduc0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRDYW1wYWlnbnNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzQ29sbGVjdGlvbiA9IGF3YWl0IGdldFVzZXJzQ29sbGVjdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgbGV0IHN0YXR1czogQ2FtcGFpZ25bJ3N0YXR1cyddID0gJ0RyYWZ0JztcbiAgICAgICAgbGV0IHNlbnRBdDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgZGVsaXZlcnkgPSAwO1xuICAgICAgICBsZXQgZW5nYWdlbWVudCA9IDA7XG4gICAgICAgIGxldCBjb252ZXJzaW9uID0gMDtcblxuICAgICAgICBpZiAoZGF0YS5zY2hlZHVsZVR5cGUgPT09ICdub3cnKSB7XG4gICAgICAgICAgICBzdGF0dXMgPSAnQ29tcGxldGVkJztcbiAgICAgICAgICAgIHNlbnRBdCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgIC8vIEdlbmVyYXRlIG1vY2sgcGVyZm9ybWFuY2UgZGF0YSBmb3IgaW1tZWRpYXRlIGNhbXBhaWduc1xuICAgICAgICAgICAgZGVsaXZlcnkgPSA5NSArIE1hdGgucmFuZG9tKCkgKiA1OyBcbiAgICAgICAgICAgIGVuZ2FnZW1lbnQgPSAxMCArIE1hdGgucmFuZG9tKCkgKiAxNTtcbiAgICAgICAgICAgIGNvbnZlcnNpb24gPSAyICsgTWF0aC5yYW5kb20oKSAqIDg7IFxuXG4gICAgICAgICAgICAvLyBBY3R1YWxseSBzZW5kIHRoZSBtZXNzYWdlc1xuICAgICAgICAgICAgaWYgKGRhdGEuYXVkaWVuY2UgJiYgZGF0YS5tZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXVkaWVuY2VDb250YWN0cyA9IGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi5maW5kKHsgX2lkOiB7ICRpbjogZGF0YS5hdWRpZW5jZS5tYXAoaWQgPT4gbmV3IE9iamVjdElkKGlkKSkgfSB9KS50b0FycmF5KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdXNlcnMgPSBhdWRpZW5jZUNvbnRhY3RzLm1hcChjID0+ICh7XG4gICAgICAgICAgICAgICAgICAgIC4uLmMsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBjLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBfaWQ6IGMuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgfSkpIGFzIFVzZXJbXTtcblxuICAgICAgICAgICAgICAgIGF3YWl0IHN0YXJ0TmV3Q2hhdHModXNlcnMsIGRhdGEubWVzc2FnZSwgY29tcGFueUlkLCBhZ2VudElkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChkYXRhLnNjaGVkdWxlVHlwZSA9PT0gJ2xhdGVyJykge1xuICAgICAgICAgICAgc3RhdHVzID0gJ1NjaGVkdWxlZCc7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBuZXdDYW1wYWlnbjogT21pdDxDYW1wYWlnbiwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgIHRpdGxlOiBkYXRhLnRpdGxlISxcbiAgICAgICAgICAgIHR5cGU6IGRhdGEudHlwZSB8fCAnQnJvYWRjYXN0JyxcbiAgICAgICAgICAgIHN0YXR1czogc3RhdHVzLFxuICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSxcbiAgICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgYXVkaWVuY2U6IGRhdGEuYXVkaWVuY2UgfHwgW10sXG4gICAgICAgICAgICBtZXNzYWdlOiBkYXRhLm1lc3NhZ2UgfHwgXCJcIixcbiAgICAgICAgICAgIHNlbnRBdDogc2VudEF0LFxuICAgICAgICAgICAgZGVsaXZlcnksXG4gICAgICAgICAgICBlbmdhZ2VtZW50LFxuICAgICAgICAgICAgY29udmVyc2lvbixcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjYW1wYWlnbnNDb2xsZWN0aW9uLmluc2VydE9uZShuZXdDYW1wYWlnbiBhcyBhbnkpO1xuICAgICAgICBpZiAocmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNyZWF0ZWRDYW1wYWlnbjogQ2FtcGFpZ24gPSB7XG4gICAgICAgICAgICAgICAgLi4ubmV3Q2FtcGFpZ24sXG4gICAgICAgICAgICAgICAgX2lkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBjYW1wYWlnbjogY3JlYXRlZENhbXBhaWduIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIGNyZWF0ZSBjYW1wYWlnbi5cIiB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDcmVhdGUgY2FtcGFpZ24gZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZC5cIiB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENhbXBhaWduc0J5Q29tcGFueShjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8Q2FtcGFpZ25bXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghY29tcGFueUlkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNvbXBhbnlJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjYW1wYWlnbnNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q2FtcGFpZ25zQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBjYW1wYWlnbnMgPSBhd2FpdCBjYW1wYWlnbnNDb2xsZWN0aW9uLmZpbmQoeyBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpIH0pLnNvcnQoeyBjcmVhdGVkQXQ6IC0xIH0pLnRvQXJyYXkoKTtcblxuICAgICAgICByZXR1cm4gY2FtcGFpZ25zLm1hcChjYW1wYWlnbiA9PiAoe1xuICAgICAgICAgICAgLi4uY2FtcGFpZ24sXG4gICAgICAgICAgICBfaWQ6IGNhbXBhaWduLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgaWQ6IGNhbXBhaWduLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgY29tcGFueUlkOiBjYW1wYWlnbi5jb21wYW55SWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoY2FtcGFpZ24uY3JlYXRlZEF0KS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgc2VudEF0OiBjYW1wYWlnbi5zZW50QXQgPyBuZXcgRGF0ZShjYW1wYWlnbi5zZW50QXQpLnRvSVNPU3RyaW5nKCkgOiB1bmRlZmluZWQsXG4gICAgICAgIH0pKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgY2FtcGFpZ25zOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbXBvcnRDb250YWN0c0Zyb21DU1YoY29udGFjdHNEYXRhOiB7IG5hbWU6IHN0cmluZzsgZW1haWw6IHN0cmluZzsgcGhvbmU6IHN0cmluZyB9W10sIGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U6IHN0cmluZzsgbmV3Q29udGFjdHM6IFVzZXJbXTsgaW1wb3J0ZWRDb3VudDogbnVtYmVyOyBza2lwcGVkQ291bnQ6IG51bWJlcjsgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzQ29sbGVjdGlvbiA9IGF3YWl0IGdldFVzZXJzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBuZXdDb250YWN0czogVXNlcltdID0gW107XG4gICAgICAgIGxldCBpbXBvcnRlZENvdW50ID0gMDtcbiAgICAgICAgbGV0IHNraXBwZWRDb3VudCA9IDA7XG5cbiAgICAgICAgY29uc3QgY29tcGFueU9iaklkID0gbmV3IE9iamVjdElkKGNvbXBhbnlJZCk7XG5cbiAgICAgICAgZm9yIChjb25zdCBjb250YWN0IG9mIGNvbnRhY3RzRGF0YSkge1xuICAgICAgICAgICAgbGV0IGV4aXN0aW5nQ29udGFjdCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoY29udGFjdC5lbWFpbCkge1xuICAgICAgICAgICAgICAgIGV4aXN0aW5nQ29udGFjdCA9IGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi5maW5kT25lKHtcbiAgICAgICAgICAgICAgICAgICAgZW1haWw6IGNvbnRhY3QuZW1haWwudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGFueUlkOiBjb21wYW55T2JqSWRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGV4aXN0aW5nQ29udGFjdCkge1xuICAgICAgICAgICAgICAgIHNraXBwZWRDb3VudCsrO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBjb250YWN0VG9JbnNlcnQ6IE9taXQ8VXNlciwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBjb250YWN0Lm5hbWUsXG4gICAgICAgICAgICAgICAgZW1haWw6IGNvbnRhY3QuZW1haWwudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICAgICBwaG9uZTogY29udGFjdC5waG9uZSxcbiAgICAgICAgICAgICAgICBhdmF0YXI6ICcnLFxuICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogY29tcGFueU9iaklkLFxuICAgICAgICAgICAgICAgIG5vdGVzOiBbXSxcbiAgICAgICAgICAgICAgICBvbmxpbmU6IGZhbHNlLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udGFjdHNDb2xsZWN0aW9uLmluc2VydE9uZShjb250YWN0VG9JbnNlcnQgYXMgYW55KTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQuaW5zZXJ0ZWRJZCkge1xuICAgICAgICAgICAgICAgIGltcG9ydGVkQ291bnQrKztcbiAgICAgICAgICAgICAgICBuZXdDb250YWN0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgLi4uKGNvbnRhY3RUb0luc2VydCBhcyBPbWl0PFVzZXIsICdpZCcgfCAnX2lkJz4pLFxuICAgICAgICAgICAgICAgICAgICBfaWQ6IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIGlkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBjb21wYW55SWQ6IGNvbXBhbnlJZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgbWVzc2FnZTogYEltcG9ydCBjb21wbGV0ZS4gQWRkZWQgJHtpbXBvcnRlZENvdW50fSBuZXcgY29udGFjdHMsIHNraXBwZWQgJHtza2lwcGVkQ291bnR9IGR1cGxpY2F0ZXMuYCxcbiAgICAgICAgICAgIG5ld0NvbnRhY3RzLFxuICAgICAgICAgICAgaW1wb3J0ZWRDb3VudCxcbiAgICAgICAgICAgIHNraXBwZWRDb3VudFxuICAgICAgICB9O1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkNTViBpbXBvcnQgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZCBkdXJpbmcgaW1wb3J0LlwiLCBuZXdDb250YWN0czogW10sIGltcG9ydGVkQ291bnQ6IDAsIHNraXBwZWRDb3VudDogMCB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUFnZW50QXZhdGFyKGFnZW50SWQ6IHN0cmluZywgYXZhdGFyOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgYXZhdGFyPzogc3RyaW5nOyB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHVwZGF0ZVJlc3VsdCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChhZ2VudElkKSB9LFxuICAgICAgICAgICAgeyAkc2V0OiB7IGF2YXRhciB9IH1cbiAgICAgICAgKTtcblxuICAgICAgICBpZiAodXBkYXRlUmVzdWx0Lm1vZGlmaWVkQ291bnQgPT09IDAgJiYgdXBkYXRlUmVzdWx0Lm1hdGNoZWRDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQWdlbnQgbm90IGZvdW5kLlwiIH07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIExvZyBhY3Rpdml0eVxuICAgICAgICBjb25zdCBhZ2VudCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IF9pZDogbmV3IE9iamVjdElkKGFnZW50SWQpIH0pO1xuICAgICAgICBpZiAoYWdlbnQpIHtcbiAgICAgICAgICAgICBhd2FpdCBsb2dBY3Rpdml0eShhZ2VudC5jb21wYW55SWQsIGFnZW50Lm5hbWUsICdVcGRhdGUgUHJvZmlsZScsIGBVcGRhdGVkIHByb2ZpbGUgcGljdHVyZWApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgYXZhdGFyOiBhdmF0YXIgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVXBkYXRlIGFnZW50IGF2YXRhciBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkLlwiIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2NoZWR1bGVBbmFseXRpY3NSZXBvcnQoZW1haWw6IHN0cmluZywgZnJlcXVlbmN5OiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZTogc3RyaW5nOyB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gSW4gYSByZWFsIGFwcGxpY2F0aW9uLCB5b3Ugd291bGQgY29ubmVjdCB0byBhIGpvYiBzY2hlZHVsZXIgKGUuZy4sIEJ1bGxNUSwgY3JvbilcbiAgICAgICAgLy8gYW5kIHF1ZXVlIGEgam9iIHRvIHNlbmQgYW4gZW1haWwgcmVwb3J0IGJhc2VkIG9uIHRoZSBmcmVxdWVuY3kuXG4gICAgICAgIC8vIEZvciB0aGlzIGRlbW8sIHdlJ2xsIGp1c3QgbG9nIGl0IHRvIHRoZSBjb25zb2xlLlxuICAgICAgICBjb25zb2xlLmxvZyhgQW5hbHl0aWNzIHJlcG9ydCBzY2hlZHVsZWQgZm9yICR7ZW1haWx9IHdpdGggZnJlcXVlbmN5OiAke2ZyZXF1ZW5jeX1gKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFlvdSBjb3VsZCBhbHNvIGxvZyB0aGlzIGFzIGEgc3lzdGVtIGFjdGl2aXR5XG4gICAgICAgIC8vIGF3YWl0IGxvZ0FjdGl2aXR5KGNvbXBhbnlJZCwgJ1N5c3RlbScsICdTY2hlZHVsZSBSZXBvcnQnLCBgQW5hbHl0aWNzIHJlcG9ydCBzY2hlZHVsZWQgZm9yICR7ZW1haWx9ICgke2ZyZXF1ZW5jeX0pYCk7XG5cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgbWVzc2FnZTogYFJlcG9ydCBzdWNjZXNzZnVsbHkgc2NoZWR1bGVkIGZvciAke2VtYWlsfS5gIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlNjaGVkdWxlIHJlcG9ydCBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIHdoaWxlIHNjaGVkdWxpbmcgdGhlIHJlcG9ydC5cIiB9O1xuICAgIH1cbn1cbiAgICBcblxuICAgIFxuXG4gICAgXG5cblxuXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjBSQXN2QnNCIn0=
}}),
"[project]/src/app/data:715c3a [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"6049a27b16f34690f84c6af4f9a048cb3293c23e61":"handleLogin"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "handleLogin": (()=>handleLogin)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var handleLogin = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("6049a27b16f34690f84c6af4f9a048cb3293c23e61", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "handleLogin"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/page.tsx [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>Home)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$chat$2d$layout$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/chat-layout.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$vertical$2d$nav$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/vertical-nav.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$contacts$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/contacts-view.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$agents$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/agents-view.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$dashboard$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/dashboard-view.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$announcements$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/announcements-view.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$settings$2d$dialog$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/settings-dialog.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$campaigns$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/campaigns-view.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$my$2d$performance$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/my-performance-view.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$auth$2d$form$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/auth-form.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$app$2f$data$3a$715c3a__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$text$2f$javascript$3e$__ = __turbopack_context__.i("[project]/src/app/data:715c3a [app-ssr] (ecmascript) <text/javascript>");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$hooks$2f$use$2d$toast$2e$ts__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/hooks/use-toast.ts [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$loading$2d$screen$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/loading-screen.tsx [app-ssr] (ecmascript)");
"use client";
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
function Home({ params, searchParams }) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["use"])(params);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["use"])(searchParams);
    const [activeView, setActiveView] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])("Chat");
    const [isNavOpen, setIsNavOpen] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])(false);
    const [currentUser, setCurrentUser] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])(null);
    const [isSettingsOpen, setIsSettingsOpen] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])(false);
    const [initialContact, setInitialContact] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])(null);
    const [isLoading, setIsLoading] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])(true);
    const { toast } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$hooks$2f$use$2d$toast$2e$ts__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useToast"])();
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(()=>{
        const timer = setTimeout(()=>{
            setIsLoading(false);
        }, 1500);
        return ()=>clearTimeout(timer);
    }, []);
    const onLogin = async (email, password_unused)=>{
        const result = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$app$2f$data$3a$715c3a__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$text$2f$javascript$3e$__["handleLogin"])(email, password_unused);
        if (result.success && result.agent) {
            const agent = result.agent;
            setCurrentUser({
                id: agent.id,
                name: agent.name,
                avatar: agent.avatar,
                role: agent.role,
                email: agent.email,
                phone: agent.phone,
                companyId: agent.companyId
            });
            if (agent.role === 'admin') {
                setActiveView('Dashboard');
            } else {
                setActiveView('Chat');
            }
        }
        return {
            success: result.success,
            message: result.message
        };
    };
    const handleLogout = ()=>{
        setCurrentUser(null);
        setActiveView('Chat');
    };
    const handleUpdateUser = (updatedUser)=>{
        setCurrentUser((prev)=>prev ? {
                ...prev,
                ...updatedUser
            } : null);
    };
    const handleNavigateToChat = (contact)=>{
        setInitialContact(contact);
        setActiveView("Chat");
        // Reset initialContact after a short delay to allow ChatLayout to pick it up
        setTimeout(()=>setInitialContact(null), 100);
    };
    const renderView = ()=>{
        const props = {
            onMenuClick: ()=>setIsNavOpen(true),
            user: currentUser
        };
        switch(activeView){
            case "Chat":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$chat$2d$layout$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ChatLayout"], {
                    ...props,
                    initialContact: initialContact
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 86,
                    columnNumber: 16
                }, this);
            case "Contacts":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$contacts$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ContactsView"], {
                    ...props,
                    onNavigateToChat: handleNavigateToChat
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 88,
                    columnNumber: 16
                }, this);
            case "Agents":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$agents$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AgentsView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 90,
                    columnNumber: 16
                }, this);
            case "Dashboard":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$dashboard$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DashboardView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 92,
                    columnNumber: 16
                }, this);
            case "Announcements":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$announcements$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AnnouncementsView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 94,
                    columnNumber: 16
                }, this);
            case "My Performance":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$my$2d$performance$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MyPerformanceView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 96,
                    columnNumber: 16
                }, this);
            case "Campaigns":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$campaigns$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CampaignsView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 98,
                    columnNumber: 17
                }, this);
            default:
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$chat$2d$layout$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ChatLayout"], {
                    user: currentUser,
                    onMenuClick: ()=>setIsNavOpen(true),
                    initialContact: initialContact
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 100,
                    columnNumber: 16
                }, this);
        }
    };
    if (isLoading) {
        return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$loading$2d$screen$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LoadingScreen"], {}, void 0, false, {
            fileName: "[project]/src/app/page.tsx",
            lineNumber: 105,
            columnNumber: 12
        }, this);
    }
    if (!currentUser) {
        return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])("main", {
            className: "flex h-screen w-full items-center justify-center bg-background p-4 overflow-hidden auth-page-background",
            children: /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$auth$2d$form$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AuthForm"], {
                onLogin: onLogin
            }, void 0, false, {
                fileName: "[project]/src/app/page.tsx",
                lineNumber: 111,
                columnNumber: 9
            }, this)
        }, void 0, false, {
            fileName: "[project]/src/app/page.tsx",
            lineNumber: 110,
            columnNumber: 7
        }, this);
    }
    return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])("main", {
        className: "flex h-screen bg-background",
        children: [
            /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$settings$2d$dialog$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SettingsDialog"], {
                open: isSettingsOpen,
                onOpenChange: setIsSettingsOpen,
                user: currentUser,
                onUserUpdate: handleUpdateUser
            }, void 0, false, {
                fileName: "[project]/src/app/page.tsx",
                lineNumber: 118,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$vertical$2d$nav$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["VerticalNav"], {
                activeView: activeView,
                setActiveView: setActiveView,
                user: currentUser,
                onLogout: handleLogout,
                isOpen: isNavOpen,
                setIsOpen: setIsNavOpen,
                onSettingsClick: ()=>setIsSettingsOpen(true)
            }, void 0, false, {
                fileName: "[project]/src/app/page.tsx",
                lineNumber: 124,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])("div", {
                className: "flex-1 md:pl-[70px] min-w-0",
                children: renderView()
            }, void 0, false, {
                fileName: "[project]/src/app/page.tsx",
                lineNumber: 133,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true, {
        fileName: "[project]/src/app/page.tsx",
        lineNumber: 117,
        columnNumber: 5
    }, this);
}
}}),

};

//# sourceMappingURL=src_app_4a20acf6._.js.map