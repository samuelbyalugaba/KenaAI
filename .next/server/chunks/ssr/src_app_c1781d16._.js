module.exports = {

"[project]/src/app/data:59f1a6 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"7efa29b2bf7fa82364aadbf5011c649e7f21f09fbf":"createAgent"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "createAgent": (()=>createAgent)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var createAgent = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("7efa29b2bf7fa82364aadbf5011c649e7f21f09fbf", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "createAgent"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:1dcf27 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40d5d08abcb55310482395efa2b68b3d883c709e39":"getChatsByCompany"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getChatsByCompany": (()=>getChatsByCompany)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var getChatsByCompany = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("40d5d08abcb55310482395efa2b68b3d883c709e39", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getChatsByCompany"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:5faa3f [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40534236dcc36f51af1a921f1d5dd985231fa0be2f":"getMessagesForChat"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getMessagesForChat": (()=>getMessagesForChat)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var getMessagesForChat = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("40534236dcc36f51af1a921f1d5dd985231fa0be2f", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getMessagesForChat"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:6d17ca [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"70550f3a06ff63d8c1c6555f235fca6dc7330a34c0":"sendMessage"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "sendMessage": (()=>sendMessage)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var sendMessage = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("70550f3a06ff63d8c1c6555f235fca6dc7330a34c0", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "sendMessage"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:56d2b3 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"609d4f76fb496a216c91066f2d4684c160f7fd02a4":"setChatbotStatus"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "setChatbotStatus": (()=>setChatbotStatus)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var setChatbotStatus = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("609d4f76fb496a216c91066f2d4684c160f7fd02a4", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "setChatbotStatus"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:d5d400 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"78e1313773a3e1763f3457daecfd448d9fb5a79106":"startNewChats"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "startNewChats": (()=>startNewChats)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var startNewChats = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("78e1313773a3e1763f3457daecfd448d9fb5a79106", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "startNewChats"); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4vYWN0aW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbid1c2Ugc2VydmVyJztcblxuaW1wb3J0IHsgZ2V0RGIgfSBmcm9tIFwiQC9saWIvZGJcIjtcbmltcG9ydCB7IGhhc2hQYXNzd29yZCwgdmVyaWZ5UGFzc3dvcmQgfSBmcm9tIFwiQC9saWIvYXV0aFwiO1xuaW1wb3J0IHR5cGUgeyBBZ2VudCwgQWdlbnRSb2xlLCBBbm5vdW5jZW1lbnQsIENvbXBhbnksIENvbW1lbnQsIEFjdGl2aXR5TG9nLCBVc2VyLCBOb3RlLCBDaGF0LCBNZXNzYWdlLCBDaGFubmVsLCBDYW1wYWlnbiB9IGZyb20gXCJAL3R5cGVzXCI7XG5pbXBvcnQgeyBDb2xsZWN0aW9uLCBEYiwgT2JqZWN0SWQgfSBmcm9tIFwibW9uZ29kYlwiO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRBZ2VudHNDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxBZ2VudD4+IHtcbiAgICBjb25zdCBkYjogRGIgPSBhd2FpdCBnZXREYigpO1xuICAgIHJldHVybiBkYi5jb2xsZWN0aW9uPEFnZW50PignYWdlbnRzJyk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDb21wYW5pZXNDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxDb21wYW55Pj4ge1xuICAgIGNvbnN0IGRiOiBEYiA9IGF3YWl0IGdldERiKCk7XG4gICAgcmV0dXJuIGRiLmNvbGxlY3Rpb248Q29tcGFueT4oJ2NvbXBhbmllcycpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRBbm5vdW5jZW1lbnRzQ29sbGVjdGlvbigpOiBQcm9taXNlPENvbGxlY3Rpb248QW5ub3VuY2VtZW50Pj4ge1xuICAgIGNvbnN0IGRiOiBEYiA9IGF3YWl0IGdldERiKCk7XG4gICAgcmV0dXJuIGRiLmNvbGxlY3Rpb248QW5ub3VuY2VtZW50PignYW5ub3VuY2VtZW50cycpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRBY3Rpdml0eUxvZ3NDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxBY3Rpdml0eUxvZz4+IHtcbiAgICBjb25zdCBkYjogRGIgPSBhd2FpdCBnZXREYigpO1xuICAgIHJldHVybiBkYi5jb2xsZWN0aW9uPEFjdGl2aXR5TG9nPignYWN0aXZpdHlfbG9ncycpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VXNlcnNDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxVc2VyPj4ge1xuICAgIGNvbnN0IGRiOiBEYiA9IGF3YWl0IGdldERiKCk7XG4gICAgcmV0dXJuIGRiLmNvbGxlY3Rpb248VXNlcj4oJ2NvbnRhY3RzJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENoYXRzQ29sbGVjdGlvbigpOiBQcm9taXNlPENvbGxlY3Rpb248Q2hhdD4+IHtcbiAgICBjb25zdCBkYjogRGIgPSBhd2FpdCBnZXREYigpO1xuICAgIHJldHVybiBkYi5jb2xsZWN0aW9uPENoYXQ+KCdjaGF0cycpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRNZXNzYWdlc0NvbGxlY3Rpb24oKTogUHJvbWlzZTxDb2xsZWN0aW9uPE1lc3NhZ2U+PiB7XG4gICAgY29uc3QgZGI6IERiID0gYXdhaXQgZ2V0RGIoKTtcbiAgICByZXR1cm4gZGIuY29sbGVjdGlvbjxNZXNzYWdlPignbWVzc2FnZXMnKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0Q2FtcGFpZ25zQ29sbGVjdGlvbigpOiBQcm9taXNlPENvbGxlY3Rpb248Q2FtcGFpZ24+PiB7XG4gICAgY29uc3QgZGI6IERiID0gYXdhaXQgZ2V0RGIoKTtcbiAgICByZXR1cm4gZGIuY29sbGVjdGlvbjxDYW1wYWlnbj4oJ2NhbXBhaWducycpO1xufVxuXG5cbmFzeW5jIGZ1bmN0aW9uIGxvZ0FjdGl2aXR5KGNvbXBhbnlJZDogc3RyaW5nIHwgT2JqZWN0SWQsIGFnZW50TmFtZTogc3RyaW5nLCBhY3Rpb246IHN0cmluZywgZGV0YWlsczogc3RyaW5nKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgbG9nc0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBY3Rpdml0eUxvZ3NDb2xsZWN0aW9uKCk7XG4gICAgICAgIGF3YWl0IGxvZ3NDb2xsZWN0aW9uLmluc2VydE9uZSh7XG4gICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpLFxuICAgICAgICAgICAgYWdlbnROYW1lLFxuICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgZGV0YWlscyxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBsb2cgYWN0aXZpdHk6XCIsIGVycm9yKTtcbiAgICB9XG59XG5cbi8vIEEgc2ltcGxlIGhhc2hpbmcgZnVuY3Rpb24gdG8gY3JlYXRlIGEgcHNldWRvLXJhbmRvbSBidXQgY29uc2lzdGVudCBudW1iZXIgZnJvbSBhIHN0cmluZy5cbmNvbnN0IHNpbXBsZUhhc2ggPSAoc3RyOiBzdHJpbmcpID0+IHtcbiAgbGV0IGhhc2ggPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNoYXIgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoID0gKGhhc2ggPDwgNSkgLSBoYXNoICsgY2hhcjtcbiAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICB9XG4gIHJldHVybiBNYXRoLmFicyhoYXNoKTtcbn07XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFnZW50c0J5Q29tcGFueShjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8QWdlbnRbXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghY29tcGFueUlkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNvbXBhbnlJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhZ2VudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWdlbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBtZXNzYWdlc0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRNZXNzYWdlc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGFnZW50cyA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZCh7IGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkgfSwgeyBwcm9qZWN0aW9uOiB7IHBhc3N3b3JkOiAwIH0gfSkudG9BcnJheSgpO1xuXG4gICAgICAgIC8vIEVmZmljaWVudGx5IGdldCBjb252ZXJzYXRpb24gY291bnRzIGZvciBhbGwgYWdlbnRzIGluIG9uZSBxdWVyeVxuICAgICAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIHRvZGF5LnNldEhvdXJzKDAsIDAsIDAsIDApO1xuXG4gICAgICAgIGNvbnN0IGNvbnZlcnNhdGlvbkNvdW50cyA9IGF3YWl0IG1lc3NhZ2VzQ29sbGVjdGlvbi5hZ2dyZWdhdGUoW1xuICAgICAgICAgICAgeyAkbWF0Y2g6IHsgc2VuZGVyOiAnbWUnLCBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpLCB0aW1lc3RhbXA6IHsgJGd0ZTogdG9kYXkudG9JU09TdHJpbmcoKSB9IH0gfSxcbiAgICAgICAgICAgIHsgJGdyb3VwOiB7IF9pZDogXCIkc2VuZGVySWRcIiwgY291bnQ6IHsgJHN1bTogMSB9IH0gfVxuICAgICAgICBdKS50b0FycmF5KCk7XG5cbiAgICAgICAgY29uc3QgY291bnRzTWFwID0gbmV3IE1hcChjb252ZXJzYXRpb25Db3VudHMubWFwKGl0ZW0gPT4gW2l0ZW0uX2lkLnRvU3RyaW5nKCksIGl0ZW0uY291bnRdKSk7XG5cbiAgICAgICAgY29uc3QgYWdlbnREYXRhV2l0aFN0YXRzID0gYWdlbnRzLm1hcChhZ2VudCA9PiB7XG4gICAgICAgICAgICBjb25zdCBhZ2VudElkU3RyID0gYWdlbnQuX2lkLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBjb25zdCBjb252ZXJzYXRpb25zVG9kYXkgPSBjb3VudHNNYXAuZ2V0KGFnZW50SWRTdHIpIHx8IDA7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHN0YXR1c2VzOiBBcnJheTwnT25saW5lJyB8ICdPZmZsaW5lJyB8ICdCdXN5Jz4gPSBbJ09ubGluZScsICdPZmZsaW5lJywgJ0J1c3knXTtcbiAgICAgICAgICAgIGNvbnN0IGhhc2ggPSBzaW1wbGVIYXNoKGFnZW50Lm5hbWUpO1xuICAgICAgICAgICAgY29uc3QgcmFuZG9tU3RhdHVzID0gc3RhdHVzZXNbaGFzaCAlIHN0YXR1c2VzLmxlbmd0aF07XG5cbiAgICAgICAgICAgIGxldCBhdmdSZXNwb25zZVRpbWUgPSBcIk4vQVwiO1xuICAgICAgICAgICAgbGV0IGNzYXQ6IG51bWJlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgaWYgKGNvbnZlcnNhdGlvbnNUb2RheSA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhdmdSZXNwb25zZU1pbnV0ZXMgPSAoaGFzaCAlIDQpICsgMTsgLy8gMSB0byA0IG1pbnV0ZXNcbiAgICAgICAgICAgICAgICBjb25zdCBhdmdSZXNwb25zZVNlY29uZHMgPSBoYXNoICUgNjA7IC8vIDAgdG8gNTkgc2Vjb25kc1xuICAgICAgICAgICAgICAgIGF2Z1Jlc3BvbnNlVGltZSA9IGAke2F2Z1Jlc3BvbnNlTWludXRlc31tICR7YXZnUmVzcG9uc2VTZWNvbmRzfXNgO1xuICAgICAgICAgICAgICAgIGNzYXQgPSA4NSArIChoYXNoICUgMTUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLmFnZW50LFxuICAgICAgICAgICAgICAgIF9pZDogYWdlbnRJZFN0cixcbiAgICAgICAgICAgICAgICBpZDogYWdlbnRJZFN0cixcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IGFnZW50LmNvbXBhbnlJZD8udG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjb252ZXJzYXRpb25zVG9kYXksXG4gICAgICAgICAgICAgICAgc3RhdHVzOiByYW5kb21TdGF0dXMsXG4gICAgICAgICAgICAgICAgYXZnUmVzcG9uc2VUaW1lLFxuICAgICAgICAgICAgICAgIGNzYXQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBhZ2VudERhdGFXaXRoU3RhdHM7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIGFnZW50cyBieSBjb21wYW55OlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVBbm5vdW5jZW1lbnQoZGF0YTogeyB0aXRsZTogc3RyaW5nOyBjb250ZW50OiBzdHJpbmc7IGNhdGVnb3J5OiBzdHJpbmc7IGF1dGhvcklkOiBzdHJpbmc7IGNvbXBhbnlJZDogc3RyaW5nIH0pOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgYW5ub3VuY2VtZW50PzogQW5ub3VuY2VtZW50IH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBhbm5vdW5jZW1lbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFubm91bmNlbWVudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGFnZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBZ2VudHNDb2xsZWN0aW9uKCk7XG5cbiAgICAgICAgY29uc3QgYXV0aG9yID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5maW5kT25lKHsgX2lkOiBuZXcgT2JqZWN0SWQoZGF0YS5hdXRob3JJZCkgfSk7XG4gICAgICAgIGlmICghYXV0aG9yKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBdXRob3Igbm90IGZvdW5kLlwiIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBuZXdBbm5vdW5jZW1lbnQ6IE9taXQ8QW5ub3VuY2VtZW50LCAnaWQnIHwgJ19pZCc+ID0ge1xuICAgICAgICAgICAgdGl0bGU6IGRhdGEudGl0bGUsXG4gICAgICAgICAgICBjb250ZW50OiBkYXRhLmNvbnRlbnQsXG4gICAgICAgICAgICBjYXRlZ29yeTogZGF0YS5jYXRlZ29yeSBhcyBhbnksXG4gICAgICAgICAgICBhdXRob3I6IHtcbiAgICAgICAgICAgICAgICBpZDogYXV0aG9yLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIG5hbWU6IGF1dGhvci5uYW1lLFxuICAgICAgICAgICAgICAgIGF2YXRhcjogYXV0aG9yLmF2YXRhclxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGRhdGEuY29tcGFueUlkKSxcbiAgICAgICAgICAgIGRhdGU6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgIHJlYWRCeTogW10sXG4gICAgICAgICAgICBjb21tZW50czogW10sXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYW5ub3VuY2VtZW50c0NvbGxlY3Rpb24uaW5zZXJ0T25lKG5ld0Fubm91bmNlbWVudCBhcyBhbnkpO1xuICAgICAgICBhd2FpdCBsb2dBY3Rpdml0eShkYXRhLmNvbXBhbnlJZCwgYXV0aG9yLm5hbWUsICdDcmVhdGUgQW5ub3VuY2VtZW50JywgYFB1Ymxpc2hlZDogXCIke2RhdGEudGl0bGV9XCJgKTtcblxuXG4gICAgICAgIGlmIChyZXN1bHQuaW5zZXJ0ZWRJZCkge1xuICAgICAgICAgICAgY29uc3QgY3JlYXRlZEFubm91bmNlbWVudDogQW5ub3VuY2VtZW50ID0ge1xuICAgICAgICAgICAgICAgIC4uLihuZXdBbm5vdW5jZW1lbnQgYXMgT21pdDxBbm5vdW5jZW1lbnQsICdfaWQnIHwgJ2lkJz4pLFxuICAgICAgICAgICAgICAgIF9pZDogcmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBpZDogcmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChkYXRhLmNvbXBhbnlJZCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBhbm5vdW5jZW1lbnQ6IGNyZWF0ZWRBbm5vdW5jZW1lbnQgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkZhaWxlZCB0byBjcmVhdGUgYW5ub3VuY2VtZW50LlwiIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkNyZWF0ZSBhbm5vdW5jZW1lbnQgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZC5cIiB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFubm91bmNlbWVudHNCeUNvbXBhbnkoY29tcGFueUlkOiBzdHJpbmcpOiBQcm9taXNlPEFubm91bmNlbWVudFtdPiB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKCFjb21wYW55SWQgfHwgIU9iamVjdElkLmlzVmFsaWQoY29tcGFueUlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QW5ub3VuY2VtZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgYW5ub3VuY2VtZW50cyA9IGF3YWl0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uLmZpbmQoeyBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpIH0pLnNvcnQoeyBkYXRlOiAtMSB9KS50b0FycmF5KCk7XG5cbiAgICAgICAgcmV0dXJuIGFubm91bmNlbWVudHMubWFwKGFubm91bmNlbWVudCA9PiAoe1xuICAgICAgICAgICAgLi4uYW5ub3VuY2VtZW50LFxuICAgICAgICAgICAgX2lkOiBhbm5vdW5jZW1lbnQuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBpZDogYW5ub3VuY2VtZW50Ll9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgY29tcGFueUlkOiBhbm5vdW5jZW1lbnQuY29tcGFueUlkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICByZWFkQnk6IGFubm91bmNlbWVudC5yZWFkQnkgfHwgW10sXG4gICAgICAgICAgICBjb21tZW50czogKGFubm91bmNlbWVudC5jb21tZW50cyB8fCBbXSkubWFwKChjb21tZW50OiBDb21tZW50KSA9PiAoe1xuICAgICAgICAgICAgICAgIC4uLmNvbW1lbnQsXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZShjb21tZW50LnRpbWVzdGFtcCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgfSkpO1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIGFubm91bmNlbWVudHMgYnkgY29tcGFueTpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFya0Fubm91bmNlbWVudEFzUmVhZChhbm5vdW5jZW1lbnRJZDogc3RyaW5nLCBhZ2VudElkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbiB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYW5ub3VuY2VtZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBbm5vdW5jZW1lbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBhd2FpdCBhbm5vdW5jZW1lbnRzQ29sbGVjdGlvbi51cGRhdGVPbmUoXG4gICAgICAgICAgICB7IF9pZDogbmV3IE9iamVjdElkKGFubm91bmNlbWVudElkKSB9LFxuICAgICAgICAgICAgeyAkYWRkVG9TZXQ6IHsgcmVhZEJ5OiBhZ2VudElkIH0gfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk1hcmsgYXMgcmVhZCBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFkZENvbW1lbnRUb0Fubm91bmNlbWVudChhbm5vdW5jZW1lbnRJZDogc3RyaW5nLCBhdXRob3JJZDogc3RyaW5nLCBjb250ZW50OiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbiwgY29tbWVudD86IENvbW1lbnQgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFnZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBZ2VudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGF1dGhvciA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IF9pZDogbmV3IE9iamVjdElkKGF1dGhvcklkKSB9KTtcbiAgICAgICAgaWYgKCFhdXRob3IpIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XG5cbiAgICAgICAgY29uc3QgbmV3Q29tbWVudDogQ29tbWVudCA9IHtcbiAgICAgICAgICAgIGlkOiBuZXcgT2JqZWN0SWQoKS50b1N0cmluZygpLFxuICAgICAgICAgICAgYXV0aG9yOiB7XG4gICAgICAgICAgICAgICAgaWQ6IGF1dGhvci5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBuYW1lOiBhdXRob3IubmFtZSxcbiAgICAgICAgICAgICAgICBhdmF0YXI6IGF1dGhvci5hdmF0YXJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgYW5ub3VuY2VtZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBbm5vdW5jZW1lbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBhd2FpdCBhbm5vdW5jZW1lbnRzQ29sbGVjdGlvbi51cGRhdGVPbmUoXG4gICAgICAgICAgICB7IF9pZDogbmV3IE9iamVjdElkKGFubm91bmNlbWVudElkKSB9LFxuICAgICAgICAgICAgeyAkcHVzaDogeyBjb21tZW50czogbmV3Q29tbWVudCB9IH1cbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGNvbW1lbnQ6IG5ld0NvbW1lbnQgfTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJBZGQgY29tbWVudCBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xuICAgIH1cbn1cblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlQWdlbnRQcm9maWxlKGFnZW50SWQ6IHN0cmluZywgbmFtZTogc3RyaW5nLCBlbWFpbDogc3RyaW5nLCBwaG9uZTogc3RyaW5nLCBjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBtZXNzYWdlPzogc3RyaW5nOyBhZ2VudD86IEFnZW50OyB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHVwZGF0ZVJlc3VsdCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChhZ2VudElkKSB9LFxuICAgICAgICAgICAgeyAkc2V0OiB7IG5hbWUsIGVtYWlsLCBwaG9uZSB9IH1cbiAgICAgICAgKTtcblxuICAgICAgICBpZiAodXBkYXRlUmVzdWx0Lm1vZGlmaWVkQ291bnQgPT09IDAgJiYgdXBkYXRlUmVzdWx0Lm1hdGNoZWRDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQWdlbnQgbm90IGZvdW5kLlwiIH07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGFnZW50V2l0aFN0YXRzID0gYXdhaXQgZ2V0QWdlbnRzQnlDb21wYW55KGNvbXBhbnlJZCk7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRBZ2VudCA9IGFnZW50V2l0aFN0YXRzLmZpbmQoYSA9PiBhLmlkID09PSBhZ2VudElkKTtcblxuXG4gICAgICAgIGlmICh1cGRhdGVkQWdlbnQpIHtcbiAgICAgICAgICAgIGF3YWl0IGxvZ0FjdGl2aXR5KGNvbXBhbnlJZCwgdXBkYXRlZEFnZW50Lm5hbWUsICdVcGRhdGUgUHJvZmlsZScsIGBVcGRhdGVkIGFnZW50IHByb2ZpbGUgZm9yICR7bmFtZX1gKTtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGFnZW50OiB1cGRhdGVkQWdlbnQgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkZhaWxlZCB0byByZXRyaWV2ZSB1cGRhdGVkIGFnZW50LlwiIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlVwZGF0ZSBhZ2VudCBwcm9maWxlIGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQuXCIgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVBZ2VudFBhc3N3b3JkKGFnZW50SWQ6IHN0cmluZywgY3VycmVudFBhc3N3b3JkOiBzdHJpbmcsIG5ld1Bhc3N3b3JkOiBzdHJpbmcsIGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U6IHN0cmluZyB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgYWdlbnQgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBfaWQ6IG5ldyBPYmplY3RJZChhZ2VudElkKSB9KTtcblxuICAgICAgICBpZiAoIWFnZW50IHx8ICFhZ2VudC5wYXNzd29yZCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQWdlbnQgbm90IGZvdW5kLlwiIH07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGlzUGFzc3dvcmRWYWxpZCA9IGF3YWl0IHZlcmlmeVBhc3N3b3JkKGN1cnJlbnRQYXNzd29yZCwgYWdlbnQucGFzc3dvcmQpO1xuICAgICAgICBpZiAoIWlzUGFzc3dvcmRWYWxpZCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiSW5jb3JyZWN0IGN1cnJlbnQgcGFzc3dvcmQuXCIgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5ld0hhc2hlZFBhc3N3b3JkID0gYXdhaXQgaGFzaFBhc3N3b3JkKG5ld1Bhc3N3b3JkKTtcbiAgICAgICAgYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi51cGRhdGVPbmUoXG4gICAgICAgICAgICB7IF9pZDogbmV3IE9iamVjdElkKGFnZW50SWQpIH0sXG4gICAgICAgICAgICB7ICRzZXQ6IHsgcGFzc3dvcmQ6IG5ld0hhc2hlZFBhc3N3b3JkIH0gfVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgYXdhaXQgbG9nQWN0aXZpdHkoY29tcGFueUlkLCBhZ2VudC5uYW1lLCAnVXBkYXRlIFBhc3N3b3JkJywgYENoYW5nZWQgcGFzc3dvcmRgKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgbWVzc2FnZTogXCJQYXNzd29yZCB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5cIiB9O1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlVwZGF0ZSBwYXNzd29yZCBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkLlwiIH07XG4gICAgfVxufVxuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBoYW5kbGVMb2dpbihlbWFpbDogc3RyaW5nLCBwYXNzd29yZF91bnVzZWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBtZXNzYWdlPzogc3RyaW5nOyBhZ2VudD86IEFnZW50IH0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgIGNvbnN0IGFnZW50RG9jID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5maW5kT25lKHsgZW1haWw6IGVtYWlsLnRvTG93ZXJDYXNlKCkgfSk7XG5cbiAgICAgIGlmIChhZ2VudERvYyAmJiBhZ2VudERvYy5wYXNzd29yZCkge1xuICAgICAgICBjb25zdCBpc1Bhc3N3b3JkVmFsaWQgPSBhd2FpdCB2ZXJpZnlQYXNzd29yZChwYXNzd29yZF91bnVzZWQsIGFnZW50RG9jLnBhc3N3b3JkKTtcbiAgICAgICAgaWYgKGlzUGFzc3dvcmRWYWxpZCkge1xuICAgICAgICAgIGNvbnN0IHsgcGFzc3dvcmQsIC4uLmFnZW50RGF0YSB9ID0gYWdlbnREb2M7XG4gICAgICAgICAgY29uc3QgYWdlbnQ6IEFnZW50ID0ge1xuICAgICAgICAgICAgLi4uYWdlbnREYXRhLFxuICAgICAgICAgICAgX2lkOiBhZ2VudERvYy5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGlkOiBhZ2VudERvYy5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGNvbXBhbnlJZDogYWdlbnREb2MuY29tcGFueUlkPy50b1N0cmluZygpLFxuICAgICAgICAgIH07XG4gICAgICAgICAgYXdhaXQgbG9nQWN0aXZpdHkoYWdlbnQuY29tcGFueUlkLCBhZ2VudC5uYW1lLCAnTG9naW4nLCBgTG9nZ2VkIGluIHN1Y2Nlc3NmdWxseWApO1xuICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGFnZW50OiBhZ2VudCB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJJbnZhbGlkIGVtYWlsIG9yIHBhc3N3b3JkLlwiIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJMb2dpbiBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRGF0YWJhc2UgY29ubmVjdGlvbiBlcnJvci5cIiB9O1xuICAgIH1cbn07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVBZ2VudChuYW1lOiBzdHJpbmcsIGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkX3VudXNlZDogc3RyaW5nLCByb2xlOiBBZ2VudFJvbGUsIGNvbXBhbnlJZDogc3RyaW5nLCBjcmVhdGVkQnk6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBtZXNzYWdlPzogc3RyaW5nOyBhZ2VudD86IEFnZW50OyB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdBZ2VudCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IGVtYWlsOiBlbWFpbC50b0xvd2VyQ2FzZSgpIH0pO1xuXG4gICAgICAgIGlmIChleGlzdGluZ0FnZW50KSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiBhZ2VudCB3aXRoIHRoaXMgZW1haWwgYWxyZWFkeSBleGlzdHMuXCIgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGhhc2hlZFBhc3N3b3JkID0gYXdhaXQgaGFzaFBhc3N3b3JkKHBhc3N3b3JkX3VudXNlZCk7XG4gICAgICAgIGNvbnN0IGF2YXRhciA9ICcnO1xuXG4gICAgICAgIGNvbnN0IGFnZW50VG9JbnNlcnQ6IE9taXQ8QWdlbnQsICdpZCcgfCAnX2lkJz4gPSB7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgZW1haWw6IGVtYWlsLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICBwYXNzd29yZDogaGFzaGVkUGFzc3dvcmQsXG4gICAgICAgICAgICByb2xlLFxuICAgICAgICAgICAgYXZhdGFyLFxuICAgICAgICAgICAgcGhvbmU6ICcnLCBcbiAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZClcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmluc2VydE9uZShhZ2VudFRvSW5zZXJ0IGFzIGFueSk7XG5cbiAgICAgICAgaWYgKHJlc3VsdC5pbnNlcnRlZElkKSB7XG4gICAgICAgICAgICBjb25zdCBhZ2VudHNXaXRoU3RhdHMgPSBhd2FpdCBnZXRBZ2VudHNCeUNvbXBhbnkoY29tcGFueUlkKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld0FnZW50ID0gYWdlbnRzV2l0aFN0YXRzLmZpbmQoYSA9PiBhLmlkID09PSByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpKTtcblxuICAgICAgICAgICAgaWYgKG5ld0FnZW50KSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgbG9nQWN0aXZpdHkoY29tcGFueUlkLCBjcmVhdGVkQnksICdDcmVhdGUgQWdlbnQnLCBgQ3JlYXRlZCBhZ2VudDogJHtuYW1lfWApO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGFnZW50OiBuZXdBZ2VudCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkZhaWxlZCB0byBjcmVhdGUgYWdlbnQuXCIgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQ3JlYXRlIGFnZW50IGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQgd2hpbGUgY3JlYXRpbmcgdGhlIGFnZW50LlwiIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVsZXRlQWdlbnQoYWdlbnRJZDogc3RyaW5nLCBjb21wYW55SWQ/OiBzdHJpbmcsIGRlbGV0ZWRCeT86IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuLCBtZXNzYWdlPzogc3RyaW5nIH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBhZ2VudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWdlbnRzQ29sbGVjdGlvbigpO1xuXG4gICAgICAgIGlmICghYWdlbnRJZCB8fCAhT2JqZWN0SWQuaXNWYWxpZChhZ2VudElkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiSW52YWxpZCBhZ2VudCBJRC5cIiB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYWdlbnRUb0RlbGV0ZSA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IF9pZDogbmV3IE9iamVjdElkKGFnZW50SWQpIH0pO1xuICAgICAgICBpZiAoIWFnZW50VG9EZWxldGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFnZW50IG5vdCBmb3VuZC5cIiB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUHJldmVudCBkZWxldGluZyB0aGUgbGFzdCBhZG1pblxuICAgICAgICBpZiAoYWdlbnRUb0RlbGV0ZS5yb2xlID09PSAnYWRtaW4nKSB7XG4gICAgICAgICAgICBjb25zdCBhZG1pbkNvdW50ID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5jb3VudERvY3VtZW50cyh7IGNvbXBhbnlJZDogYWdlbnRUb0RlbGV0ZS5jb21wYW55SWQsIHJvbGU6ICdhZG1pbicgfSk7XG4gICAgICAgICAgICBpZiAoYWRtaW5Db3VudCA8PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQ2Fubm90IHJlbW92ZSB0aGUgbGFzdCBhZG1pbmlzdHJhdG9yLlwiIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZGVsZXRlT25lKHsgX2lkOiBuZXcgT2JqZWN0SWQoYWdlbnRJZCkgfSk7XG5cbiAgICAgICAgaWYgKHJlc3VsdC5kZWxldGVkQ291bnQgPT09IDEpIHtcbiAgICAgICAgICAgIGlmIChjb21wYW55SWQgJiYgZGVsZXRlZEJ5KSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgbG9nQWN0aXZpdHkoY29tcGFueUlkLCBkZWxldGVkQnksICdEZWxldGUgQWdlbnQnLCBgUmVtb3ZlZCBhZ2VudDogJHthZ2VudFRvRGVsZXRlLm5hbWV9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJGYWlsZWQgdG8gcmVtb3ZlIGFnZW50LlwiIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkRlbGV0ZSBhZ2VudCBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkLlwiIH07XG4gICAgfVxufVxuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBY3Rpdml0eUxvZ3MoY29tcGFueUlkOiBzdHJpbmcpOiBQcm9taXNlPEFjdGl2aXR5TG9nW10+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIWNvbXBhbnlJZCB8fCAhT2JqZWN0SWQuaXNWYWxpZChjb21wYW55SWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbG9nc0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBY3Rpdml0eUxvZ3NDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGxvZ3MgPSBhd2FpdCBsb2dzQ29sbGVjdGlvbi5maW5kKHsgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSB9KS5zb3J0KHsgdGltZXN0YW1wOiAtMSB9KS5saW1pdCg1MCkudG9BcnJheSgpO1xuXG4gICAgICAgIHJldHVybiBsb2dzLm1hcChsb2cgPT4gKHtcbiAgICAgICAgICAgIC4uLmxvZyxcbiAgICAgICAgICAgIF9pZDogbG9nLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgaWQ6IGxvZy5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGNvbXBhbnlJZDogbG9nLmNvbXBhbnlJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBsb2cudGltZXN0YW1wLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIH0pKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgYWN0aXZpdHkgbG9nczpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Q29udGFjdHNCeUNvbXBhbnkoY29tcGFueUlkOiBzdHJpbmcpOiBQcm9taXNlPFVzZXJbXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghY29tcGFueUlkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNvbXBhbnlJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb250YWN0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRVc2Vyc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgY29udGFjdHMgPSBhd2FpdCBjb250YWN0c0NvbGxlY3Rpb24uZmluZCh7IGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkgfSkudG9BcnJheSgpO1xuXG4gICAgICAgIHJldHVybiBjb250YWN0cy5tYXAoY29udGFjdCA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IF9pZCwgY29tcGFueUlkLCAuLi5yZXN0IH0gPSBjb250YWN0IGFzIGFueTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgICAgICAgICBfaWQ6IF9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiBfaWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IGNvbXBhbnlJZD8udG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBub3RlczogKGNvbnRhY3Qubm90ZXMgfHwgW10pLm1hcCgobm90ZTogTm90ZSkgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgLi4ubm90ZSxcbiAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZShub3RlLnRpbWVzdGFtcCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgY29udGFjdHM6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUNvbnRhY3QobmFtZTogc3RyaW5nLCBlbWFpbDogc3RyaW5nLCBwaG9uZTogc3RyaW5nLCBjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBtZXNzYWdlPzogc3RyaW5nOyBjb250YWN0PzogVXNlciB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY29udGFjdHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0VXNlcnNDb2xsZWN0aW9uKCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBleGlzdGluZ0NvbnRhY3QgPSBhd2FpdCBjb250YWN0c0NvbGxlY3Rpb24uZmluZE9uZSh7IGVtYWlsOiBlbWFpbC50b0xvd2VyQ2FzZSgpLCBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpIH0pO1xuICAgICAgICBpZiAoZXhpc3RpbmdDb250YWN0KSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBIGNvbnRhY3Qgd2l0aCB0aGlzIGVtYWlsIGFscmVhZHkgZXhpc3RzLlwiIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjb250YWN0VG9JbnNlcnQ6IE9taXQ8VXNlciwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBlbWFpbDogZW1haWwudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgIHBob25lLFxuICAgICAgICAgICAgYXZhdGFyOiAnJyxcbiAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCksXG4gICAgICAgICAgICBub3RlczogW10sXG4gICAgICAgICAgICBvbmxpbmU6IGZhbHNlLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi5pbnNlcnRPbmUoY29udGFjdFRvSW5zZXJ0IGFzIGFueSk7XG4gICAgICAgIFxuICAgICAgICBpZiAocmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0NvbnRhY3Q6IFVzZXIgPSB7XG4gICAgICAgICAgICAgICAgLi4uKGNvbnRhY3RUb0luc2VydCBhcyBPbWl0PFVzZXIsICdfaWQnfCdpZCc+KSxcbiAgICAgICAgICAgICAgICBfaWQ6IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgaWQ6IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKS50b1N0cmluZygpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGNvbnRhY3Q6IG5ld0NvbnRhY3QgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkZhaWxlZCB0byBjcmVhdGUgY29udGFjdC5cIiB9O1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkNyZWF0ZSBjb250YWN0IGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQuXCIgfTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFzc2lnbkFnZW50VG9Db250YWN0KGNvbnRhY3RJZDogc3RyaW5nLCBhZ2VudElkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbiB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY29udGFjdHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0VXNlcnNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi51cGRhdGVPbmUoXG4gICAgICAgICAgICB7IF9pZDogbmV3IE9iamVjdElkKGNvbnRhY3RJZCkgfSxcbiAgICAgICAgICAgIHsgJHNldDogeyBhc3NpZ25lZEFnZW50SWQ6IGFnZW50SWQgfSB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYXNzaWduaW5nIGFnZW50OlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWRkTm90ZVRvQ29udGFjdChjb250YWN0SWQ6IHN0cmluZywgYWdlbnRJZDogc3RyaW5nLCBhZ2VudE5hbWU6IHN0cmluZywgdGV4dDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG5vdGU/OiBOb3RlIH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjb250YWN0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRVc2Vyc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IG5ld05vdGU6IE5vdGUgPSB7XG4gICAgICAgICAgICBpZDogbmV3IE9iamVjdElkKCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGFnZW50SWQsXG4gICAgICAgICAgICBhZ2VudE5hbWUsXG4gICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb250YWN0c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChjb250YWN0SWQpIH0sXG4gICAgICAgICAgICB7ICRwdXNoOiB7IG5vdGVzOiB7ICRlYWNoOiBbbmV3Tm90ZV0sICRwb3NpdGlvbjogMCB9IH0gfVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgaWYgKHJlc3VsdC5tb2RpZmllZENvdW50ID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgbm90ZTogbmV3Tm90ZSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFkZGluZyBub3RlOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Tm90ZXNGb3JDb250YWN0KGNvbnRhY3RJZDogc3RyaW5nKTogUHJvbWlzZTxOb3RlW10+IHtcbiAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFjb250YWN0SWQgfHwgIU9iamVjdElkLmlzVmFsaWQoY29udGFjdElkKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzQ29sbGVjdGlvbiA9IGF3YWl0IGdldFVzZXJzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBjb250YWN0ID0gYXdhaXQgY29udGFjdHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBfaWQ6IG5ldyBPYmplY3RJZChjb250YWN0SWQpIH0pO1xuICAgICAgICByZXR1cm4gKGNvbnRhY3Q/Lm5vdGVzIHx8IFtdKS5tYXAoKG5vdGU6IE5vdGUpID0+ICh7XG4gICAgICAgICAgICAuLi5ub3RlLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZShub3RlLnRpbWVzdGFtcCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgfSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBub3RlczpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Q2hhdHNCeUNvbXBhbnkoY29tcGFueUlkOiBzdHJpbmcpOiBQcm9taXNlPENoYXRbXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghY29tcGFueUlkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNvbXBhbnlJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGF0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRDaGF0c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgY2hhdHMgPSBhd2FpdCBjaGF0c0NvbGxlY3Rpb24uYWdncmVnYXRlKFtcbiAgICAgICAgICAgIHsgJG1hdGNoOiB7IGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkgfSB9LFxuICAgICAgICAgICAgeyAkc29ydDogeyB0aW1lc3RhbXA6IC0xIH0gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAkbG9va3VwOiB7XG4gICAgICAgICAgICAgICAgICAgIGZyb206ICdjb250YWN0cycsXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsRmllbGQ6ICd1c2VySWQnLFxuICAgICAgICAgICAgICAgICAgICBmb3JlaWduRmllbGQ6ICdfaWQnLFxuICAgICAgICAgICAgICAgICAgICBhczogJ3VzZXInXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHsgJHVud2luZDogJyR1c2VyJyB9XG4gICAgICAgIF0pLnRvQXJyYXkoKTtcblxuICAgICAgICByZXR1cm4gY2hhdHMubWFwKGNoYXQgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBfaWQsIGNvbXBhbnlJZCwgdXNlcklkLCAuLi5yZXN0IH0gPSBjaGF0IGFzIGFueTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgICAgICAgICBfaWQ6IF9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiBfaWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IGNvbXBhbnlJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIHVzZXJJZDogdXNlcklkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgbWVzc2FnZXM6IFtdLCAvLyBNZXNzYWdlcyB3aWxsIGJlIGxhenktbG9hZGVkXG4gICAgICAgICAgICAgICAgdXNlcjoge1xuICAgICAgICAgICAgICAgICAgICAuLi5jaGF0LnVzZXIsXG4gICAgICAgICAgICAgICAgICAgIF9pZDogY2hhdC51c2VyLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBpZDogY2hhdC51c2VyLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBjb21wYW55SWQ6IGNoYXQudXNlci5jb21wYW55SWQgPyBjaGF0LnVzZXIuY29tcGFueUlkLnRvU3RyaW5nKCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIGNoYXRzIGJ5IGNvbXBhbnk6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldE1lc3NhZ2VzRm9yQ2hhdChjaGF0SWQ6IHN0cmluZyk6IFByb21pc2U8TWVzc2FnZVtdPiB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKCFjaGF0SWQgfHwgIU9iamVjdElkLmlzVmFsaWQoY2hhdElkKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzQ29sbGVjdGlvbiA9IGF3YWl0IGdldE1lc3NhZ2VzQ29sbGVjdGlvbigpO1xuICAgICAgICAvLyBBbHNvIGZldGNoIHNlbmRlciBkZXRhaWxzIGlmIGl0J3MgYSB1c2VyLCBub3QgYW4gYWdlbnQgKCdtZScpXG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gYXdhaXQgbWVzc2FnZXNDb2xsZWN0aW9uLmFnZ3JlZ2F0ZShbXG4gICAgICAgICAgICB7ICRtYXRjaDogeyBjaGF0SWQ6IG5ldyBPYmplY3RJZChjaGF0SWQpIH0gfSxcbiAgICAgICAgICAgIHsgJHNvcnQ6IHsgdGltZXN0YW1wOiAxIH0gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAkbG9va3VwOiB7XG4gICAgICAgICAgICAgICAgICAgIGZyb206ICdjb250YWN0cycsXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsRmllbGQ6ICdzZW5kZXJJZCcsXG4gICAgICAgICAgICAgICAgICAgIGZvcmVpZ25GaWVsZDogJ19pZCcsXG4gICAgICAgICAgICAgICAgICAgIGFzOiAnc2VuZGVySW5mbydcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIF0pLnRvQXJyYXkoKTtcblxuICAgICAgICByZXR1cm4gbWVzc2FnZXMubWFwKG1zZyA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IF9pZCwgY2hhdElkLCBzZW5kZXJJZCwgc2VuZGVySW5mbywgLi4ucmVzdCB9ID0gbXNnIGFzIGFueTtcbiAgICAgICAgICAgIGNvbnN0IHNlbmRlciA9IG1zZy5zZW5kZXIgPT09ICdtZScgPyAnbWUnIDogKHNlbmRlckluZm9bMF0gfHwgbnVsbCk7XG5cbiAgICAgICAgICAgIGlmIChzZW5kZXIgJiYgc2VuZGVyICE9PSAnbWUnKSB7XG4gICAgICAgICAgICAgICAgc2VuZGVyLmlkID0gc2VuZGVyLl9pZC50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgICAgICAgICAgaWQ6IF9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIHNlbmRlcixcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBtZXNzYWdlczpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VuZE1lc3NhZ2UoY2hhdElkOiBzdHJpbmcsIHRleHQ6IHN0cmluZywgYWdlbnRJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG5ld01lc3NhZ2U/OiBNZXNzYWdlIH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBtZXNzYWdlc0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRNZXNzYWdlc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgY2hhdHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q2hhdHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBjb25zdCBuZXdNZXNzYWdlVG9JbnNlcnQ6IE9taXQ8TWVzc2FnZSwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgIGNoYXRJZDogbmV3IE9iamVjdElkKGNoYXRJZCksXG4gICAgICAgICAgICBzZW5kZXI6ICdtZScsIC8vICdtZScgZGVub3RlcyB0aGUgYWdlbnRcbiAgICAgICAgICAgIHNlbmRlcklkOiBuZXcgT2JqZWN0SWQoYWdlbnRJZCksXG4gICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgdGltZXN0YW1wOiB0aW1lc3RhbXAudG9JU09TdHJpbmcoKSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBtZXNzYWdlc0NvbGxlY3Rpb24uaW5zZXJ0T25lKG5ld01lc3NhZ2VUb0luc2VydCBhcyBhbnkpO1xuXG4gICAgICAgIGlmIChyZXN1bHQuaW5zZXJ0ZWRJZCkge1xuICAgICAgICAgICAgYXdhaXQgY2hhdHNDb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICAgICAgICAgICAgICB7IF9pZDogbmV3IE9iamVjdElkKGNoYXRJZCkgfSxcbiAgICAgICAgICAgICAgICB7ICRzZXQ6IHsgbGFzdE1lc3NhZ2U6IHRleHQsIHRpbWVzdGFtcDogdGltZXN0YW1wLnRvTG9jYWxlVGltZVN0cmluZyhbXSwgeyBob3VyOiAnMi1kaWdpdCcsIG1pbnV0ZTogJzItZGlnaXQnIH0pIH0gfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZmluYWxOZXdNZXNzYWdlOiBNZXNzYWdlID0ge1xuICAgICAgICAgICAgICAgIC4uLihuZXdNZXNzYWdlVG9JbnNlcnQgYXMgT21pdDxNZXNzYWdlLCAnX2lkJ3wnaWQnPiksXG4gICAgICAgICAgICAgICAgX2lkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGNoYXRJZDogbmV3TWVzc2FnZVRvSW5zZXJ0LmNoYXRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIHNlbmRlcklkOiBuZXdNZXNzYWdlVG9JbnNlcnQuc2VuZGVySWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiB7IFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsIFxuICAgICAgICAgICAgICAgIG5ld01lc3NhZ2U6IGZpbmFsTmV3TWVzc2FnZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBzZW5kaW5nIG1lc3NhZ2U6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZXRDaGF0Ym90U3RhdHVzKGNoYXRJZDogc3RyaW5nLCBpc0FjdGl2ZTogYm9vbGVhbik6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuIH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjaGF0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRDaGF0c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgYXdhaXQgY2hhdHNDb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICAgICAgICAgIHsgX2lkOiBuZXcgT2JqZWN0SWQoY2hhdElkKSB9LFxuICAgICAgICAgICAgeyAkc2V0OiB7IGlzQ2hhdGJvdEFjdGl2ZTogaXNBY3RpdmUgfSB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igc2V0dGluZyBjaGF0Ym90IHN0YXR1czpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN0YXJ0TmV3Q2hhdHModXNlcnM6IFVzZXJbXSwgbWVzc2FnZTogc3RyaW5nLCBjb21wYW55SWQ6IHN0cmluZywgYWdlbnRJZDogc3RyaW5nKTogUHJvbWlzZTxDaGF0W10+IHtcbiAgICBjb25zdCBjaGF0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRDaGF0c0NvbGxlY3Rpb24oKTtcbiAgICBjb25zdCBuZXdPclVwZGF0ZWRDaGF0czogQ2hhdFtdID0gW107XG5cbiAgICBmb3IgKGNvbnN0IHVzZXIgb2YgdXNlcnMpIHtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdDaGF0RG9jID0gYXdhaXQgY2hhdHNDb2xsZWN0aW9uLmZpbmRPbmUoe1xuICAgICAgICAgICAgdXNlcklkOiBuZXcgT2JqZWN0SWQodXNlci5pZCksXG4gICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChleGlzdGluZ0NoYXREb2MpIHtcbiAgICAgICAgICAgIGF3YWl0IHNlbmRNZXNzYWdlKGV4aXN0aW5nQ2hhdERvYy5faWQudG9TdHJpbmcoKSwgbWVzc2FnZSwgYWdlbnRJZCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRDaGF0OiBDaGF0ID0ge1xuICAgICAgICAgICAgICAgIC4uLihleGlzdGluZ0NoYXREb2MgYXMgYW55KSxcbiAgICAgICAgICAgICAgICBfaWQ6IGV4aXN0aW5nQ2hhdERvYy5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBpZDogZXhpc3RpbmdDaGF0RG9jLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIHVzZXJJZDogZXhpc3RpbmdDaGF0RG9jLnVzZXJJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogZXhpc3RpbmdDaGF0RG9jLmNvbXBhbnlJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGxhc3RNZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0xvY2FsZVRpbWVTdHJpbmcoW10sIHsgaG91cjogJzItZGlnaXQnLCBtaW51dGU6ICcyLWRpZ2l0JyB9KSxcbiAgICAgICAgICAgICAgICB1c2VyOiB1c2VyLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2VzOiBbXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBuZXdPclVwZGF0ZWRDaGF0cy5wdXNoKHVwZGF0ZWRDaGF0KTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld0NoYXREYXRhOiBPbWl0PENoYXQsICdpZCcgfCAnX2lkJz4gPSB7XG4gICAgICAgICAgICAgICAgdXNlcklkOiBuZXcgT2JqZWN0SWQodXNlci5pZCksXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSxcbiAgICAgICAgICAgICAgICBsYXN0TWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IHRpbWVzdGFtcC50b0xvY2FsZVRpbWVTdHJpbmcoW10sIHsgaG91cjogJzItZGlnaXQnLCBtaW51dGU6ICcyLWRpZ2l0JyB9KSxcbiAgICAgICAgICAgICAgICB1bnJlYWRDb3VudDogMCxcbiAgICAgICAgICAgICAgICBwcmlvcml0eTogJ25vcm1hbCcsXG4gICAgICAgICAgICAgICAgY2hhbm5lbDogJ1dlYmNoYXQnLFxuICAgICAgICAgICAgICAgIGlzQ2hhdGJvdEFjdGl2ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgbWVzc2FnZXM6IFtdXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgY2hhdFJlc3VsdCA9IGF3YWl0IGNoYXRzQ29sbGVjdGlvbi5pbnNlcnRPbmUobmV3Q2hhdERhdGEgYXMgYW55KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGNoYXRSZXN1bHQuaW5zZXJ0ZWRJZCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHNlbmRNZXNzYWdlKGNoYXRSZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLCBtZXNzYWdlLCBhZ2VudElkKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjcmVhdGVkQ2hhdDogQ2hhdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uKG5ld0NoYXREYXRhIGFzIGFueSksXG4gICAgICAgICAgICAgICAgICAgIF9pZDogY2hhdFJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIGlkOiBjaGF0UmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgdXNlcklkOiBuZXdDaGF0RGF0YS51c2VySWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGFueUlkOiBuZXdDaGF0RGF0YS5jb21wYW55SWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgdXNlcjogdXNlcixcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZXM6IFtdLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgbmV3T3JVcGRhdGVkQ2hhdHMucHVzaChjcmVhdGVkQ2hhdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ld09yVXBkYXRlZENoYXRzO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlQ2FtcGFpZ24oZGF0YTogUGFydGlhbDxDYW1wYWlnbj4gJiB7IHNjaGVkdWxlVHlwZT86ICdub3cnIHwgJ2xhdGVyJyB9LCBjb21wYW55SWQ6IHN0cmluZywgYWdlbnRJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U/OiBzdHJpbmc7IGNhbXBhaWduPzogQ2FtcGFpZ247IH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjYW1wYWlnbnNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q2FtcGFpZ25zQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBjb250YWN0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRVc2Vyc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgXG4gICAgICAgIGxldCBzdGF0dXM6IENhbXBhaWduWydzdGF0dXMnXSA9ICdEcmFmdCc7XG4gICAgICAgIGxldCBzZW50QXQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IGRlbGl2ZXJ5ID0gMDtcbiAgICAgICAgbGV0IGVuZ2FnZW1lbnQgPSAwO1xuICAgICAgICBsZXQgY29udmVyc2lvbiA9IDA7XG5cbiAgICAgICAgaWYgKGRhdGEuc2NoZWR1bGVUeXBlID09PSAnbm93Jykge1xuICAgICAgICAgICAgc3RhdHVzID0gJ0NvbXBsZXRlZCc7XG4gICAgICAgICAgICBzZW50QXQgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICAvLyBHZW5lcmF0ZSBtb2NrIHBlcmZvcm1hbmNlIGRhdGEgZm9yIGltbWVkaWF0ZSBjYW1wYWlnbnNcbiAgICAgICAgICAgIGRlbGl2ZXJ5ID0gOTUgKyBNYXRoLnJhbmRvbSgpICogNTsgXG4gICAgICAgICAgICBlbmdhZ2VtZW50ID0gMTAgKyBNYXRoLnJhbmRvbSgpICogMTU7XG4gICAgICAgICAgICBjb252ZXJzaW9uID0gMiArIE1hdGgucmFuZG9tKCkgKiA4OyBcblxuICAgICAgICAgICAgLy8gQWN0dWFsbHkgc2VuZCB0aGUgbWVzc2FnZXNcbiAgICAgICAgICAgIGlmIChkYXRhLmF1ZGllbmNlICYmIGRhdGEubWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF1ZGllbmNlQ29udGFjdHMgPSBhd2FpdCBjb250YWN0c0NvbGxlY3Rpb24uZmluZCh7IF9pZDogeyAkaW46IGRhdGEuYXVkaWVuY2UubWFwKGlkID0+IG5ldyBPYmplY3RJZChpZCkpIH0gfSkudG9BcnJheSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJzID0gYXVkaWVuY2VDb250YWN0cy5tYXAoYyA9PiAoe1xuICAgICAgICAgICAgICAgICAgICAuLi5jLFxuICAgICAgICAgICAgICAgICAgICBpZDogYy5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgX2lkOiBjLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIH0pKSBhcyBVc2VyW107XG5cbiAgICAgICAgICAgICAgICBhd2FpdCBzdGFydE5ld0NoYXRzKHVzZXJzLCBkYXRhLm1lc3NhZ2UsIGNvbXBhbnlJZCwgYWdlbnRJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YS5zY2hlZHVsZVR5cGUgPT09ICdsYXRlcicpIHtcbiAgICAgICAgICAgIHN0YXR1cyA9ICdTY2hlZHVsZWQnO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbmV3Q2FtcGFpZ246IE9taXQ8Q2FtcGFpZ24sICdpZCcgfCAnX2lkJz4gPSB7XG4gICAgICAgICAgICB0aXRsZTogZGF0YS50aXRsZSEsXG4gICAgICAgICAgICB0eXBlOiBkYXRhLnR5cGUgfHwgJ0Jyb2FkY2FzdCcsXG4gICAgICAgICAgICBzdGF0dXM6IHN0YXR1cyxcbiAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCksXG4gICAgICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgIGF1ZGllbmNlOiBkYXRhLmF1ZGllbmNlIHx8IFtdLFxuICAgICAgICAgICAgbWVzc2FnZTogZGF0YS5tZXNzYWdlIHx8IFwiXCIsXG4gICAgICAgICAgICBzZW50QXQ6IHNlbnRBdCxcbiAgICAgICAgICAgIGRlbGl2ZXJ5LFxuICAgICAgICAgICAgZW5nYWdlbWVudCxcbiAgICAgICAgICAgIGNvbnZlcnNpb24sXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2FtcGFpZ25zQ29sbGVjdGlvbi5pbnNlcnRPbmUobmV3Q2FtcGFpZ24gYXMgYW55KTtcbiAgICAgICAgaWYgKHJlc3VsdC5pbnNlcnRlZElkKSB7XG4gICAgICAgICAgICBjb25zdCBjcmVhdGVkQ2FtcGFpZ246IENhbXBhaWduID0ge1xuICAgICAgICAgICAgICAgIC4uLm5ld0NhbXBhaWduLFxuICAgICAgICAgICAgICAgIF9pZDogcmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBpZDogcmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgY2FtcGFpZ246IGNyZWF0ZWRDYW1wYWlnbiB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkZhaWxlZCB0byBjcmVhdGUgY2FtcGFpZ24uXCIgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQ3JlYXRlIGNhbXBhaWduIGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQuXCIgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDYW1wYWlnbnNCeUNvbXBhbnkoY29tcGFueUlkOiBzdHJpbmcpOiBQcm9taXNlPENhbXBhaWduW10+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIWNvbXBhbnlJZCB8fCAhT2JqZWN0SWQuaXNWYWxpZChjb21wYW55SWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2FtcGFpZ25zQ29sbGVjdGlvbiA9IGF3YWl0IGdldENhbXBhaWduc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgY2FtcGFpZ25zID0gYXdhaXQgY2FtcGFpZ25zQ29sbGVjdGlvbi5maW5kKHsgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSB9KS5zb3J0KHsgY3JlYXRlZEF0OiAtMSB9KS50b0FycmF5KCk7XG5cbiAgICAgICAgcmV0dXJuIGNhbXBhaWducy5tYXAoY2FtcGFpZ24gPT4gKHtcbiAgICAgICAgICAgIC4uLmNhbXBhaWduLFxuICAgICAgICAgICAgX2lkOiBjYW1wYWlnbi5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGlkOiBjYW1wYWlnbi5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGNvbXBhbnlJZDogY2FtcGFpZ24uY29tcGFueUlkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKGNhbXBhaWduLmNyZWF0ZWRBdCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgIHNlbnRBdDogY2FtcGFpZ24uc2VudEF0ID8gbmV3IERhdGUoY2FtcGFpZ24uc2VudEF0KS50b0lTT1N0cmluZygpIDogdW5kZWZpbmVkLFxuICAgICAgICB9KSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIGNhbXBhaWduczpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW1wb3J0Q29udGFjdHNGcm9tQ1NWKGNvbnRhY3RzRGF0YTogeyBuYW1lOiBzdHJpbmc7IGVtYWlsOiBzdHJpbmc7IHBob25lOiBzdHJpbmcgfVtdLCBjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBtZXNzYWdlOiBzdHJpbmc7IG5ld0NvbnRhY3RzOiBVc2VyW107IGltcG9ydGVkQ291bnQ6IG51bWJlcjsgc2tpcHBlZENvdW50OiBudW1iZXI7IH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjb250YWN0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRVc2Vyc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgbmV3Q29udGFjdHM6IFVzZXJbXSA9IFtdO1xuICAgICAgICBsZXQgaW1wb3J0ZWRDb3VudCA9IDA7XG4gICAgICAgIGxldCBza2lwcGVkQ291bnQgPSAwO1xuXG4gICAgICAgIGNvbnN0IGNvbXBhbnlPYmpJZCA9IG5ldyBPYmplY3RJZChjb21wYW55SWQpO1xuXG4gICAgICAgIGZvciAoY29uc3QgY29udGFjdCBvZiBjb250YWN0c0RhdGEpIHtcbiAgICAgICAgICAgIGxldCBleGlzdGluZ0NvbnRhY3QgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGNvbnRhY3QuZW1haWwpIHtcbiAgICAgICAgICAgICAgICBleGlzdGluZ0NvbnRhY3QgPSBhd2FpdCBjb250YWN0c0NvbGxlY3Rpb24uZmluZE9uZSh7XG4gICAgICAgICAgICAgICAgICAgIGVtYWlsOiBjb250YWN0LmVtYWlsLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogY29tcGFueU9iaklkXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChleGlzdGluZ0NvbnRhY3QpIHtcbiAgICAgICAgICAgICAgICBza2lwcGVkQ291bnQrKztcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgY29udGFjdFRvSW5zZXJ0OiBPbWl0PFVzZXIsICdpZCcgfCAnX2lkJz4gPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogY29udGFjdC5uYW1lLFxuICAgICAgICAgICAgICAgIGVtYWlsOiBjb250YWN0LmVtYWlsLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICAgICAgcGhvbmU6IGNvbnRhY3QucGhvbmUsXG4gICAgICAgICAgICAgICAgYXZhdGFyOiAnJyxcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IGNvbXBhbnlPYmpJZCxcbiAgICAgICAgICAgICAgICBub3RlczogW10sXG4gICAgICAgICAgICAgICAgb25saW5lOiBmYWxzZSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi5pbnNlcnRPbmUoY29udGFjdFRvSW5zZXJ0IGFzIGFueSk7XG4gICAgICAgICAgICBpZiAocmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgICAgICBpbXBvcnRlZENvdW50Kys7XG4gICAgICAgICAgICAgICAgbmV3Q29udGFjdHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIC4uLihjb250YWN0VG9JbnNlcnQgYXMgT21pdDxVc2VyLCAnaWQnIHwgJ19pZCc+KSxcbiAgICAgICAgICAgICAgICAgICAgX2lkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBpZDogcmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGFueUlkOiBjb21wYW55SWQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGBJbXBvcnQgY29tcGxldGUuIEFkZGVkICR7aW1wb3J0ZWRDb3VudH0gbmV3IGNvbnRhY3RzLCBza2lwcGVkICR7c2tpcHBlZENvdW50fSBkdXBsaWNhdGVzLmAsXG4gICAgICAgICAgICBuZXdDb250YWN0cyxcbiAgICAgICAgICAgIGltcG9ydGVkQ291bnQsXG4gICAgICAgICAgICBza2lwcGVkQ291bnRcbiAgICAgICAgfTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDU1YgaW1wb3J0IGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQgZHVyaW5nIGltcG9ydC5cIiwgbmV3Q29udGFjdHM6IFtdLCBpbXBvcnRlZENvdW50OiAwLCBza2lwcGVkQ291bnQ6IDAgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVBZ2VudEF2YXRhcihhZ2VudElkOiBzdHJpbmcsIGF2YXRhcjogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U/OiBzdHJpbmc7IGF2YXRhcj86IHN0cmluZzsgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFnZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBZ2VudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCB1cGRhdGVSZXN1bHQgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICAgICAgICAgIHsgX2lkOiBuZXcgT2JqZWN0SWQoYWdlbnRJZCkgfSxcbiAgICAgICAgICAgIHsgJHNldDogeyBhdmF0YXIgfSB9XG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKHVwZGF0ZVJlc3VsdC5tb2RpZmllZENvdW50ID09PSAwICYmIHVwZGF0ZVJlc3VsdC5tYXRjaGVkQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFnZW50IG5vdCBmb3VuZC5cIiB9O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBMb2cgYWN0aXZpdHlcbiAgICAgICAgY29uc3QgYWdlbnQgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBfaWQ6IG5ldyBPYmplY3RJZChhZ2VudElkKSB9KTtcbiAgICAgICAgaWYgKGFnZW50KSB7XG4gICAgICAgICAgICAgYXdhaXQgbG9nQWN0aXZpdHkoYWdlbnQuY29tcGFueUlkLCBhZ2VudC5uYW1lLCAnVXBkYXRlIFByb2ZpbGUnLCBgVXBkYXRlZCBwcm9maWxlIHBpY3R1cmVgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGF2YXRhcjogYXZhdGFyIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlVwZGF0ZSBhZ2VudCBhdmF0YXIgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZC5cIiB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNjaGVkdWxlQW5hbHl0aWNzUmVwb3J0KGVtYWlsOiBzdHJpbmcsIGZyZXF1ZW5jeTogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U6IHN0cmluZzsgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIEluIGEgcmVhbCBhcHBsaWNhdGlvbiwgeW91IHdvdWxkIGNvbm5lY3QgdG8gYSBqb2Igc2NoZWR1bGVyIChlLmcuLCBCdWxsTVEsIGNyb24pXG4gICAgICAgIC8vIGFuZCBxdWV1ZSBhIGpvYiB0byBzZW5kIGFuIGVtYWlsIHJlcG9ydCBiYXNlZCBvbiB0aGUgZnJlcXVlbmN5LlxuICAgICAgICAvLyBGb3IgdGhpcyBkZW1vLCB3ZSdsbCBqdXN0IGxvZyBpdCB0byB0aGUgY29uc29sZS5cbiAgICAgICAgY29uc29sZS5sb2coYEFuYWx5dGljcyByZXBvcnQgc2NoZWR1bGVkIGZvciAke2VtYWlsfSB3aXRoIGZyZXF1ZW5jeTogJHtmcmVxdWVuY3l9YCk7XG4gICAgICAgIFxuICAgICAgICAvLyBZb3UgY291bGQgYWxzbyBsb2cgdGhpcyBhcyBhIHN5c3RlbSBhY3Rpdml0eVxuICAgICAgICAvLyBhd2FpdCBsb2dBY3Rpdml0eShjb21wYW55SWQsICdTeXN0ZW0nLCAnU2NoZWR1bGUgUmVwb3J0JywgYEFuYWx5dGljcyByZXBvcnQgc2NoZWR1bGVkIGZvciAke2VtYWlsfSAoJHtmcmVxdWVuY3l9KWApO1xuXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIG1lc3NhZ2U6IGBSZXBvcnQgc3VjY2Vzc2Z1bGx5IHNjaGVkdWxlZCBmb3IgJHtlbWFpbH0uYCB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJTY2hlZHVsZSByZXBvcnQgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZCB3aGlsZSBzY2hlZHVsaW5nIHRoZSByZXBvcnQuXCIgfTtcbiAgICB9XG59XG4gICAgXG5cbiAgICBcblxuICAgIFxuXG5cblxuXG4gICAgIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJ5UkE0ckJzQiJ9
}}),
"[project]/src/app/data:50ce8e [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40ddb22e27e4cef48e6f8b4f4548db5d5d7b59d98c":"getContactsByCompany"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getContactsByCompany": (()=>getContactsByCompany)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var getContactsByCompany = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("40ddb22e27e4cef48e6f8b4f4548db5d5d7b59d98c", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getContactsByCompany"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:cecae5 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"780997e968e3cabe30367154f3b8d33efe060f51bd":"addNoteToContact"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "addNoteToContact": (()=>addNoteToContact)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var addNoteToContact = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("780997e968e3cabe30367154f3b8d33efe060f51bd", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "addNoteToContact"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:cabb2a [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"60baf496c3062efe4fd326c7af2943c2196e029cce":"assignAgentToContact"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "assignAgentToContact": (()=>assignAgentToContact)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var assignAgentToContact = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("60baf496c3062efe4fd326c7af2943c2196e029cce", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "assignAgentToContact"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:aad038 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"4087786a1113f54129434f2a7816d4f589ebf1b846":"getAgentsByCompany"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getAgentsByCompany": (()=>getAgentsByCompany)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var getAgentsByCompany = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("4087786a1113f54129434f2a7816d4f589ebf1b846", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getAgentsByCompany"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:430451 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"60d072bc1975e4e5f878dc1c3a7bbba30e68a6f871":"importContactsFromCSV"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "importContactsFromCSV": (()=>importContactsFromCSV)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var importContactsFromCSV = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("60d072bc1975e4e5f878dc1c3a7bbba30e68a6f871", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "importContactsFromCSV"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:10a3b7 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"783b92989339fb5b73f8cf537b1cd9811ad31c6bdf":"createContact"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "createContact": (()=>createContact)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var createContact = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("783b92989339fb5b73f8cf537b1cd9811ad31c6bdf", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "createContact"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:923b65 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"703df0e88d6b7f31da31805fe7c8d53353df7e0ee2":"deleteAgent"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "deleteAgent": (()=>deleteAgent)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var deleteAgent = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("703df0e88d6b7f31da31805fe7c8d53353df7e0ee2", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "deleteAgent"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:fba607 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"404d8f1b9c2cd44e439a3f4dba37f710171ff8f88b":"getActivityLogs"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getActivityLogs": (()=>getActivityLogs)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var getActivityLogs = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("404d8f1b9c2cd44e439a3f4dba37f710171ff8f88b", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getActivityLogs"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:0ec936 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"7c4c24e8dc61bef49f2c2f8a8acc71b5dd4ffb33e3":"updateAgentProfile"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "updateAgentProfile": (()=>updateAgentProfile)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var updateAgentProfile = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("7c4c24e8dc61bef49f2c2f8a8acc71b5dd4ffb33e3", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "updateAgentProfile"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:3324c4 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"60f2354c630933e8cfbda63a32de99ef4c111b10e4":"scheduleAnalyticsReport"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "scheduleAnalyticsReport": (()=>scheduleAnalyticsReport)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var scheduleAnalyticsReport = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("60f2354c630933e8cfbda63a32de99ef4c111b10e4", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "scheduleAnalyticsReport"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:80d997 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40ff6278859af3f524ec2ac84e79db5390255a1668":"createAnnouncement"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "createAnnouncement": (()=>createAnnouncement)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var createAnnouncement = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("40ff6278859af3f524ec2ac84e79db5390255a1668", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "createAnnouncement"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:e937e5 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"409b841e613ce80e5c40df0364f6df47d80421d363":"getAnnouncementsByCompany"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getAnnouncementsByCompany": (()=>getAnnouncementsByCompany)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var getAnnouncementsByCompany = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("409b841e613ce80e5c40df0364f6df47d80421d363", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getAnnouncementsByCompany"); //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4vYWN0aW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbid1c2Ugc2VydmVyJztcblxuaW1wb3J0IHsgZ2V0RGIgfSBmcm9tIFwiQC9saWIvZGJcIjtcbmltcG9ydCB7IGhhc2hQYXNzd29yZCwgdmVyaWZ5UGFzc3dvcmQgfSBmcm9tIFwiQC9saWIvYXV0aFwiO1xuaW1wb3J0IHR5cGUgeyBBZ2VudCwgQWdlbnRSb2xlLCBBbm5vdW5jZW1lbnQsIENvbXBhbnksIENvbW1lbnQsIEFjdGl2aXR5TG9nLCBVc2VyLCBOb3RlLCBDaGF0LCBNZXNzYWdlLCBDaGFubmVsLCBDYW1wYWlnbiB9IGZyb20gXCJAL3R5cGVzXCI7XG5pbXBvcnQgeyBDb2xsZWN0aW9uLCBEYiwgT2JqZWN0SWQgfSBmcm9tIFwibW9uZ29kYlwiO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRBZ2VudHNDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxBZ2VudD4+IHtcbiAgICBjb25zdCBkYjogRGIgPSBhd2FpdCBnZXREYigpO1xuICAgIHJldHVybiBkYi5jb2xsZWN0aW9uPEFnZW50PignYWdlbnRzJyk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDb21wYW5pZXNDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxDb21wYW55Pj4ge1xuICAgIGNvbnN0IGRiOiBEYiA9IGF3YWl0IGdldERiKCk7XG4gICAgcmV0dXJuIGRiLmNvbGxlY3Rpb248Q29tcGFueT4oJ2NvbXBhbmllcycpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRBbm5vdW5jZW1lbnRzQ29sbGVjdGlvbigpOiBQcm9taXNlPENvbGxlY3Rpb248QW5ub3VuY2VtZW50Pj4ge1xuICAgIGNvbnN0IGRiOiBEYiA9IGF3YWl0IGdldERiKCk7XG4gICAgcmV0dXJuIGRiLmNvbGxlY3Rpb248QW5ub3VuY2VtZW50PignYW5ub3VuY2VtZW50cycpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRBY3Rpdml0eUxvZ3NDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxBY3Rpdml0eUxvZz4+IHtcbiAgICBjb25zdCBkYjogRGIgPSBhd2FpdCBnZXREYigpO1xuICAgIHJldHVybiBkYi5jb2xsZWN0aW9uPEFjdGl2aXR5TG9nPignYWN0aXZpdHlfbG9ncycpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VXNlcnNDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxVc2VyPj4ge1xuICAgIGNvbnN0IGRiOiBEYiA9IGF3YWl0IGdldERiKCk7XG4gICAgcmV0dXJuIGRiLmNvbGxlY3Rpb248VXNlcj4oJ2NvbnRhY3RzJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENoYXRzQ29sbGVjdGlvbigpOiBQcm9taXNlPENvbGxlY3Rpb248Q2hhdD4+IHtcbiAgICBjb25zdCBkYjogRGIgPSBhd2FpdCBnZXREYigpO1xuICAgIHJldHVybiBkYi5jb2xsZWN0aW9uPENoYXQ+KCdjaGF0cycpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRNZXNzYWdlc0NvbGxlY3Rpb24oKTogUHJvbWlzZTxDb2xsZWN0aW9uPE1lc3NhZ2U+PiB7XG4gICAgY29uc3QgZGI6IERiID0gYXdhaXQgZ2V0RGIoKTtcbiAgICByZXR1cm4gZGIuY29sbGVjdGlvbjxNZXNzYWdlPignbWVzc2FnZXMnKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0Q2FtcGFpZ25zQ29sbGVjdGlvbigpOiBQcm9taXNlPENvbGxlY3Rpb248Q2FtcGFpZ24+PiB7XG4gICAgY29uc3QgZGI6IERiID0gYXdhaXQgZ2V0RGIoKTtcbiAgICByZXR1cm4gZGIuY29sbGVjdGlvbjxDYW1wYWlnbj4oJ2NhbXBhaWducycpO1xufVxuXG5cbmFzeW5jIGZ1bmN0aW9uIGxvZ0FjdGl2aXR5KGNvbXBhbnlJZDogc3RyaW5nIHwgT2JqZWN0SWQsIGFnZW50TmFtZTogc3RyaW5nLCBhY3Rpb246IHN0cmluZywgZGV0YWlsczogc3RyaW5nKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgbG9nc0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBY3Rpdml0eUxvZ3NDb2xsZWN0aW9uKCk7XG4gICAgICAgIGF3YWl0IGxvZ3NDb2xsZWN0aW9uLmluc2VydE9uZSh7XG4gICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpLFxuICAgICAgICAgICAgYWdlbnROYW1lLFxuICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgZGV0YWlscyxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBsb2cgYWN0aXZpdHk6XCIsIGVycm9yKTtcbiAgICB9XG59XG5cbi8vIEEgc2ltcGxlIGhhc2hpbmcgZnVuY3Rpb24gdG8gY3JlYXRlIGEgcHNldWRvLXJhbmRvbSBidXQgY29uc2lzdGVudCBudW1iZXIgZnJvbSBhIHN0cmluZy5cbmNvbnN0IHNpbXBsZUhhc2ggPSAoc3RyOiBzdHJpbmcpID0+IHtcbiAgbGV0IGhhc2ggPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNoYXIgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoID0gKGhhc2ggPDwgNSkgLSBoYXNoICsgY2hhcjtcbiAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICB9XG4gIHJldHVybiBNYXRoLmFicyhoYXNoKTtcbn07XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFnZW50c0J5Q29tcGFueShjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8QWdlbnRbXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghY29tcGFueUlkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNvbXBhbnlJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhZ2VudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWdlbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBtZXNzYWdlc0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRNZXNzYWdlc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGFnZW50cyA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZCh7IGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkgfSwgeyBwcm9qZWN0aW9uOiB7IHBhc3N3b3JkOiAwIH0gfSkudG9BcnJheSgpO1xuXG4gICAgICAgIC8vIEVmZmljaWVudGx5IGdldCBjb252ZXJzYXRpb24gY291bnRzIGZvciBhbGwgYWdlbnRzIGluIG9uZSBxdWVyeVxuICAgICAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIHRvZGF5LnNldEhvdXJzKDAsIDAsIDAsIDApO1xuXG4gICAgICAgIGNvbnN0IGNvbnZlcnNhdGlvbkNvdW50cyA9IGF3YWl0IG1lc3NhZ2VzQ29sbGVjdGlvbi5hZ2dyZWdhdGUoW1xuICAgICAgICAgICAgeyAkbWF0Y2g6IHsgc2VuZGVyOiAnbWUnLCBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpLCB0aW1lc3RhbXA6IHsgJGd0ZTogdG9kYXkudG9JU09TdHJpbmcoKSB9IH0gfSxcbiAgICAgICAgICAgIHsgJGdyb3VwOiB7IF9pZDogXCIkc2VuZGVySWRcIiwgY291bnQ6IHsgJHN1bTogMSB9IH0gfVxuICAgICAgICBdKS50b0FycmF5KCk7XG5cbiAgICAgICAgY29uc3QgY291bnRzTWFwID0gbmV3IE1hcChjb252ZXJzYXRpb25Db3VudHMubWFwKGl0ZW0gPT4gW2l0ZW0uX2lkLnRvU3RyaW5nKCksIGl0ZW0uY291bnRdKSk7XG5cbiAgICAgICAgY29uc3QgYWdlbnREYXRhV2l0aFN0YXRzID0gYWdlbnRzLm1hcChhZ2VudCA9PiB7XG4gICAgICAgICAgICBjb25zdCBhZ2VudElkU3RyID0gYWdlbnQuX2lkLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBjb25zdCBjb252ZXJzYXRpb25zVG9kYXkgPSBjb3VudHNNYXAuZ2V0KGFnZW50SWRTdHIpIHx8IDA7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHN0YXR1c2VzOiBBcnJheTwnT25saW5lJyB8ICdPZmZsaW5lJyB8ICdCdXN5Jz4gPSBbJ09ubGluZScsICdPZmZsaW5lJywgJ0J1c3knXTtcbiAgICAgICAgICAgIGNvbnN0IGhhc2ggPSBzaW1wbGVIYXNoKGFnZW50Lm5hbWUpO1xuICAgICAgICAgICAgY29uc3QgcmFuZG9tU3RhdHVzID0gc3RhdHVzZXNbaGFzaCAlIHN0YXR1c2VzLmxlbmd0aF07XG5cbiAgICAgICAgICAgIGxldCBhdmdSZXNwb25zZVRpbWUgPSBcIk4vQVwiO1xuICAgICAgICAgICAgbGV0IGNzYXQ6IG51bWJlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgaWYgKGNvbnZlcnNhdGlvbnNUb2RheSA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhdmdSZXNwb25zZU1pbnV0ZXMgPSAoaGFzaCAlIDQpICsgMTsgLy8gMSB0byA0IG1pbnV0ZXNcbiAgICAgICAgICAgICAgICBjb25zdCBhdmdSZXNwb25zZVNlY29uZHMgPSBoYXNoICUgNjA7IC8vIDAgdG8gNTkgc2Vjb25kc1xuICAgICAgICAgICAgICAgIGF2Z1Jlc3BvbnNlVGltZSA9IGAke2F2Z1Jlc3BvbnNlTWludXRlc31tICR7YXZnUmVzcG9uc2VTZWNvbmRzfXNgO1xuICAgICAgICAgICAgICAgIGNzYXQgPSA4NSArIChoYXNoICUgMTUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLmFnZW50LFxuICAgICAgICAgICAgICAgIF9pZDogYWdlbnRJZFN0cixcbiAgICAgICAgICAgICAgICBpZDogYWdlbnRJZFN0cixcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IGFnZW50LmNvbXBhbnlJZD8udG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjb252ZXJzYXRpb25zVG9kYXksXG4gICAgICAgICAgICAgICAgc3RhdHVzOiByYW5kb21TdGF0dXMsXG4gICAgICAgICAgICAgICAgYXZnUmVzcG9uc2VUaW1lLFxuICAgICAgICAgICAgICAgIGNzYXQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBhZ2VudERhdGFXaXRoU3RhdHM7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIGFnZW50cyBieSBjb21wYW55OlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVBbm5vdW5jZW1lbnQoZGF0YTogeyB0aXRsZTogc3RyaW5nOyBjb250ZW50OiBzdHJpbmc7IGNhdGVnb3J5OiBzdHJpbmc7IGF1dGhvcklkOiBzdHJpbmc7IGNvbXBhbnlJZDogc3RyaW5nIH0pOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZT86IHN0cmluZzsgYW5ub3VuY2VtZW50PzogQW5ub3VuY2VtZW50IH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBhbm5vdW5jZW1lbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFubm91bmNlbWVudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGFnZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBZ2VudHNDb2xsZWN0aW9uKCk7XG5cbiAgICAgICAgY29uc3QgYXV0aG9yID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5maW5kT25lKHsgX2lkOiBuZXcgT2JqZWN0SWQoZGF0YS5hdXRob3JJZCkgfSk7XG4gICAgICAgIGlmICghYXV0aG9yKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBdXRob3Igbm90IGZvdW5kLlwiIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBuZXdBbm5vdW5jZW1lbnQ6IE9taXQ8QW5ub3VuY2VtZW50LCAnaWQnIHwgJ19pZCc+ID0ge1xuICAgICAgICAgICAgdGl0bGU6IGRhdGEudGl0bGUsXG4gICAgICAgICAgICBjb250ZW50OiBkYXRhLmNvbnRlbnQsXG4gICAgICAgICAgICBjYXRlZ29yeTogZGF0YS5jYXRlZ29yeSBhcyBhbnksXG4gICAgICAgICAgICBhdXRob3I6IHtcbiAgICAgICAgICAgICAgICBpZDogYXV0aG9yLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIG5hbWU6IGF1dGhvci5uYW1lLFxuICAgICAgICAgICAgICAgIGF2YXRhcjogYXV0aG9yLmF2YXRhclxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGRhdGEuY29tcGFueUlkKSxcbiAgICAgICAgICAgIGRhdGU6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgIHJlYWRCeTogW10sXG4gICAgICAgICAgICBjb21tZW50czogW10sXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYW5ub3VuY2VtZW50c0NvbGxlY3Rpb24uaW5zZXJ0T25lKG5ld0Fubm91bmNlbWVudCBhcyBhbnkpO1xuICAgICAgICBhd2FpdCBsb2dBY3Rpdml0eShkYXRhLmNvbXBhbnlJZCwgYXV0aG9yLm5hbWUsICdDcmVhdGUgQW5ub3VuY2VtZW50JywgYFB1Ymxpc2hlZDogXCIke2RhdGEudGl0bGV9XCJgKTtcblxuXG4gICAgICAgIGlmIChyZXN1bHQuaW5zZXJ0ZWRJZCkge1xuICAgICAgICAgICAgY29uc3QgY3JlYXRlZEFubm91bmNlbWVudDogQW5ub3VuY2VtZW50ID0ge1xuICAgICAgICAgICAgICAgIC4uLihuZXdBbm5vdW5jZW1lbnQgYXMgT21pdDxBbm5vdW5jZW1lbnQsICdfaWQnIHwgJ2lkJz4pLFxuICAgICAgICAgICAgICAgIF9pZDogcmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBpZDogcmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChkYXRhLmNvbXBhbnlJZCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBhbm5vdW5jZW1lbnQ6IGNyZWF0ZWRBbm5vdW5jZW1lbnQgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkZhaWxlZCB0byBjcmVhdGUgYW5ub3VuY2VtZW50LlwiIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkNyZWF0ZSBhbm5vdW5jZW1lbnQgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZC5cIiB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFubm91bmNlbWVudHNCeUNvbXBhbnkoY29tcGFueUlkOiBzdHJpbmcpOiBQcm9taXNlPEFubm91bmNlbWVudFtdPiB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKCFjb21wYW55SWQgfHwgIU9iamVjdElkLmlzVmFsaWQoY29tcGFueUlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QW5ub3VuY2VtZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgYW5ub3VuY2VtZW50cyA9IGF3YWl0IGFubm91bmNlbWVudHNDb2xsZWN0aW9uLmZpbmQoeyBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpIH0pLnNvcnQoeyBkYXRlOiAtMSB9KS50b0FycmF5KCk7XG5cbiAgICAgICAgcmV0dXJuIGFubm91bmNlbWVudHMubWFwKGFubm91bmNlbWVudCA9PiAoe1xuICAgICAgICAgICAgLi4uYW5ub3VuY2VtZW50LFxuICAgICAgICAgICAgX2lkOiBhbm5vdW5jZW1lbnQuX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBpZDogYW5ub3VuY2VtZW50Ll9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgY29tcGFueUlkOiBhbm5vdW5jZW1lbnQuY29tcGFueUlkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICByZWFkQnk6IGFubm91bmNlbWVudC5yZWFkQnkgfHwgW10sXG4gICAgICAgICAgICBjb21tZW50czogKGFubm91bmNlbWVudC5jb21tZW50cyB8fCBbXSkubWFwKChjb21tZW50OiBDb21tZW50KSA9PiAoe1xuICAgICAgICAgICAgICAgIC4uLmNvbW1lbnQsXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZShjb21tZW50LnRpbWVzdGFtcCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgfSkpO1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIGFubm91bmNlbWVudHMgYnkgY29tcGFueTpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFya0Fubm91bmNlbWVudEFzUmVhZChhbm5vdW5jZW1lbnRJZDogc3RyaW5nLCBhZ2VudElkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbiB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYW5ub3VuY2VtZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBbm5vdW5jZW1lbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBhd2FpdCBhbm5vdW5jZW1lbnRzQ29sbGVjdGlvbi51cGRhdGVPbmUoXG4gICAgICAgICAgICB7IF9pZDogbmV3IE9iamVjdElkKGFubm91bmNlbWVudElkKSB9LFxuICAgICAgICAgICAgeyAkYWRkVG9TZXQ6IHsgcmVhZEJ5OiBhZ2VudElkIH0gfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk1hcmsgYXMgcmVhZCBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFkZENvbW1lbnRUb0Fubm91bmNlbWVudChhbm5vdW5jZW1lbnRJZDogc3RyaW5nLCBhdXRob3JJZDogc3RyaW5nLCBjb250ZW50OiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbiwgY29tbWVudD86IENvbW1lbnQgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFnZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBZ2VudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGF1dGhvciA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IF9pZDogbmV3IE9iamVjdElkKGF1dGhvcklkKSB9KTtcbiAgICAgICAgaWYgKCFhdXRob3IpIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XG5cbiAgICAgICAgY29uc3QgbmV3Q29tbWVudDogQ29tbWVudCA9IHtcbiAgICAgICAgICAgIGlkOiBuZXcgT2JqZWN0SWQoKS50b1N0cmluZygpLFxuICAgICAgICAgICAgYXV0aG9yOiB7XG4gICAgICAgICAgICAgICAgaWQ6IGF1dGhvci5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBuYW1lOiBhdXRob3IubmFtZSxcbiAgICAgICAgICAgICAgICBhdmF0YXI6IGF1dGhvci5hdmF0YXJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgYW5ub3VuY2VtZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBbm5vdW5jZW1lbnRzQ29sbGVjdGlvbigpO1xuICAgICAgICBhd2FpdCBhbm5vdW5jZW1lbnRzQ29sbGVjdGlvbi51cGRhdGVPbmUoXG4gICAgICAgICAgICB7IF9pZDogbmV3IE9iamVjdElkKGFubm91bmNlbWVudElkKSB9LFxuICAgICAgICAgICAgeyAkcHVzaDogeyBjb21tZW50czogbmV3Q29tbWVudCB9IH1cbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGNvbW1lbnQ6IG5ld0NvbW1lbnQgfTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJBZGQgY29tbWVudCBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xuICAgIH1cbn1cblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlQWdlbnRQcm9maWxlKGFnZW50SWQ6IHN0cmluZywgbmFtZTogc3RyaW5nLCBlbWFpbDogc3RyaW5nLCBwaG9uZTogc3RyaW5nLCBjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBtZXNzYWdlPzogc3RyaW5nOyBhZ2VudD86IEFnZW50OyB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHVwZGF0ZVJlc3VsdCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChhZ2VudElkKSB9LFxuICAgICAgICAgICAgeyAkc2V0OiB7IG5hbWUsIGVtYWlsLCBwaG9uZSB9IH1cbiAgICAgICAgKTtcblxuICAgICAgICBpZiAodXBkYXRlUmVzdWx0Lm1vZGlmaWVkQ291bnQgPT09IDAgJiYgdXBkYXRlUmVzdWx0Lm1hdGNoZWRDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQWdlbnQgbm90IGZvdW5kLlwiIH07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGFnZW50V2l0aFN0YXRzID0gYXdhaXQgZ2V0QWdlbnRzQnlDb21wYW55KGNvbXBhbnlJZCk7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRBZ2VudCA9IGFnZW50V2l0aFN0YXRzLmZpbmQoYSA9PiBhLmlkID09PSBhZ2VudElkKTtcblxuXG4gICAgICAgIGlmICh1cGRhdGVkQWdlbnQpIHtcbiAgICAgICAgICAgIGF3YWl0IGxvZ0FjdGl2aXR5KGNvbXBhbnlJZCwgdXBkYXRlZEFnZW50Lm5hbWUsICdVcGRhdGUgUHJvZmlsZScsIGBVcGRhdGVkIGFnZW50IHByb2ZpbGUgZm9yICR7bmFtZX1gKTtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGFnZW50OiB1cGRhdGVkQWdlbnQgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkZhaWxlZCB0byByZXRyaWV2ZSB1cGRhdGVkIGFnZW50LlwiIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlVwZGF0ZSBhZ2VudCBwcm9maWxlIGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQuXCIgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVBZ2VudFBhc3N3b3JkKGFnZW50SWQ6IHN0cmluZywgY3VycmVudFBhc3N3b3JkOiBzdHJpbmcsIG5ld1Bhc3N3b3JkOiBzdHJpbmcsIGNvbXBhbnlJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U6IHN0cmluZyB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgYWdlbnQgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBfaWQ6IG5ldyBPYmplY3RJZChhZ2VudElkKSB9KTtcblxuICAgICAgICBpZiAoIWFnZW50IHx8ICFhZ2VudC5wYXNzd29yZCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQWdlbnQgbm90IGZvdW5kLlwiIH07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGlzUGFzc3dvcmRWYWxpZCA9IGF3YWl0IHZlcmlmeVBhc3N3b3JkKGN1cnJlbnRQYXNzd29yZCwgYWdlbnQucGFzc3dvcmQpO1xuICAgICAgICBpZiAoIWlzUGFzc3dvcmRWYWxpZCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiSW5jb3JyZWN0IGN1cnJlbnQgcGFzc3dvcmQuXCIgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5ld0hhc2hlZFBhc3N3b3JkID0gYXdhaXQgaGFzaFBhc3N3b3JkKG5ld1Bhc3N3b3JkKTtcbiAgICAgICAgYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi51cGRhdGVPbmUoXG4gICAgICAgICAgICB7IF9pZDogbmV3IE9iamVjdElkKGFnZW50SWQpIH0sXG4gICAgICAgICAgICB7ICRzZXQ6IHsgcGFzc3dvcmQ6IG5ld0hhc2hlZFBhc3N3b3JkIH0gfVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgYXdhaXQgbG9nQWN0aXZpdHkoY29tcGFueUlkLCBhZ2VudC5uYW1lLCAnVXBkYXRlIFBhc3N3b3JkJywgYENoYW5nZWQgcGFzc3dvcmRgKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgbWVzc2FnZTogXCJQYXNzd29yZCB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5cIiB9O1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlVwZGF0ZSBwYXNzd29yZCBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkLlwiIH07XG4gICAgfVxufVxuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBoYW5kbGVMb2dpbihlbWFpbDogc3RyaW5nLCBwYXNzd29yZF91bnVzZWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBtZXNzYWdlPzogc3RyaW5nOyBhZ2VudD86IEFnZW50IH0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgIGNvbnN0IGFnZW50RG9jID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5maW5kT25lKHsgZW1haWw6IGVtYWlsLnRvTG93ZXJDYXNlKCkgfSk7XG5cbiAgICAgIGlmIChhZ2VudERvYyAmJiBhZ2VudERvYy5wYXNzd29yZCkge1xuICAgICAgICBjb25zdCBpc1Bhc3N3b3JkVmFsaWQgPSBhd2FpdCB2ZXJpZnlQYXNzd29yZChwYXNzd29yZF91bnVzZWQsIGFnZW50RG9jLnBhc3N3b3JkKTtcbiAgICAgICAgaWYgKGlzUGFzc3dvcmRWYWxpZCkge1xuICAgICAgICAgIGNvbnN0IHsgcGFzc3dvcmQsIC4uLmFnZW50RGF0YSB9ID0gYWdlbnREb2M7XG4gICAgICAgICAgY29uc3QgYWdlbnQ6IEFnZW50ID0ge1xuICAgICAgICAgICAgLi4uYWdlbnREYXRhLFxuICAgICAgICAgICAgX2lkOiBhZ2VudERvYy5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGlkOiBhZ2VudERvYy5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGNvbXBhbnlJZDogYWdlbnREb2MuY29tcGFueUlkPy50b1N0cmluZygpLFxuICAgICAgICAgIH07XG4gICAgICAgICAgYXdhaXQgbG9nQWN0aXZpdHkoYWdlbnQuY29tcGFueUlkLCBhZ2VudC5uYW1lLCAnTG9naW4nLCBgTG9nZ2VkIGluIHN1Y2Nlc3NmdWxseWApO1xuICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGFnZW50OiBhZ2VudCB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJJbnZhbGlkIGVtYWlsIG9yIHBhc3N3b3JkLlwiIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJMb2dpbiBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiRGF0YWJhc2UgY29ubmVjdGlvbiBlcnJvci5cIiB9O1xuICAgIH1cbn07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVBZ2VudChuYW1lOiBzdHJpbmcsIGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkX3VudXNlZDogc3RyaW5nLCByb2xlOiBBZ2VudFJvbGUsIGNvbXBhbnlJZDogc3RyaW5nLCBjcmVhdGVkQnk6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBtZXNzYWdlPzogc3RyaW5nOyBhZ2VudD86IEFnZW50OyB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYWdlbnRzQ29sbGVjdGlvbiA9IGF3YWl0IGdldEFnZW50c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdBZ2VudCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IGVtYWlsOiBlbWFpbC50b0xvd2VyQ2FzZSgpIH0pO1xuXG4gICAgICAgIGlmIChleGlzdGluZ0FnZW50KSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiBhZ2VudCB3aXRoIHRoaXMgZW1haWwgYWxyZWFkeSBleGlzdHMuXCIgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGhhc2hlZFBhc3N3b3JkID0gYXdhaXQgaGFzaFBhc3N3b3JkKHBhc3N3b3JkX3VudXNlZCk7XG4gICAgICAgIGNvbnN0IGF2YXRhciA9ICcnO1xuXG4gICAgICAgIGNvbnN0IGFnZW50VG9JbnNlcnQ6IE9taXQ8QWdlbnQsICdpZCcgfCAnX2lkJz4gPSB7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgZW1haWw6IGVtYWlsLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICBwYXNzd29yZDogaGFzaGVkUGFzc3dvcmQsXG4gICAgICAgICAgICByb2xlLFxuICAgICAgICAgICAgYXZhdGFyLFxuICAgICAgICAgICAgcGhvbmU6ICcnLCBcbiAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZClcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmluc2VydE9uZShhZ2VudFRvSW5zZXJ0IGFzIGFueSk7XG5cbiAgICAgICAgaWYgKHJlc3VsdC5pbnNlcnRlZElkKSB7XG4gICAgICAgICAgICBjb25zdCBhZ2VudHNXaXRoU3RhdHMgPSBhd2FpdCBnZXRBZ2VudHNCeUNvbXBhbnkoY29tcGFueUlkKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld0FnZW50ID0gYWdlbnRzV2l0aFN0YXRzLmZpbmQoYSA9PiBhLmlkID09PSByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpKTtcblxuICAgICAgICAgICAgaWYgKG5ld0FnZW50KSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgbG9nQWN0aXZpdHkoY29tcGFueUlkLCBjcmVhdGVkQnksICdDcmVhdGUgQWdlbnQnLCBgQ3JlYXRlZCBhZ2VudDogJHtuYW1lfWApO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGFnZW50OiBuZXdBZ2VudCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkZhaWxlZCB0byBjcmVhdGUgYWdlbnQuXCIgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQ3JlYXRlIGFnZW50IGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQgd2hpbGUgY3JlYXRpbmcgdGhlIGFnZW50LlwiIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVsZXRlQWdlbnQoYWdlbnRJZDogc3RyaW5nLCBjb21wYW55SWQ/OiBzdHJpbmcsIGRlbGV0ZWRCeT86IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuLCBtZXNzYWdlPzogc3RyaW5nIH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBhZ2VudHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0QWdlbnRzQ29sbGVjdGlvbigpO1xuXG4gICAgICAgIGlmICghYWdlbnRJZCB8fCAhT2JqZWN0SWQuaXNWYWxpZChhZ2VudElkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiSW52YWxpZCBhZ2VudCBJRC5cIiB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYWdlbnRUb0RlbGV0ZSA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZmluZE9uZSh7IF9pZDogbmV3IE9iamVjdElkKGFnZW50SWQpIH0pO1xuICAgICAgICBpZiAoIWFnZW50VG9EZWxldGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFnZW50IG5vdCBmb3VuZC5cIiB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUHJldmVudCBkZWxldGluZyB0aGUgbGFzdCBhZG1pblxuICAgICAgICBpZiAoYWdlbnRUb0RlbGV0ZS5yb2xlID09PSAnYWRtaW4nKSB7XG4gICAgICAgICAgICBjb25zdCBhZG1pbkNvdW50ID0gYXdhaXQgYWdlbnRzQ29sbGVjdGlvbi5jb3VudERvY3VtZW50cyh7IGNvbXBhbnlJZDogYWdlbnRUb0RlbGV0ZS5jb21wYW55SWQsIHJvbGU6ICdhZG1pbicgfSk7XG4gICAgICAgICAgICBpZiAoYWRtaW5Db3VudCA8PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQ2Fubm90IHJlbW92ZSB0aGUgbGFzdCBhZG1pbmlzdHJhdG9yLlwiIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFnZW50c0NvbGxlY3Rpb24uZGVsZXRlT25lKHsgX2lkOiBuZXcgT2JqZWN0SWQoYWdlbnRJZCkgfSk7XG5cbiAgICAgICAgaWYgKHJlc3VsdC5kZWxldGVkQ291bnQgPT09IDEpIHtcbiAgICAgICAgICAgIGlmIChjb21wYW55SWQgJiYgZGVsZXRlZEJ5KSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgbG9nQWN0aXZpdHkoY29tcGFueUlkLCBkZWxldGVkQnksICdEZWxldGUgQWdlbnQnLCBgUmVtb3ZlZCBhZ2VudDogJHthZ2VudFRvRGVsZXRlLm5hbWV9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJGYWlsZWQgdG8gcmVtb3ZlIGFnZW50LlwiIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkRlbGV0ZSBhZ2VudCBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkLlwiIH07XG4gICAgfVxufVxuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBY3Rpdml0eUxvZ3MoY29tcGFueUlkOiBzdHJpbmcpOiBQcm9taXNlPEFjdGl2aXR5TG9nW10+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIWNvbXBhbnlJZCB8fCAhT2JqZWN0SWQuaXNWYWxpZChjb21wYW55SWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbG9nc0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBY3Rpdml0eUxvZ3NDb2xsZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGxvZ3MgPSBhd2FpdCBsb2dzQ29sbGVjdGlvbi5maW5kKHsgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSB9KS5zb3J0KHsgdGltZXN0YW1wOiAtMSB9KS5saW1pdCg1MCkudG9BcnJheSgpO1xuXG4gICAgICAgIHJldHVybiBsb2dzLm1hcChsb2cgPT4gKHtcbiAgICAgICAgICAgIC4uLmxvZyxcbiAgICAgICAgICAgIF9pZDogbG9nLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgaWQ6IGxvZy5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGNvbXBhbnlJZDogbG9nLmNvbXBhbnlJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBsb2cudGltZXN0YW1wLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIH0pKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgYWN0aXZpdHkgbG9nczpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Q29udGFjdHNCeUNvbXBhbnkoY29tcGFueUlkOiBzdHJpbmcpOiBQcm9taXNlPFVzZXJbXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghY29tcGFueUlkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNvbXBhbnlJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb250YWN0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRVc2Vyc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgY29udGFjdHMgPSBhd2FpdCBjb250YWN0c0NvbGxlY3Rpb24uZmluZCh7IGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkgfSkudG9BcnJheSgpO1xuXG4gICAgICAgIHJldHVybiBjb250YWN0cy5tYXAoY29udGFjdCA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IF9pZCwgY29tcGFueUlkLCAuLi5yZXN0IH0gPSBjb250YWN0IGFzIGFueTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgICAgICAgICBfaWQ6IF9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiBfaWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IGNvbXBhbnlJZD8udG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBub3RlczogKGNvbnRhY3Qubm90ZXMgfHwgW10pLm1hcCgobm90ZTogTm90ZSkgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgLi4ubm90ZSxcbiAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZShub3RlLnRpbWVzdGFtcCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgY29udGFjdHM6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUNvbnRhY3QobmFtZTogc3RyaW5nLCBlbWFpbDogc3RyaW5nLCBwaG9uZTogc3RyaW5nLCBjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBtZXNzYWdlPzogc3RyaW5nOyBjb250YWN0PzogVXNlciB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY29udGFjdHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0VXNlcnNDb2xsZWN0aW9uKCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBleGlzdGluZ0NvbnRhY3QgPSBhd2FpdCBjb250YWN0c0NvbGxlY3Rpb24uZmluZE9uZSh7IGVtYWlsOiBlbWFpbC50b0xvd2VyQ2FzZSgpLCBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpIH0pO1xuICAgICAgICBpZiAoZXhpc3RpbmdDb250YWN0KSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogXCJBIGNvbnRhY3Qgd2l0aCB0aGlzIGVtYWlsIGFscmVhZHkgZXhpc3RzLlwiIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjb250YWN0VG9JbnNlcnQ6IE9taXQ8VXNlciwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBlbWFpbDogZW1haWwudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgIHBob25lLFxuICAgICAgICAgICAgYXZhdGFyOiAnJyxcbiAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCksXG4gICAgICAgICAgICBub3RlczogW10sXG4gICAgICAgICAgICBvbmxpbmU6IGZhbHNlLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi5pbnNlcnRPbmUoY29udGFjdFRvSW5zZXJ0IGFzIGFueSk7XG4gICAgICAgIFxuICAgICAgICBpZiAocmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0NvbnRhY3Q6IFVzZXIgPSB7XG4gICAgICAgICAgICAgICAgLi4uKGNvbnRhY3RUb0luc2VydCBhcyBPbWl0PFVzZXIsICdfaWQnfCdpZCc+KSxcbiAgICAgICAgICAgICAgICBfaWQ6IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgaWQ6IHJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKS50b1N0cmluZygpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGNvbnRhY3Q6IG5ld0NvbnRhY3QgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkZhaWxlZCB0byBjcmVhdGUgY29udGFjdC5cIiB9O1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkNyZWF0ZSBjb250YWN0IGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQuXCIgfTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFzc2lnbkFnZW50VG9Db250YWN0KGNvbnRhY3RJZDogc3RyaW5nLCBhZ2VudElkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbiB9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY29udGFjdHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0VXNlcnNDb2xsZWN0aW9uKCk7XG4gICAgICAgIGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi51cGRhdGVPbmUoXG4gICAgICAgICAgICB7IF9pZDogbmV3IE9iamVjdElkKGNvbnRhY3RJZCkgfSxcbiAgICAgICAgICAgIHsgJHNldDogeyBhc3NpZ25lZEFnZW50SWQ6IGFnZW50SWQgfSB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYXNzaWduaW5nIGFnZW50OlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWRkTm90ZVRvQ29udGFjdChjb250YWN0SWQ6IHN0cmluZywgYWdlbnRJZDogc3RyaW5nLCBhZ2VudE5hbWU6IHN0cmluZywgdGV4dDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG5vdGU/OiBOb3RlIH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjb250YWN0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRVc2Vyc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IG5ld05vdGU6IE5vdGUgPSB7XG4gICAgICAgICAgICBpZDogbmV3IE9iamVjdElkKCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGFnZW50SWQsXG4gICAgICAgICAgICBhZ2VudE5hbWUsXG4gICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb250YWN0c0NvbGxlY3Rpb24udXBkYXRlT25lKFxuICAgICAgICAgICAgeyBfaWQ6IG5ldyBPYmplY3RJZChjb250YWN0SWQpIH0sXG4gICAgICAgICAgICB7ICRwdXNoOiB7IG5vdGVzOiB7ICRlYWNoOiBbbmV3Tm90ZV0sICRwb3NpdGlvbjogMCB9IH0gfVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgaWYgKHJlc3VsdC5tb2RpZmllZENvdW50ID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgbm90ZTogbmV3Tm90ZSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFkZGluZyBub3RlOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Tm90ZXNGb3JDb250YWN0KGNvbnRhY3RJZDogc3RyaW5nKTogUHJvbWlzZTxOb3RlW10+IHtcbiAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFjb250YWN0SWQgfHwgIU9iamVjdElkLmlzVmFsaWQoY29udGFjdElkKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbnRhY3RzQ29sbGVjdGlvbiA9IGF3YWl0IGdldFVzZXJzQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBjb250YWN0ID0gYXdhaXQgY29udGFjdHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBfaWQ6IG5ldyBPYmplY3RJZChjb250YWN0SWQpIH0pO1xuICAgICAgICByZXR1cm4gKGNvbnRhY3Q/Lm5vdGVzIHx8IFtdKS5tYXAoKG5vdGU6IE5vdGUpID0+ICh7XG4gICAgICAgICAgICAuLi5ub3RlLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZShub3RlLnRpbWVzdGFtcCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgfSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBub3RlczpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Q2hhdHNCeUNvbXBhbnkoY29tcGFueUlkOiBzdHJpbmcpOiBQcm9taXNlPENoYXRbXT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghY29tcGFueUlkIHx8ICFPYmplY3RJZC5pc1ZhbGlkKGNvbXBhbnlJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGF0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRDaGF0c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgY2hhdHMgPSBhd2FpdCBjaGF0c0NvbGxlY3Rpb24uYWdncmVnYXRlKFtcbiAgICAgICAgICAgIHsgJG1hdGNoOiB7IGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCkgfSB9LFxuICAgICAgICAgICAgeyAkc29ydDogeyB0aW1lc3RhbXA6IC0xIH0gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAkbG9va3VwOiB7XG4gICAgICAgICAgICAgICAgICAgIGZyb206ICdjb250YWN0cycsXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsRmllbGQ6ICd1c2VySWQnLFxuICAgICAgICAgICAgICAgICAgICBmb3JlaWduRmllbGQ6ICdfaWQnLFxuICAgICAgICAgICAgICAgICAgICBhczogJ3VzZXInXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHsgJHVud2luZDogJyR1c2VyJyB9XG4gICAgICAgIF0pLnRvQXJyYXkoKTtcblxuICAgICAgICByZXR1cm4gY2hhdHMubWFwKGNoYXQgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBfaWQsIGNvbXBhbnlJZCwgdXNlcklkLCAuLi5yZXN0IH0gPSBjaGF0IGFzIGFueTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgICAgICAgICBfaWQ6IF9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiBfaWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IGNvbXBhbnlJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIHVzZXJJZDogdXNlcklkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgbWVzc2FnZXM6IFtdLCAvLyBNZXNzYWdlcyB3aWxsIGJlIGxhenktbG9hZGVkXG4gICAgICAgICAgICAgICAgdXNlcjoge1xuICAgICAgICAgICAgICAgICAgICAuLi5jaGF0LnVzZXIsXG4gICAgICAgICAgICAgICAgICAgIF9pZDogY2hhdC51c2VyLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBpZDogY2hhdC51c2VyLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBjb21wYW55SWQ6IGNoYXQudXNlci5jb21wYW55SWQgPyBjaGF0LnVzZXIuY29tcGFueUlkLnRvU3RyaW5nKCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIGNoYXRzIGJ5IGNvbXBhbnk6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldE1lc3NhZ2VzRm9yQ2hhdChjaGF0SWQ6IHN0cmluZyk6IFByb21pc2U8TWVzc2FnZVtdPiB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKCFjaGF0SWQgfHwgIU9iamVjdElkLmlzVmFsaWQoY2hhdElkKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzQ29sbGVjdGlvbiA9IGF3YWl0IGdldE1lc3NhZ2VzQ29sbGVjdGlvbigpO1xuICAgICAgICAvLyBBbHNvIGZldGNoIHNlbmRlciBkZXRhaWxzIGlmIGl0J3MgYSB1c2VyLCBub3QgYW4gYWdlbnQgKCdtZScpXG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gYXdhaXQgbWVzc2FnZXNDb2xsZWN0aW9uLmFnZ3JlZ2F0ZShbXG4gICAgICAgICAgICB7ICRtYXRjaDogeyBjaGF0SWQ6IG5ldyBPYmplY3RJZChjaGF0SWQpIH0gfSxcbiAgICAgICAgICAgIHsgJHNvcnQ6IHsgdGltZXN0YW1wOiAxIH0gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAkbG9va3VwOiB7XG4gICAgICAgICAgICAgICAgICAgIGZyb206ICdjb250YWN0cycsXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsRmllbGQ6ICdzZW5kZXJJZCcsXG4gICAgICAgICAgICAgICAgICAgIGZvcmVpZ25GaWVsZDogJ19pZCcsXG4gICAgICAgICAgICAgICAgICAgIGFzOiAnc2VuZGVySW5mbydcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIF0pLnRvQXJyYXkoKTtcblxuICAgICAgICByZXR1cm4gbWVzc2FnZXMubWFwKG1zZyA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IF9pZCwgY2hhdElkLCBzZW5kZXJJZCwgc2VuZGVySW5mbywgLi4ucmVzdCB9ID0gbXNnIGFzIGFueTtcbiAgICAgICAgICAgIGNvbnN0IHNlbmRlciA9IG1zZy5zZW5kZXIgPT09ICdtZScgPyAnbWUnIDogKHNlbmRlckluZm9bMF0gfHwgbnVsbCk7XG5cbiAgICAgICAgICAgIGlmIChzZW5kZXIgJiYgc2VuZGVyICE9PSAnbWUnKSB7XG4gICAgICAgICAgICAgICAgc2VuZGVyLmlkID0gc2VuZGVyLl9pZC50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgICAgICAgICAgaWQ6IF9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIHNlbmRlcixcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBtZXNzYWdlczpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VuZE1lc3NhZ2UoY2hhdElkOiBzdHJpbmcsIHRleHQ6IHN0cmluZywgYWdlbnRJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG5ld01lc3NhZ2U/OiBNZXNzYWdlIH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBtZXNzYWdlc0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRNZXNzYWdlc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgY2hhdHNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q2hhdHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBjb25zdCBuZXdNZXNzYWdlVG9JbnNlcnQ6IE9taXQ8TWVzc2FnZSwgJ2lkJyB8ICdfaWQnPiA9IHtcbiAgICAgICAgICAgIGNoYXRJZDogbmV3IE9iamVjdElkKGNoYXRJZCksXG4gICAgICAgICAgICBzZW5kZXI6ICdtZScsIC8vICdtZScgZGVub3RlcyB0aGUgYWdlbnRcbiAgICAgICAgICAgIHNlbmRlcklkOiBuZXcgT2JqZWN0SWQoYWdlbnRJZCksXG4gICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgdGltZXN0YW1wOiB0aW1lc3RhbXAudG9JU09TdHJpbmcoKSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBtZXNzYWdlc0NvbGxlY3Rpb24uaW5zZXJ0T25lKG5ld01lc3NhZ2VUb0luc2VydCBhcyBhbnkpO1xuXG4gICAgICAgIGlmIChyZXN1bHQuaW5zZXJ0ZWRJZCkge1xuICAgICAgICAgICAgYXdhaXQgY2hhdHNDb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICAgICAgICAgICAgICB7IF9pZDogbmV3IE9iamVjdElkKGNoYXRJZCkgfSxcbiAgICAgICAgICAgICAgICB7ICRzZXQ6IHsgbGFzdE1lc3NhZ2U6IHRleHQsIHRpbWVzdGFtcDogdGltZXN0YW1wLnRvTG9jYWxlVGltZVN0cmluZyhbXSwgeyBob3VyOiAnMi1kaWdpdCcsIG1pbnV0ZTogJzItZGlnaXQnIH0pIH0gfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZmluYWxOZXdNZXNzYWdlOiBNZXNzYWdlID0ge1xuICAgICAgICAgICAgICAgIC4uLihuZXdNZXNzYWdlVG9JbnNlcnQgYXMgT21pdDxNZXNzYWdlLCAnX2lkJ3wnaWQnPiksXG4gICAgICAgICAgICAgICAgX2lkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGNoYXRJZDogbmV3TWVzc2FnZVRvSW5zZXJ0LmNoYXRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIHNlbmRlcklkOiBuZXdNZXNzYWdlVG9JbnNlcnQuc2VuZGVySWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiB7IFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsIFxuICAgICAgICAgICAgICAgIG5ld01lc3NhZ2U6IGZpbmFsTmV3TWVzc2FnZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBzZW5kaW5nIG1lc3NhZ2U6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZXRDaGF0Ym90U3RhdHVzKGNoYXRJZDogc3RyaW5nLCBpc0FjdGl2ZTogYm9vbGVhbik6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuIH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjaGF0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRDaGF0c0NvbGxlY3Rpb24oKTtcbiAgICAgICAgYXdhaXQgY2hhdHNDb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICAgICAgICAgIHsgX2lkOiBuZXcgT2JqZWN0SWQoY2hhdElkKSB9LFxuICAgICAgICAgICAgeyAkc2V0OiB7IGlzQ2hhdGJvdEFjdGl2ZTogaXNBY3RpdmUgfSB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igc2V0dGluZyBjaGF0Ym90IHN0YXR1czpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN0YXJ0TmV3Q2hhdHModXNlcnM6IFVzZXJbXSwgbWVzc2FnZTogc3RyaW5nLCBjb21wYW55SWQ6IHN0cmluZywgYWdlbnRJZDogc3RyaW5nKTogUHJvbWlzZTxDaGF0W10+IHtcbiAgICBjb25zdCBjaGF0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRDaGF0c0NvbGxlY3Rpb24oKTtcbiAgICBjb25zdCBuZXdPclVwZGF0ZWRDaGF0czogQ2hhdFtdID0gW107XG5cbiAgICBmb3IgKGNvbnN0IHVzZXIgb2YgdXNlcnMpIHtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdDaGF0RG9jID0gYXdhaXQgY2hhdHNDb2xsZWN0aW9uLmZpbmRPbmUoe1xuICAgICAgICAgICAgdXNlcklkOiBuZXcgT2JqZWN0SWQodXNlci5pZCksXG4gICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChleGlzdGluZ0NoYXREb2MpIHtcbiAgICAgICAgICAgIGF3YWl0IHNlbmRNZXNzYWdlKGV4aXN0aW5nQ2hhdERvYy5faWQudG9TdHJpbmcoKSwgbWVzc2FnZSwgYWdlbnRJZCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRDaGF0OiBDaGF0ID0ge1xuICAgICAgICAgICAgICAgIC4uLihleGlzdGluZ0NoYXREb2MgYXMgYW55KSxcbiAgICAgICAgICAgICAgICBfaWQ6IGV4aXN0aW5nQ2hhdERvYy5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBpZDogZXhpc3RpbmdDaGF0RG9jLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIHVzZXJJZDogZXhpc3RpbmdDaGF0RG9jLnVzZXJJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogZXhpc3RpbmdDaGF0RG9jLmNvbXBhbnlJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGxhc3RNZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0xvY2FsZVRpbWVTdHJpbmcoW10sIHsgaG91cjogJzItZGlnaXQnLCBtaW51dGU6ICcyLWRpZ2l0JyB9KSxcbiAgICAgICAgICAgICAgICB1c2VyOiB1c2VyLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2VzOiBbXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBuZXdPclVwZGF0ZWRDaGF0cy5wdXNoKHVwZGF0ZWRDaGF0KTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld0NoYXREYXRhOiBPbWl0PENoYXQsICdpZCcgfCAnX2lkJz4gPSB7XG4gICAgICAgICAgICAgICAgdXNlcklkOiBuZXcgT2JqZWN0SWQodXNlci5pZCksXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSxcbiAgICAgICAgICAgICAgICBsYXN0TWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IHRpbWVzdGFtcC50b0xvY2FsZVRpbWVTdHJpbmcoW10sIHsgaG91cjogJzItZGlnaXQnLCBtaW51dGU6ICcyLWRpZ2l0JyB9KSxcbiAgICAgICAgICAgICAgICB1bnJlYWRDb3VudDogMCxcbiAgICAgICAgICAgICAgICBwcmlvcml0eTogJ25vcm1hbCcsXG4gICAgICAgICAgICAgICAgY2hhbm5lbDogJ1dlYmNoYXQnLFxuICAgICAgICAgICAgICAgIGlzQ2hhdGJvdEFjdGl2ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgbWVzc2FnZXM6IFtdXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgY2hhdFJlc3VsdCA9IGF3YWl0IGNoYXRzQ29sbGVjdGlvbi5pbnNlcnRPbmUobmV3Q2hhdERhdGEgYXMgYW55KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGNoYXRSZXN1bHQuaW5zZXJ0ZWRJZCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHNlbmRNZXNzYWdlKGNoYXRSZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLCBtZXNzYWdlLCBhZ2VudElkKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjcmVhdGVkQ2hhdDogQ2hhdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uKG5ld0NoYXREYXRhIGFzIGFueSksXG4gICAgICAgICAgICAgICAgICAgIF9pZDogY2hhdFJlc3VsdC5pbnNlcnRlZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIGlkOiBjaGF0UmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgdXNlcklkOiBuZXdDaGF0RGF0YS51c2VySWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGFueUlkOiBuZXdDaGF0RGF0YS5jb21wYW55SWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgdXNlcjogdXNlcixcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZXM6IFtdLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgbmV3T3JVcGRhdGVkQ2hhdHMucHVzaChjcmVhdGVkQ2hhdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ld09yVXBkYXRlZENoYXRzO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlQ2FtcGFpZ24oZGF0YTogUGFydGlhbDxDYW1wYWlnbj4gJiB7IHNjaGVkdWxlVHlwZT86ICdub3cnIHwgJ2xhdGVyJyB9LCBjb21wYW55SWQ6IHN0cmluZywgYWdlbnRJZDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U/OiBzdHJpbmc7IGNhbXBhaWduPzogQ2FtcGFpZ247IH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjYW1wYWlnbnNDb2xsZWN0aW9uID0gYXdhaXQgZ2V0Q2FtcGFpZ25zQ29sbGVjdGlvbigpO1xuICAgICAgICBjb25zdCBjb250YWN0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRVc2Vyc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgXG4gICAgICAgIGxldCBzdGF0dXM6IENhbXBhaWduWydzdGF0dXMnXSA9ICdEcmFmdCc7XG4gICAgICAgIGxldCBzZW50QXQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IGRlbGl2ZXJ5ID0gMDtcbiAgICAgICAgbGV0IGVuZ2FnZW1lbnQgPSAwO1xuICAgICAgICBsZXQgY29udmVyc2lvbiA9IDA7XG5cbiAgICAgICAgaWYgKGRhdGEuc2NoZWR1bGVUeXBlID09PSAnbm93Jykge1xuICAgICAgICAgICAgc3RhdHVzID0gJ0NvbXBsZXRlZCc7XG4gICAgICAgICAgICBzZW50QXQgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICAvLyBHZW5lcmF0ZSBtb2NrIHBlcmZvcm1hbmNlIGRhdGEgZm9yIGltbWVkaWF0ZSBjYW1wYWlnbnNcbiAgICAgICAgICAgIGRlbGl2ZXJ5ID0gOTUgKyBNYXRoLnJhbmRvbSgpICogNTsgXG4gICAgICAgICAgICBlbmdhZ2VtZW50ID0gMTAgKyBNYXRoLnJhbmRvbSgpICogMTU7XG4gICAgICAgICAgICBjb252ZXJzaW9uID0gMiArIE1hdGgucmFuZG9tKCkgKiA4OyBcblxuICAgICAgICAgICAgLy8gQWN0dWFsbHkgc2VuZCB0aGUgbWVzc2FnZXNcbiAgICAgICAgICAgIGlmIChkYXRhLmF1ZGllbmNlICYmIGRhdGEubWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF1ZGllbmNlQ29udGFjdHMgPSBhd2FpdCBjb250YWN0c0NvbGxlY3Rpb24uZmluZCh7IF9pZDogeyAkaW46IGRhdGEuYXVkaWVuY2UubWFwKGlkID0+IG5ldyBPYmplY3RJZChpZCkpIH0gfSkudG9BcnJheSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJzID0gYXVkaWVuY2VDb250YWN0cy5tYXAoYyA9PiAoe1xuICAgICAgICAgICAgICAgICAgICAuLi5jLFxuICAgICAgICAgICAgICAgICAgICBpZDogYy5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgX2lkOiBjLl9pZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIH0pKSBhcyBVc2VyW107XG5cbiAgICAgICAgICAgICAgICBhd2FpdCBzdGFydE5ld0NoYXRzKHVzZXJzLCBkYXRhLm1lc3NhZ2UsIGNvbXBhbnlJZCwgYWdlbnRJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YS5zY2hlZHVsZVR5cGUgPT09ICdsYXRlcicpIHtcbiAgICAgICAgICAgIHN0YXR1cyA9ICdTY2hlZHVsZWQnO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbmV3Q2FtcGFpZ246IE9taXQ8Q2FtcGFpZ24sICdpZCcgfCAnX2lkJz4gPSB7XG4gICAgICAgICAgICB0aXRsZTogZGF0YS50aXRsZSEsXG4gICAgICAgICAgICB0eXBlOiBkYXRhLnR5cGUgfHwgJ0Jyb2FkY2FzdCcsXG4gICAgICAgICAgICBzdGF0dXM6IHN0YXR1cyxcbiAgICAgICAgICAgIGNvbXBhbnlJZDogbmV3IE9iamVjdElkKGNvbXBhbnlJZCksXG4gICAgICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgIGF1ZGllbmNlOiBkYXRhLmF1ZGllbmNlIHx8IFtdLFxuICAgICAgICAgICAgbWVzc2FnZTogZGF0YS5tZXNzYWdlIHx8IFwiXCIsXG4gICAgICAgICAgICBzZW50QXQ6IHNlbnRBdCxcbiAgICAgICAgICAgIGRlbGl2ZXJ5LFxuICAgICAgICAgICAgZW5nYWdlbWVudCxcbiAgICAgICAgICAgIGNvbnZlcnNpb24sXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2FtcGFpZ25zQ29sbGVjdGlvbi5pbnNlcnRPbmUobmV3Q2FtcGFpZ24gYXMgYW55KTtcbiAgICAgICAgaWYgKHJlc3VsdC5pbnNlcnRlZElkKSB7XG4gICAgICAgICAgICBjb25zdCBjcmVhdGVkQ2FtcGFpZ246IENhbXBhaWduID0ge1xuICAgICAgICAgICAgICAgIC4uLm5ld0NhbXBhaWduLFxuICAgICAgICAgICAgICAgIF9pZDogcmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBpZDogcmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IG5ldyBPYmplY3RJZChjb21wYW55SWQpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgY2FtcGFpZ246IGNyZWF0ZWRDYW1wYWlnbiB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkZhaWxlZCB0byBjcmVhdGUgY2FtcGFpZ24uXCIgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQ3JlYXRlIGNhbXBhaWduIGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQuXCIgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDYW1wYWlnbnNCeUNvbXBhbnkoY29tcGFueUlkOiBzdHJpbmcpOiBQcm9taXNlPENhbXBhaWduW10+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIWNvbXBhbnlJZCB8fCAhT2JqZWN0SWQuaXNWYWxpZChjb21wYW55SWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2FtcGFpZ25zQ29sbGVjdGlvbiA9IGF3YWl0IGdldENhbXBhaWduc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgY2FtcGFpZ25zID0gYXdhaXQgY2FtcGFpZ25zQ29sbGVjdGlvbi5maW5kKHsgY29tcGFueUlkOiBuZXcgT2JqZWN0SWQoY29tcGFueUlkKSB9KS5zb3J0KHsgY3JlYXRlZEF0OiAtMSB9KS50b0FycmF5KCk7XG5cbiAgICAgICAgcmV0dXJuIGNhbXBhaWducy5tYXAoY2FtcGFpZ24gPT4gKHtcbiAgICAgICAgICAgIC4uLmNhbXBhaWduLFxuICAgICAgICAgICAgX2lkOiBjYW1wYWlnbi5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGlkOiBjYW1wYWlnbi5faWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGNvbXBhbnlJZDogY2FtcGFpZ24uY29tcGFueUlkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKGNhbXBhaWduLmNyZWF0ZWRBdCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgIHNlbnRBdDogY2FtcGFpZ24uc2VudEF0ID8gbmV3IERhdGUoY2FtcGFpZ24uc2VudEF0KS50b0lTT1N0cmluZygpIDogdW5kZWZpbmVkLFxuICAgICAgICB9KSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIGNhbXBhaWduczpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW1wb3J0Q29udGFjdHNGcm9tQ1NWKGNvbnRhY3RzRGF0YTogeyBuYW1lOiBzdHJpbmc7IGVtYWlsOiBzdHJpbmc7IHBob25lOiBzdHJpbmcgfVtdLCBjb21wYW55SWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBtZXNzYWdlOiBzdHJpbmc7IG5ld0NvbnRhY3RzOiBVc2VyW107IGltcG9ydGVkQ291bnQ6IG51bWJlcjsgc2tpcHBlZENvdW50OiBudW1iZXI7IH0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjb250YWN0c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRVc2Vyc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgbmV3Q29udGFjdHM6IFVzZXJbXSA9IFtdO1xuICAgICAgICBsZXQgaW1wb3J0ZWRDb3VudCA9IDA7XG4gICAgICAgIGxldCBza2lwcGVkQ291bnQgPSAwO1xuXG4gICAgICAgIGNvbnN0IGNvbXBhbnlPYmpJZCA9IG5ldyBPYmplY3RJZChjb21wYW55SWQpO1xuXG4gICAgICAgIGZvciAoY29uc3QgY29udGFjdCBvZiBjb250YWN0c0RhdGEpIHtcbiAgICAgICAgICAgIGxldCBleGlzdGluZ0NvbnRhY3QgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGNvbnRhY3QuZW1haWwpIHtcbiAgICAgICAgICAgICAgICBleGlzdGluZ0NvbnRhY3QgPSBhd2FpdCBjb250YWN0c0NvbGxlY3Rpb24uZmluZE9uZSh7XG4gICAgICAgICAgICAgICAgICAgIGVtYWlsOiBjb250YWN0LmVtYWlsLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogY29tcGFueU9iaklkXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChleGlzdGluZ0NvbnRhY3QpIHtcbiAgICAgICAgICAgICAgICBza2lwcGVkQ291bnQrKztcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgY29udGFjdFRvSW5zZXJ0OiBPbWl0PFVzZXIsICdpZCcgfCAnX2lkJz4gPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogY29udGFjdC5uYW1lLFxuICAgICAgICAgICAgICAgIGVtYWlsOiBjb250YWN0LmVtYWlsLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICAgICAgcGhvbmU6IGNvbnRhY3QucGhvbmUsXG4gICAgICAgICAgICAgICAgYXZhdGFyOiAnJyxcbiAgICAgICAgICAgICAgICBjb21wYW55SWQ6IGNvbXBhbnlPYmpJZCxcbiAgICAgICAgICAgICAgICBub3RlczogW10sXG4gICAgICAgICAgICAgICAgb25saW5lOiBmYWxzZSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRhY3RzQ29sbGVjdGlvbi5pbnNlcnRPbmUoY29udGFjdFRvSW5zZXJ0IGFzIGFueSk7XG4gICAgICAgICAgICBpZiAocmVzdWx0Lmluc2VydGVkSWQpIHtcbiAgICAgICAgICAgICAgICBpbXBvcnRlZENvdW50Kys7XG4gICAgICAgICAgICAgICAgbmV3Q29udGFjdHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIC4uLihjb250YWN0VG9JbnNlcnQgYXMgT21pdDxVc2VyLCAnaWQnIHwgJ19pZCc+KSxcbiAgICAgICAgICAgICAgICAgICAgX2lkOiByZXN1bHQuaW5zZXJ0ZWRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBpZDogcmVzdWx0Lmluc2VydGVkSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGFueUlkOiBjb21wYW55SWQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGBJbXBvcnQgY29tcGxldGUuIEFkZGVkICR7aW1wb3J0ZWRDb3VudH0gbmV3IGNvbnRhY3RzLCBza2lwcGVkICR7c2tpcHBlZENvdW50fSBkdXBsaWNhdGVzLmAsXG4gICAgICAgICAgICBuZXdDb250YWN0cyxcbiAgICAgICAgICAgIGltcG9ydGVkQ291bnQsXG4gICAgICAgICAgICBza2lwcGVkQ291bnRcbiAgICAgICAgfTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDU1YgaW1wb3J0IGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQgZHVyaW5nIGltcG9ydC5cIiwgbmV3Q29udGFjdHM6IFtdLCBpbXBvcnRlZENvdW50OiAwLCBza2lwcGVkQ291bnQ6IDAgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVBZ2VudEF2YXRhcihhZ2VudElkOiBzdHJpbmcsIGF2YXRhcjogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U/OiBzdHJpbmc7IGF2YXRhcj86IHN0cmluZzsgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGFnZW50c0NvbGxlY3Rpb24gPSBhd2FpdCBnZXRBZ2VudHNDb2xsZWN0aW9uKCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCB1cGRhdGVSZXN1bHQgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLnVwZGF0ZU9uZShcbiAgICAgICAgICAgIHsgX2lkOiBuZXcgT2JqZWN0SWQoYWdlbnRJZCkgfSxcbiAgICAgICAgICAgIHsgJHNldDogeyBhdmF0YXIgfSB9XG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKHVwZGF0ZVJlc3VsdC5tb2RpZmllZENvdW50ID09PSAwICYmIHVwZGF0ZVJlc3VsdC5tYXRjaGVkQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBcIkFnZW50IG5vdCBmb3VuZC5cIiB9O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBMb2cgYWN0aXZpdHlcbiAgICAgICAgY29uc3QgYWdlbnQgPSBhd2FpdCBhZ2VudHNDb2xsZWN0aW9uLmZpbmRPbmUoeyBfaWQ6IG5ldyBPYmplY3RJZChhZ2VudElkKSB9KTtcbiAgICAgICAgaWYgKGFnZW50KSB7XG4gICAgICAgICAgICAgYXdhaXQgbG9nQWN0aXZpdHkoYWdlbnQuY29tcGFueUlkLCBhZ2VudC5uYW1lLCAnVXBkYXRlIFByb2ZpbGUnLCBgVXBkYXRlZCBwcm9maWxlIHBpY3R1cmVgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGF2YXRhcjogYXZhdGFyIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlVwZGF0ZSBhZ2VudCBhdmF0YXIgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZC5cIiB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNjaGVkdWxlQW5hbHl0aWNzUmVwb3J0KGVtYWlsOiBzdHJpbmcsIGZyZXF1ZW5jeTogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U6IHN0cmluZzsgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIEluIGEgcmVhbCBhcHBsaWNhdGlvbiwgeW91IHdvdWxkIGNvbm5lY3QgdG8gYSBqb2Igc2NoZWR1bGVyIChlLmcuLCBCdWxsTVEsIGNyb24pXG4gICAgICAgIC8vIGFuZCBxdWV1ZSBhIGpvYiB0byBzZW5kIGFuIGVtYWlsIHJlcG9ydCBiYXNlZCBvbiB0aGUgZnJlcXVlbmN5LlxuICAgICAgICAvLyBGb3IgdGhpcyBkZW1vLCB3ZSdsbCBqdXN0IGxvZyBpdCB0byB0aGUgY29uc29sZS5cbiAgICAgICAgY29uc29sZS5sb2coYEFuYWx5dGljcyByZXBvcnQgc2NoZWR1bGVkIGZvciAke2VtYWlsfSB3aXRoIGZyZXF1ZW5jeTogJHtmcmVxdWVuY3l9YCk7XG4gICAgICAgIFxuICAgICAgICAvLyBZb3UgY291bGQgYWxzbyBsb2cgdGhpcyBhcyBhIHN5c3RlbSBhY3Rpdml0eVxuICAgICAgICAvLyBhd2FpdCBsb2dBY3Rpdml0eShjb21wYW55SWQsICdTeXN0ZW0nLCAnU2NoZWR1bGUgUmVwb3J0JywgYEFuYWx5dGljcyByZXBvcnQgc2NoZWR1bGVkIGZvciAke2VtYWlsfSAoJHtmcmVxdWVuY3l9KWApO1xuXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIG1lc3NhZ2U6IGBSZXBvcnQgc3VjY2Vzc2Z1bGx5IHNjaGVkdWxlZCBmb3IgJHtlbWFpbH0uYCB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJTY2hlZHVsZSByZXBvcnQgZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZCB3aGlsZSBzY2hlZHVsaW5nIHRoZSByZXBvcnQuXCIgfTtcbiAgICB9XG59XG4gICAgXG5cbiAgICBcblxuICAgIFxuXG5cblxuXG4gICAgIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJxU0FvTHNCIn0=
}}),
"[project]/src/app/data:d9b3f7 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"60daecd654edd9aad0f66818f3643edb5b83926f6b":"markAnnouncementAsRead"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "markAnnouncementAsRead": (()=>markAnnouncementAsRead)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var markAnnouncementAsRead = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("60daecd654edd9aad0f66818f3643edb5b83926f6b", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "markAnnouncementAsRead"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:8d0828 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"70fcfed8bffc4caf060f93474e4a8996b303b4b0fc":"addCommentToAnnouncement"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "addCommentToAnnouncement": (()=>addCommentToAnnouncement)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var addCommentToAnnouncement = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("70fcfed8bffc4caf060f93474e4a8996b303b4b0fc", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "addCommentToAnnouncement"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:6aa4dd [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"602c899fcfd2f9f3ff717cf7b6992bb14c9e5acee8":"updateAgentAvatar"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "updateAgentAvatar": (()=>updateAgentAvatar)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var updateAgentAvatar = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("602c899fcfd2f9f3ff717cf7b6992bb14c9e5acee8", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "updateAgentAvatar"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:85d87d [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"7802a2a3c0c2bb253b917e951020eb8b5beaa029c6":"updateAgentPassword"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "updateAgentPassword": (()=>updateAgentPassword)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var updateAgentPassword = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("7802a2a3c0c2bb253b917e951020eb8b5beaa029c6", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "updateAgentPassword"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:b7f9ab [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"40038480f4f658c87505338e9dcd7c2a9a8544e267":"getCampaignsByCompany"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "getCampaignsByCompany": (()=>getCampaignsByCompany)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var getCampaignsByCompany = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("40038480f4f658c87505338e9dcd7c2a9a8544e267", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "getCampaignsByCompany"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:4af950 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"70a879e7bd08c30d234a83e75003b58f7cb4bfd128":"createCampaign"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "createCampaign": (()=>createCampaign)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var createCampaign = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("70a879e7bd08c30d234a83e75003b58f7cb4bfd128", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "createCampaign"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/data:689e45 [app-ssr] (ecmascript) <text/javascript>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* __next_internal_action_entry_do_not_use__ [{"6049a27b16f34690f84c6af4f9a048cb3293c23e61":"handleLogin"},"src/app/actions.ts",""] */ __turbopack_context__.s({
    "handleLogin": (()=>handleLogin)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)");
"use turbopack no side effects";
;
var handleLogin = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createServerReference"])("6049a27b16f34690f84c6af4f9a048cb3293c23e61", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callServer"], void 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$webpack$2f$loaders$2f$next$2d$flight$2d$loader$2f$action$2d$client$2d$wrapper$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findSourceMapURL"], "handleLogin"); //# sourceMappingURL=data:application/json;base64,
}}),
"[project]/src/app/page.tsx [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>Home)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$chat$2d$layout$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/chat-layout.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$vertical$2d$nav$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/vertical-nav.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$contacts$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/contacts-view.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$agents$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/agents-view.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$dashboard$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/dashboard-view.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$announcements$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/announcements-view.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$settings$2d$dialog$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/settings-dialog.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$campaigns$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/campaigns-view.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$my$2d$performance$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/my-performance-view.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$auth$2d$form$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/auth-form.tsx [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$app$2f$data$3a$689e45__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$text$2f$javascript$3e$__ = __turbopack_context__.i("[project]/src/app/data:689e45 [app-ssr] (ecmascript) <text/javascript>");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$hooks$2f$use$2d$toast$2e$ts__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/hooks/use-toast.ts [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$loading$2d$screen$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/src/components/dashboard/loading-screen.tsx [app-ssr] (ecmascript)");
"use client";
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
function Home({ params, searchParams }) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["use"])(params);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["use"])(searchParams);
    const [activeView, setActiveView] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])("Chat");
    const [isNavOpen, setIsNavOpen] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])(false);
    const [currentUser, setCurrentUser] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])(null);
    const [isSettingsOpen, setIsSettingsOpen] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])(false);
    const [initialContact, setInitialContact] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])(null);
    const [isLoading, setIsLoading] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])(true);
    const { toast } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$hooks$2f$use$2d$toast$2e$ts__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useToast"])();
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(()=>{
        const timer = setTimeout(()=>{
            setIsLoading(false);
        }, 1500);
        return ()=>clearTimeout(timer);
    }, []);
    const onLogin = async (email, password_unused)=>{
        const result = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$app$2f$data$3a$689e45__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$text$2f$javascript$3e$__["handleLogin"])(email, password_unused);
        if (result.success && result.agent) {
            const agent = result.agent;
            setCurrentUser({
                id: agent.id,
                name: agent.name,
                avatar: agent.avatar,
                role: agent.role,
                email: agent.email,
                phone: agent.phone,
                companyId: agent.companyId
            });
            if (agent.role === 'admin') {
                setActiveView('Dashboard');
            } else {
                setActiveView('Chat');
            }
        }
        return {
            success: result.success,
            message: result.message
        };
    };
    const handleLogout = ()=>{
        setCurrentUser(null);
        setActiveView('Chat');
    };
    const handleUpdateUser = (updatedUser)=>{
        setCurrentUser((prev)=>prev ? {
                ...prev,
                ...updatedUser
            } : null);
    };
    const handleNavigateToChat = (contact)=>{
        setInitialContact(contact);
        setActiveView("Chat");
        // Reset initialContact after a short delay to allow ChatLayout to pick it up
        setTimeout(()=>setInitialContact(null), 100);
    };
    const renderView = ()=>{
        const props = {
            onMenuClick: ()=>setIsNavOpen(true),
            user: currentUser
        };
        switch(activeView){
            case "Chat":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$chat$2d$layout$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ChatLayout"], {
                    ...props,
                    initialContact: initialContact
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 86,
                    columnNumber: 16
                }, this);
            case "Contacts":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$contacts$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ContactsView"], {
                    ...props,
                    onNavigateToChat: handleNavigateToChat
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 88,
                    columnNumber: 16
                }, this);
            case "Agents":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$agents$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AgentsView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 90,
                    columnNumber: 16
                }, this);
            case "Dashboard":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$dashboard$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DashboardView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 92,
                    columnNumber: 16
                }, this);
            case "Announcements":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$announcements$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AnnouncementsView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 94,
                    columnNumber: 16
                }, this);
            case "My Performance":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$my$2d$performance$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MyPerformanceView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 96,
                    columnNumber: 16
                }, this);
            case "Campaigns":
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$campaigns$2d$view$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CampaignsView"], {
                    ...props
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 98,
                    columnNumber: 17
                }, this);
            default:
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$chat$2d$layout$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ChatLayout"], {
                    user: currentUser,
                    onMenuClick: ()=>setIsNavOpen(true),
                    initialContact: initialContact
                }, void 0, false, {
                    fileName: "[project]/src/app/page.tsx",
                    lineNumber: 100,
                    columnNumber: 16
                }, this);
        }
    };
    if (isLoading) {
        return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$loading$2d$screen$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LoadingScreen"], {}, void 0, false, {
            fileName: "[project]/src/app/page.tsx",
            lineNumber: 105,
            columnNumber: 12
        }, this);
    }
    if (!currentUser) {
        return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])("main", {
            className: "flex h-screen w-full items-center justify-center bg-background p-4 overflow-hidden auth-page-background",
            children: /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$auth$2d$form$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AuthForm"], {
                onLogin: onLogin
            }, void 0, false, {
                fileName: "[project]/src/app/page.tsx",
                lineNumber: 111,
                columnNumber: 9
            }, this)
        }, void 0, false, {
            fileName: "[project]/src/app/page.tsx",
            lineNumber: 110,
            columnNumber: 7
        }, this);
    }
    return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])("main", {
        className: "flex h-screen bg-background",
        children: [
            /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$settings$2d$dialog$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SettingsDialog"], {
                open: isSettingsOpen,
                onOpenChange: setIsSettingsOpen,
                user: currentUser,
                onUserUpdate: handleUpdateUser
            }, void 0, false, {
                fileName: "[project]/src/app/page.tsx",
                lineNumber: 118,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$components$2f$dashboard$2f$vertical$2d$nav$2e$tsx__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["VerticalNav"], {
                activeView: activeView,
                setActiveView: setActiveView,
                user: currentUser,
                onLogout: handleLogout,
                isOpen: isNavOpen,
                setIsOpen: setIsNavOpen,
                onSettingsClick: ()=>setIsSettingsOpen(true)
            }, void 0, false, {
                fileName: "[project]/src/app/page.tsx",
                lineNumber: 124,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxDEV"])("div", {
                className: "flex-1 md:pl-[70px] min-w-0",
                children: renderView()
            }, void 0, false, {
                fileName: "[project]/src/app/page.tsx",
                lineNumber: 133,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true, {
        fileName: "[project]/src/app/page.tsx",
        lineNumber: 117,
        columnNumber: 5
    }, this);
}
}}),

};

//# sourceMappingURL=src_app_c1781d16._.js.map